<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Michael Herman]]></title>
  <link href="http://mjhea0.github.com/atom.xml" rel="self"/>
  <link href="http://mjhea0.github.com/"/>
  <updated>2015-10-02T08:00:54-06:00</updated>
  <id>http://mjhea0.github.com/</id>
  <author>
    <name><![CDATA[Michael Herman]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    
    <title type="html"><![CDATA[Social Authentication in Node.js with Passport]]></title>
    <link href="http://mjhea0.github.com/blog/2015/09/26/social-authentication-in-node-dot-js-with-passport/"/>
    
    <updated>2015-09-26T13:37:00-06:00</updated>
    <id>http://mjhea0.github.com/blog/2015/09/26/social-authentication-in-node-dot-js-with-passport</id>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/jaredhanson/passport">Passport</a> is a library that provides a mechanism for easily setting up an authentication/registration system with support for <a href="https://github.com/jaredhanson/passport#strategies">several frameworks and auth providers</a>. <strong>In this tutorial, we’ll demonstrate in detail how to integrate this library into a Node.JS/Express 4 application to provide user authentication through LinkedIn, Github, and Twitter using OAuth 2.0.</strong></p>

<div style="text-align:center;">
  <img src="http://mjhea0.github.com/images/passport-social-auth.png" style="max-width: 100%; border:0;" alt="passport social auth">
</div>

<p>We will be using:</p>

<ul>
<li>NodeJS v<a href="https://nodejs.org/docs/v4.1.1/api/all.html">4.1.1</a></li>
<li>ExpressJS v<a href="http://expressjs.com/4x/api.html">4.13.1</a></li>
<li>Mongoose v<a href="http://mongoosejs.com/docs/guide.html">4.1.8</a></li>
<li>Passport Strategies:

<ul>
<li>passport: v<a href="https://github.com/jaredhanson/passport">0.3.0</a></li>
<li>passport-linkedin: v<a href="https://github.com/jaredhanson/passport-linkedin">1.0.0</a></li>
<li>passport-github2: v<a href="https://github.com/cfsghost/passport-github">0.1.9</a></li>
<li>passport-twitter: v<a href="https://github.com/jaredhanson/passport-twitter">1.0.3</a></li>
</ul></li>
</ul>

<blockquote>
<p>For all dependencies, please view the <em>package.json</em> file in the <a href="https://github.com/mjhea0/passport-social-auth">repo</a>.</p>
</blockquote>

<h2>OAuth 2.0?</h2>

<p><a href="http://oauth.net/2/">OAuth 2.0</a> is the successor of the OAuth protocol (<a href="https://en.wikipedia.org/wiki/OAuth">open standard for authorization</a>), which enables third-party applications, such as the one we&#39;ll be building, access to an HTTP service without having to share secure credentials.</p>

<h2>Project Setup</h2>

<p>Let&#39;s get started!</p>

<h3>Boilerplate</h3>

<p>Start by downloading the project structure from the <a href="https://github.com/mjhea0/passport-social-auth/releases/tag/v1">Github repo</a>.</p>

<p>You should have:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>├── client
</span><span class='line'>│   └── public
</span><span class='line'>│       ├── css
</span><span class='line'>│       │   └── main.css
</span><span class='line'>│       └── js
</span><span class='line'>│           └── main.js
</span><span class='line'>├── package.json
</span><span class='line'>└── server
</span><span class='line'>    ├── app.js
</span><span class='line'>    ├── bin
</span><span class='line'>    │   └── www
</span><span class='line'>    ├── routes
</span><span class='line'>    │   └── index.js
</span><span class='line'>    └── views
</span><span class='line'>        ├── error.html
</span><span class='line'>        ├── index.html
</span><span class='line'>        └── layout.html
</span></code></pre></td></tr></table></div></figure>

<h2>Passport</h2>

<p>Install Passport as well as the specific <a href="https://github.com/jaredhanson/passport#search-all-strategies">Passport Strategies</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>npm install passport@0.3.0 --save
</span><span class='line'><span class="nv">$ </span>npm install passport-github2@0.1.9 passport-linkedin@1.0.0 passport-twitter@1.0.3 --save
</span></code></pre></td></tr></table></div></figure>

<p>Create an &quot;auth&quot; directory in the &quot;server&quot; and add the following files:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>└── auth
</span><span class='line'>  ├── github.js
</span><span class='line'>  ├── linkedin.js
</span><span class='line'>  └── twitter.js
</span></code></pre></td></tr></table></div></figure>

<p>Add the Passport dependency to <em>app.js</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">passport</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;passport&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<p>Install the <a href="https://github.com/expressjs/session">express session</a> middleware:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>npm install express-session@1.11.3 --save
</span></code></pre></td></tr></table></div></figure>

<p>And add it as a dependency:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">session</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express-session&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<p>Then add the required middleware:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">session</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">secret</span><span class="o">:</span> <span class="s1">&#39;keyboard cat&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">resave</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">saveUninitialized</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'><span class="p">}));</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">passport</span><span class="p">.</span><span class="nx">initialize</span><span class="p">());</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">passport</span><span class="p">.</span><span class="nx">session</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure>

<h3>Configuration</h3>

<p>Add a <em>_config.js</em> file to the &quot;server&quot; and add the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">ids</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">github</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">clientID</span><span class="o">:</span> <span class="s1">&#39;get_your_own&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">clientSecret</span><span class="o">:</span> <span class="s1">&#39;get_your_own&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">callbackURL</span><span class="o">:</span> <span class="s2">&quot;http://127.0.0.1:3000/auth/github/callback&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">linkedin</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">clientID</span><span class="o">:</span> <span class="s1">&#39;get_your_own&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">clientSecret</span><span class="o">:</span> <span class="s1">&#39;get_your_own&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">callbackURL</span><span class="o">:</span> <span class="s2">&quot;http://127.0.0.1:3000/auth/linkedin/callback&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">twitter</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">consumerKey</span><span class="o">:</span> <span class="s1">&#39;get_your_own&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">consumerSecret</span><span class="o">:</span> <span class="s1">&#39;get_your_own&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">callbackURL</span><span class="o">:</span> <span class="s2">&quot;http://127.0.0.1:3000/auth/twitter/callback&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">ids</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>

<p>Make sure to add this file to your <em>.gitignore</em> since this will contain sensitive info.</p>

<h3>MongoDB and Mongoose</h3>

<p>Install <a href="http://mongoosejs.com/">Mongoose</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>npm install mongoose@4.1.8 --save
</span></code></pre></td></tr></table></div></figure>

<p>Require the dependency in <em>app.js</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">mongoose</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;mongoose&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<p>Then establish the connection to MongoDB within <em>app.js</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// *** mongoose *** //</span>
</span><span class='line'><span class="nx">mongoose</span><span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="s1">&#39;mongodb://localhost/passport-social-auth&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<p>Add a Mongoose Schema to a new file called <em>user.js</em> in a new folder, within &quot;server&quot;, called &quot;models&quot;:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">mongoose</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;mongoose&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">Schema</span> <span class="o">=</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">Schema</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// create User Schema</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">User</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Schema</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">name</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">someID</span><span class="o">:</span> <span class="nb">String</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">model</span><span class="p">(</span><span class="s1">&#39;users&#39;</span><span class="p">,</span> <span class="nx">User</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<h3>Serialize and Deserialize</h3>

<p>Passport needs to serialize and deserialize user instances from a session store to support login sessions. To add this funcionality, create an <em>init.js</em> file within the &quot;auth&quot; directory, and then add the following code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">passport</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;passport&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">User</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;../models/user&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">passport</span><span class="p">.</span><span class="nx">serializeUser</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">user</span><span class="p">,</span> <span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">done</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">user</span><span class="p">.</span><span class="nx">id</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">passport</span><span class="p">.</span><span class="nx">deserializeUser</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">id</span><span class="p">,</span> <span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">User</span><span class="p">.</span><span class="nx">findById</span><span class="p">(</span><span class="nx">id</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">done</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">user</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>

<h3>Routes and Views</h3>

<p>Before we test, add the following route-</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/login&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;Go back and register!&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>-and update the <em>index.html</em> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{% extends &#39;layout.html&#39; %}
</span><span class='line'>
</span><span class='line'>{% block title %}{% endblock %}
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>{% block content %}
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;h1&gt;</span>{{ title }}<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>    <span class="nt">&lt;p&gt;</span>Welcome! Please Login.<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>    <span class="nt">&lt;hr&gt;&lt;br&gt;</span>
</span><span class='line'>    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/auth/linkedin&quot;</span> <span class="na">class=</span><span class="s">&quot;btn btn-default&quot;</span><span class="nt">&gt;</span>LinkedIn<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/auth/github&quot;</span> <span class="na">class=</span><span class="s">&quot;btn btn-default&quot;</span><span class="nt">&gt;</span>Github<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/auth/twitter&quot;</span> <span class="na">class=</span><span class="s">&quot;btn btn-default&quot;</span><span class="nt">&gt;</span>Twitter<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>{% endblock %}
</span></code></pre></td></tr></table></div></figure>

<h3>Sanity Check</h3>

<p>Test this code to make sure all is well:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>npm start
</span></code></pre></td></tr></table></div></figure>

<p>Once done, kill the server, and then commit your code and push to Github.</p>

<blockquote>
<p>Need the updated code? Grab it <a href="https://github.com/mjhea0/passport-social-auth/releases/tag/v2">here</a>.</p>
</blockquote>

<h2>LinkedIn Auth</h2>

<blockquote>
<p><a href="https://github.com/jaredhanson/passport-linkedin">https://github.com/jaredhanson/passport-linkedin</a></p>
</blockquote>

<p>For almost all of the strategies, you will need to-</p>

<ol>
<li>Create an app through the auth provider</li>
<li>Update the config file with the required IDs and keys as well as a callback URL</li>
<li>Configure the Passport strategy</li>
<li>Add the required routes</li>
<li>Update the view</li>
</ol>

<h3>Create an App</h3>

<p>Navigate to <a href="https://www.linkedin.com/developer/apps/">LinkedIn Developers</a> to register a new application. Just enter dummy info, make sure to add the callback - <a href="http://127.0.0.1:3000/auth/linkedin/callback">http://127.0.0.1:3000/auth/linkedin/callback</a> - and update the config within the app:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">linkedin</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'> <span class="nx">clientID</span><span class="o">:</span> <span class="s1">&#39;ADD YOUR ID HERE&#39;</span><span class="p">,</span>
</span><span class='line'> <span class="nx">clientSecret</span><span class="o">:</span> <span class="s1">&#39;ADD YOUR SECRET HERE&#39;</span><span class="p">,</span>
</span><span class='line'> <span class="nx">callbackURL</span><span class="o">:</span> <span class="s2">&quot;http://127.0.0.1:3000/auth/linkedin/callback&quot;</span>
</span><span class='line'><span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>

<h3>Configure Strategy</h3>

<blockquote>
<p><a href="https://github.com/jaredhanson/passport-linkedin#usage">https://github.com/jaredhanson/passport-linkedin#usage</a></p>
</blockquote>

<p>Add the following code to <em>linkedin.js</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">passport</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;passport&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">LinkedInStrategy</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;passport-linkedin&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">User</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;../models/user&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">config</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;../_config&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">init</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./init&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">passport</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="k">new</span> <span class="nx">LinkedInStrategy</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">consumerKey</span><span class="o">:</span> <span class="nx">config</span><span class="p">.</span><span class="nx">linkedin</span><span class="p">.</span><span class="nx">clientID</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">consumerSecret</span><span class="o">:</span> <span class="nx">config</span><span class="p">.</span><span class="nx">linkedin</span><span class="p">.</span><span class="nx">clientSecret</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">callbackURL</span><span class="o">:</span> <span class="nx">config</span><span class="p">.</span><span class="nx">linkedin</span><span class="p">.</span><span class="nx">callbackURL</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="c1">// linkedin sends back the tokens and progile info</span>
</span><span class='line'>  <span class="kd">function</span><span class="p">(</span><span class="nx">token</span><span class="p">,</span> <span class="nx">tokenSecret</span><span class="p">,</span> <span class="nx">profile</span><span class="p">,</span> <span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">searchQuery</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">name</span><span class="o">:</span> <span class="nx">profile</span><span class="p">.</span><span class="nx">displayName</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">updates</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">name</span><span class="o">:</span> <span class="nx">profile</span><span class="p">.</span><span class="nx">displayName</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">someID</span><span class="o">:</span> <span class="nx">profile</span><span class="p">.</span><span class="nx">id</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">options</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">upsert</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// update the user if s/he exists or add a new user</span>
</span><span class='line'>    <span class="nx">User</span><span class="p">.</span><span class="nx">findOneAndUpdate</span><span class="p">(</span><span class="nx">searchQuery</span><span class="p">,</span> <span class="nx">updates</span><span class="p">,</span> <span class="nx">options</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">done</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">done</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">user</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// serialize user into the session</span>
</span><span class='line'><span class="nx">init</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">passport</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>

<p>Aside for the Passport magic, you can see that we&#39;re either updating the user, if the user is found, or creating a new user, if a user is not found.</p>

<h3>Add Routes</h3>

<blockquote>
<p><a href="https://github.com/jaredhanson/passport-linkedin#authenticate-requests">https://github.com/jaredhanson/passport-linkedin#authenticate-requests</a></p>
</blockquote>

<p>Update the routes with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/auth/linkedin&#39;</span><span class="p">,</span> <span class="nx">passportLinkedIn</span><span class="p">.</span><span class="nx">authenticate</span><span class="p">(</span><span class="s1">&#39;linkedin&#39;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/auth/linkedin/callback&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">passportLinkedIn</span><span class="p">.</span><span class="nx">authenticate</span><span class="p">(</span><span class="s1">&#39;linkedin&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">failureRedirect</span><span class="o">:</span> <span class="s1">&#39;/login&#39;</span> <span class="p">}),</span>
</span><span class='line'>  <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Successful authentication</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">user</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>Add in the dependency as well:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">passportLinkedIn</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;../auth/linkedin&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<h3>Sanity Check</h3>

<p>Test this out. <em>Be sure to use <a href="http://127.0.0.1:3000/">http://127.0.0.1:3000/</a> rather than <a href="http://localhost:3000/">http://localhost:3000/</a>.</em></p>

<p>Now, let&#39;s just duplicate that workflow for the remaining providers&#8230;</p>

<h2>Github Auth</h2>

<blockquote>
<p><a href="https://github.com/cfsghost/passport-github">https://github.com/cfsghost/passport-github</a></p>
</blockquote>

<h3>Create an App</h3>

<p>Again, create an app, adding in the correct callback URL, and add the given client ID and Secret Key to the <em>_config.js</em> file.</p>

<h3>Configure Strategy</h3>

<blockquote>
<p><a href="https://github.com/cfsghost/passport-github#configure-strategy">https://github.com/cfsghost/passport-github#configure-strategy</a></p>
</blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">passport</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;passport&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">GitHubStrategy</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;passport-github2&#39;</span><span class="p">).</span><span class="nx">Strategy</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">User</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;../models/user&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">config</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;../_config&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">init</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./init&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nx">passport</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="k">new</span> <span class="nx">GitHubStrategy</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">clientID</span><span class="o">:</span> <span class="nx">config</span><span class="p">.</span><span class="nx">github</span><span class="p">.</span><span class="nx">clientID</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">clientSecret</span><span class="o">:</span> <span class="nx">config</span><span class="p">.</span><span class="nx">github</span><span class="p">.</span><span class="nx">clientSecret</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">callbackURL</span><span class="o">:</span> <span class="nx">config</span><span class="p">.</span><span class="nx">github</span><span class="p">.</span><span class="nx">callbackURL</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="kd">function</span><span class="p">(</span><span class="nx">accessToken</span><span class="p">,</span> <span class="nx">refreshToken</span><span class="p">,</span> <span class="nx">profile</span><span class="p">,</span> <span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">searchQuery</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">name</span><span class="o">:</span> <span class="nx">profile</span><span class="p">.</span><span class="nx">displayName</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">updates</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">name</span><span class="o">:</span> <span class="nx">profile</span><span class="p">.</span><span class="nx">displayName</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">someID</span><span class="o">:</span> <span class="nx">profile</span><span class="p">.</span><span class="nx">id</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">options</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">upsert</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// update the user if s/he exists or add a new user</span>
</span><span class='line'>    <span class="nx">User</span><span class="p">.</span><span class="nx">findOneAndUpdate</span><span class="p">(</span><span class="nx">searchQuery</span><span class="p">,</span> <span class="nx">updates</span><span class="p">,</span> <span class="nx">options</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">done</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">done</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">user</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// serialize user into the session</span>
</span><span class='line'><span class="nx">init</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">passport</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>

<h3>Add Routes</h3>

<blockquote>
<p><a href="https://github.com/cfsghost/passport-github#authenticate-requests">https://github.com/cfsghost/passport-github#authenticate-requests</a></p>
</blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">passportGithub</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;../auth/github&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/auth/github&#39;</span><span class="p">,</span> <span class="nx">passportGithub</span><span class="p">.</span><span class="nx">authenticate</span><span class="p">(</span><span class="s1">&#39;github&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">scope</span><span class="o">:</span> <span class="p">[</span> <span class="s1">&#39;user:email&#39;</span> <span class="p">]</span> <span class="p">}));</span>
</span><span class='line'>
</span><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/auth/github/callback&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">passportGithub</span><span class="p">.</span><span class="nx">authenticate</span><span class="p">(</span><span class="s1">&#39;github&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">failureRedirect</span><span class="o">:</span> <span class="s1">&#39;/login&#39;</span> <span class="p">}),</span>
</span><span class='line'>  <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Successful authentication</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">user</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<h2>Twitter Auth</h2>

<blockquote>
<p><a href="https://github.com/jaredhanson/passport-twitter">https://github.com/jaredhanson/passport-twitter</a></p>
</blockquote>

<h3>Create an App</h3>

<p>Create an app on the <a href="https://apps.twitter.com/">Twitter Developer page</a>, and grab the Consumer Key and Secret.</p>

<h3>Configure Strategy</h3>

<blockquote>
<p><a href="https://github.com/jaredhanson/passport-twitter#configure-strategy">https://github.com/jaredhanson/passport-twitter#configure-strategy</a></p>
</blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">passport</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;passport&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">TwitterStrategy</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;passport-twitter&#39;</span><span class="p">).</span><span class="nx">Strategy</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">User</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;../models/user&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">config</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;../_config&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">init</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./init&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">passport</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="k">new</span> <span class="nx">TwitterStrategy</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">consumerKey</span><span class="o">:</span> <span class="nx">config</span><span class="p">.</span><span class="nx">twitter</span><span class="p">.</span><span class="nx">consumerKey</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">consumerSecret</span><span class="o">:</span> <span class="nx">config</span><span class="p">.</span><span class="nx">twitter</span><span class="p">.</span><span class="nx">consumerSecret</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">callbackURL</span><span class="o">:</span> <span class="nx">config</span><span class="p">.</span><span class="nx">twitter</span><span class="p">.</span><span class="nx">callbackURL</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="kd">function</span><span class="p">(</span><span class="nx">accessToken</span><span class="p">,</span> <span class="nx">refreshToken</span><span class="p">,</span> <span class="nx">profile</span><span class="p">,</span> <span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">searchQuery</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">name</span><span class="o">:</span> <span class="nx">profile</span><span class="p">.</span><span class="nx">displayName</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">updates</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">name</span><span class="o">:</span> <span class="nx">profile</span><span class="p">.</span><span class="nx">displayName</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">someID</span><span class="o">:</span> <span class="nx">profile</span><span class="p">.</span><span class="nx">id</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">options</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">upsert</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// update the user if s/he exists or add a new user</span>
</span><span class='line'>    <span class="nx">User</span><span class="p">.</span><span class="nx">findOneAndUpdate</span><span class="p">(</span><span class="nx">searchQuery</span><span class="p">,</span> <span class="nx">updates</span><span class="p">,</span> <span class="nx">options</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">done</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">done</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">user</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// serialize user into the session</span>
</span><span class='line'><span class="nx">init</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">passport</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>

<h3>Add Routes</h3>

<blockquote>
<p><a href="https://github.com/jaredhanson/passport-twitter#authenticate-requests">https://github.com/jaredhanson/passport-twitter#authenticate-requests</a></p>
</blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">passportTwitter</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;../auth/twitter&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/auth/twitter&#39;</span><span class="p">,</span> <span class="nx">passportTwitter</span><span class="p">.</span><span class="nx">authenticate</span><span class="p">(</span><span class="s1">&#39;twitter&#39;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/auth/twitter/callback&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">passportTwitter</span><span class="p">.</span><span class="nx">authenticate</span><span class="p">(</span><span class="s1">&#39;twitter&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">failureRedirect</span><span class="o">:</span> <span class="s1">&#39;/login&#39;</span> <span class="p">}),</span>
</span><span class='line'>  <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Successful authentication</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">user</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<h2>Conclusion</h2>

<p>Try adding some additional <a href="https://github.com/jaredhanson/passport#strategies">strategies</a>, comment below if you have questions, and grab the final code from the <a href="https://github.com/mjhea0/passport-social-auth">repo</a>.</p>

<p>Thanks for reading!</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Testing Node.js with Mocha and Chai]]></title>
    <link href="http://mjhea0.github.com/blog/2015/09/10/testing-node-js-with-mocha-and-chai/"/>
    
    <updated>2015-09-10T10:52:00-06:00</updated>
    <id>http://mjhea0.github.com/blog/2015/09/10/testing-node-js-with-mocha-and-chai</id>
    
    <content type="html"><![CDATA[<p><strong>This post serves as an introduction to testing a Node.js RESTful API with <a href="http://mochajs.org/">Mocha</a> (v2.3.1). a JavaScript testing framework.</strong></p>

<div style="text-align:center;">
  <img src="http://mjhea0.github.com/images/mocha-chaijs.png" style="max-width: 100%; border:0;" alt="mocha and chai.js">
</div>

<h2>Why Test?</h2>

<p>Before diving in it&#39;s important that you understand <em>why</em> tests are necessary.</p>

<p>Grab the Node/Express sample CRUD application from the <a href="https://github.com/mjhea0/node-mocha-chai-tutorial">repository</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git clone https://github.com/mjhea0/node-mocha-chai-tutorial.git
</span><span class='line'><span class="nv">$ </span>git checkout tags/v1
</span></code></pre></td></tr></table></div></figure>

<p>Once you have <em>v1</em> of the app, manually go through it and test each of the CRUD functions via cURL (or <a href="http://httpie.org/">HTTPie</a> or <a href="https://www.getpostman.com/">Postman</a>):</p>

<ol>
<li>Add new blobs</li>
<li>View all blobs</li>
<li>View a single blob</li>
<li>Update a single blob</li>
<li>Delete a single blob</li>
</ol>

<p>This is a tedious process. What if you had to go through this same manual process <em>every</em> single time a new feature got added to the application? That would not only be a massive misuse of time - but unreliable as well. Hence the need for setting up a testing framework for automating the testing of the application, so you can run hundreds of tests in a matter of seconds.</p>

<p>With that, install Mocha:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>npm install -g mocha@2.3.1
</span></code></pre></td></tr></table></div></figure>

<blockquote>
<p>We installed this globally so we&#39;ll be able to run <code>mocha</code> from the terminal.</p>
</blockquote>

<h2>Structure</h2>

<p>To set up the basic tests, create a new folder called &quot;test&quot; in the project root, then within that folder add a file called <em>test-server.js</em>. Your file/folder structure should now look like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>├── package.json
</span><span class='line'>├── server
</span><span class='line'>│   ├── app.js
</span><span class='line'>│   ├── models
</span><span class='line'>│   │   └── blob.js
</span><span class='line'>│   └── routes
</span><span class='line'>│       └── index.js
</span><span class='line'>└── <span class="nb">test</span>
</span><span class='line'>    └── <span class="nb">test</span>-server.js
</span></code></pre></td></tr></table></div></figure>

<p>Now add the following code to the new file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;Blobs&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should list ALL blobs on /blobs GET&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should list a SINGLE blob on /blob/&lt;id&gt; GET&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should add a SINGLE blob on /blobs POST&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should update a SINGLE blob on /blob/&lt;id&gt; PUT&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should delete a SINGLE blob on /blob/&lt;id&gt; DELETE&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>Although this is just boilerplate, pay attention to the <code>describe()</code> block and <code>it()</code> statements. <code>describe()</code> is used for grouping tests in a logical manner. Meanwhile, the <code>it()</code> statements contain each individual test case, which generally (err, <em>should</em>) test a single feature or edge case.</p>

<h2>Logic</h2>

<p>To add the necessary logic, we&#39;ll utilize <a href="http://chaijs.com/">Chai</a> (v3.2.0), an assertion library, and <a href="http://chaijs.com/plugins/chai-http">chai-http</a> (v 1.0.0), for making the actual HTTP requests and then testing the responses.</p>

<p>Install them both now:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>npm install chai@3.2.0 chai-http@1.0.0 --save-dev
</span></code></pre></td></tr></table></div></figure>

<p>Then update <em>test-server.js</em>, like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">chai</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;chai&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">chaiHttp</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;chai-http&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">server</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;../server/app&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">should</span> <span class="o">=</span> <span class="nx">chai</span><span class="p">.</span><span class="nx">should</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">chai</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">chaiHttp</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;Blobs&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should list ALL blobs on /blobs GET&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should list a SINGLE blob on /blob/&lt;id&gt; GET&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should add a SINGLE blob on /blobs POST&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should update a SINGLE blob on /blob/&lt;id&gt; PUT&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should delete a SINGLE blob on /blob/&lt;id&gt; DELETE&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>Here, we required the new packages, <code>chai</code> and <code>chai-http</code>, and our <em>app.js</em> file in order to make requests to the app. We also used the <code>should</code> assertion library so we can utilize <a href="http://chaijs.com/api/bdd/">BDD-style assertions</a>.</p>

<blockquote>
<p>One of the powerful aspects of Chai is that it allows you to choose the type of assertion style you&#39;d like to use. Check out the <a href="http://chaijs.com/guide/styles/">Assertion Style Guide</a> for more info. Also, aside for the assertion libraries included with Chai, there are a number of other libraries available via <a href="https://github.com/mochajs/mocha/wiki#assertion-libraries">NPM</a> and <a href="https://github.com/search?utf8=%E2%9C%93&amp;q=chai+assertion&amp;type=Repositories&amp;ref=searchresults">Github</a>.</p>
</blockquote>

<p>Now we can write our tests&#8230;</p>

<h2>Test - GET (all)</h2>

<p>Update the first <code>it()</code> statement:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should list ALL blobs on /blobs GET&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">chai</span><span class="p">.</span><span class="nx">request</span><span class="p">(</span><span class="nx">server</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/blobs&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span>
</span><span class='line'>      <span class="nx">res</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">200</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">done</span><span class="p">();</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>So, we passed an anonymous function with a single argument of <code>done</code> (a function) to the <code>it()</code> statement. This argument ends the test case when called - e.g., <code>done()</code>. The test itself is simple: We made a GET request to the <code>/blobs</code> endpoint and then asserted that the response contained a 200 HTTP status code.</p>

<p>Simple, right?</p>

<p>To test, simply run <code>mocha</code>; and if all went well, you should see:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>mocha
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  Blobs
</span><span class='line'>Connected to Database!
</span><span class='line'>GET /blobs 200 19.621 ms - 2
</span><span class='line'>    ✓ should list ALL blobs on /blobs GET <span class="o">(</span>43ms<span class="o">)</span>
</span><span class='line'>    - should list a SINGLE blob on /blob/&lt;id&gt; GET
</span><span class='line'>    - should add a SINGLE blob on /blobs POST
</span><span class='line'>    - should update a SINGLE blob on /blob/&lt;id&gt; PUT
</span><span class='line'>    - should delete a SINGLE blob on /blob/&lt;id&gt; DELETE
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  1 passing <span class="o">(</span>72ms<span class="o">)</span>
</span><span class='line'>  4 pending
</span></code></pre></td></tr></table></div></figure>

<p>Since testing the status code alone isn&#39;t very significant, let&#39;s add some more assertions:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should list ALL blobs on /blobs GET&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">chai</span><span class="p">.</span><span class="nx">request</span><span class="p">(</span><span class="nx">server</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/blobs&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span>
</span><span class='line'>      <span class="nx">res</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">200</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">res</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">json</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">res</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">a</span><span class="p">(</span><span class="s1">&#39;array&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">done</span><span class="p">();</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>This should be straightforward, since these assertions read like plain English. Run the test suite again. It passes, right? This test still isn&#39;t complete, since we&#39;re not testing any of the <em>actual</em> data being returned. We&#39;ll get to that shortly.</p>

<p>How about testing a POST request&#8230;</p>

<h2>Test - POST</h2>

<p>Based on the code within <em>index.js</em>, when a new &quot;blob&quot; is successfully added, we should see the following response:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="s2">&quot;SUCCESS&quot;</span>: <span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;__v&quot;</span>: 0,
</span><span class='line'>    <span class="s2">&quot;name&quot;</span>: <span class="s2">&quot;name&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;lastName&quot;</span>: <span class="s2">&quot;lastname&quot;</span>,
</span><span class='line'>    <span class="s2">&quot;_id&quot;</span>: <span class="s2">&quot;some-unique-id&quot;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<blockquote>
<p>Need proof? Test this out by logging <code>{&#39;SUCCESS&#39;: newBlob}</code> to the console, and then run a manual test to see what gets logged.</p>
</blockquote>

<p>With that, think about how you would write/structure your assertions to test this&#8230;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should add a SINGLE blob on /blobs POST&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">chai</span><span class="p">.</span><span class="nx">request</span><span class="p">(</span><span class="nx">server</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/blobs&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">send</span><span class="p">({</span><span class="s1">&#39;name&#39;</span><span class="o">:</span> <span class="s1">&#39;Java&#39;</span><span class="p">,</span> <span class="s1">&#39;lastName&#39;</span><span class="o">:</span> <span class="s1">&#39;Script&#39;</span><span class="p">})</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span>
</span><span class='line'>      <span class="nx">res</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">200</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">res</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">json</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">res</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">a</span><span class="p">(</span><span class="s1">&#39;object&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">res</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">property</span><span class="p">(</span><span class="s1">&#39;SUCCESS&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">res</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">SUCCESS</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">a</span><span class="p">(</span><span class="s1">&#39;object&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">res</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">SUCCESS</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">property</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">res</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">SUCCESS</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">property</span><span class="p">(</span><span class="s1">&#39;lastName&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">res</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">SUCCESS</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">property</span><span class="p">(</span><span class="s1">&#39;_id&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">res</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">SUCCESS</span><span class="p">.</span><span class="nx">name</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="s1">&#39;Java&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">res</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">SUCCESS</span><span class="p">.</span><span class="nx">lastName</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="s1">&#39;Script&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">done</span><span class="p">();</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>Need help understanding what&#39;s happening here? Add <code>console.log(res.body)</code> just before the first assert. Run the test to see the data contained within the response body. The test we wrote tests the actual structure and data from the response body, broken down by each individual key/value pair.</p>

<h2>Hooks</h2>

<p>Up to this point we have been using the main database for testing purposes, which is not ideal since we&#39;re polluting the database with test data. Instead, let&#39;s utilize a test database and add a dummy blob to it to assert against. To do this, we can use the <code>beforeEach()</code> and <code>afterEach()</code> <a href="http://mochajs.org/#hooks">hooks</a> - which, as the names suggest, add and remove a dummy document to the database before and after each test case is ran.</p>

<p>This sounds a bit difficult, but with Mocha it&#39;s super easy!</p>

<p>Start by adding a configuration file called <em>_config.js</em> to the &quot;server&quot; folder in order to specify a different database URI for testing purposes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">config</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">config</span><span class="p">.</span><span class="nx">mongoURI</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">development</span><span class="o">:</span> <span class="s1">&#39;mongodb://localhost/node-testing&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">test</span><span class="o">:</span> <span class="s1">&#39;mongodb://localhost/node-test&#39;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">config</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>

<p>Next, update <em>app.js</em> to utilize the test database when the environment variable <code>app.settings.env</code> evaluates to <code>test</code>. (The default is <code>development</code>.)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// *** config file *** //</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">config</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./_config&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// *** mongoose *** ///</span>
</span><span class='line'><span class="nx">mongoose</span><span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="nx">config</span><span class="p">.</span><span class="nx">mongoURI</span><span class="p">[</span><span class="nx">app</span><span class="p">.</span><span class="nx">settings</span><span class="p">.</span><span class="nx">env</span><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Error connecting to the database. &#39;</span> <span class="o">+</span> <span class="nx">err</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Connected to Database: &#39;</span> <span class="o">+</span> <span class="nx">config</span><span class="p">.</span><span class="nx">mongoURI</span><span class="p">[</span><span class="nx">app</span><span class="p">.</span><span class="nx">settings</span><span class="p">.</span><span class="nx">env</span><span class="p">]);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>Finally, update the requirements and add the hooks to the testing script:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NODE_ENV</span> <span class="o">=</span> <span class="s1">&#39;test&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">chai</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;chai&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">chaiHttp</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;chai-http&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">mongoose</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;mongoose&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">server</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;../server/app&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">Blob</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;../server/models/blob&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">should</span> <span class="o">=</span> <span class="nx">chai</span><span class="p">.</span><span class="nx">should</span><span class="p">();</span>
</span><span class='line'><span class="nx">chai</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">chaiHttp</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;Blobs&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">Blob</span><span class="p">.</span><span class="nx">collection</span><span class="p">.</span><span class="nx">drop</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">beforeEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">done</span><span class="p">){</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">newBlob</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Blob</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Bat&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">lastName</span><span class="o">:</span> <span class="s1">&#39;man&#39;</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="nx">newBlob</span><span class="p">.</span><span class="nx">save</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">done</span><span class="p">();</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="nx">afterEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">done</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">Blob</span><span class="p">.</span><span class="nx">collection</span><span class="p">.</span><span class="nx">drop</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">done</span><span class="p">();</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="p">...</span><span class="nx">snip</span><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>

<p>Now, before each test case, the database is cleared and a new blob is added; then, after each test, the database is cleared before the next test case is ran.</p>

<p>Run the tests again to ensure they still pass.</p>

<h2>Test - GET (all)</h2>

<p>With the hooks set up, let&#39;s refactor the first test to assert that the blob from the <code>beforeEach()</code> is part of the collection:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should list ALL blobs on /blobs GET&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">chai</span><span class="p">.</span><span class="nx">request</span><span class="p">(</span><span class="nx">server</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/blobs&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span>
</span><span class='line'>      <span class="nx">res</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">200</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">res</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">json</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">res</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">a</span><span class="p">(</span><span class="s1">&#39;array&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">res</span><span class="p">.</span><span class="nx">body</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">should</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">property</span><span class="p">(</span><span class="s1">&#39;_id&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">res</span><span class="p">.</span><span class="nx">body</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">should</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">property</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">res</span><span class="p">.</span><span class="nx">body</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">should</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">property</span><span class="p">(</span><span class="s1">&#39;lastName&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">res</span><span class="p">.</span><span class="nx">body</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">name</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="s1">&#39;Bat&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">res</span><span class="p">.</span><span class="nx">body</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">lastName</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="s1">&#39;man&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">done</span><span class="p">();</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>Let&#39;s look at the final three tests&#8230;</p>

<h2>Test - GET (single)</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should list a SINGLE blob on /blob/&lt;id&gt; GET&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">newBlob</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Blob</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Super&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">lastName</span><span class="o">:</span> <span class="s1">&#39;man&#39;</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="nx">newBlob</span><span class="p">.</span><span class="nx">save</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">chai</span><span class="p">.</span><span class="nx">request</span><span class="p">(</span><span class="nx">server</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/blob/&#39;</span><span class="o">+</span><span class="nx">data</span><span class="p">.</span><span class="nx">id</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span>
</span><span class='line'>          <span class="nx">res</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">200</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">res</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">json</span><span class="p">;</span>
</span><span class='line'>          <span class="nx">res</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">a</span><span class="p">(</span><span class="s1">&#39;object&#39;</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">res</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">property</span><span class="p">(</span><span class="s1">&#39;_id&#39;</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">res</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">property</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">res</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">property</span><span class="p">(</span><span class="s1">&#39;lastName&#39;</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">res</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">name</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="s1">&#39;Super&#39;</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">res</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">lastName</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="s1">&#39;man&#39;</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">res</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">_id</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">id</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">done</span><span class="p">();</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>In this test case, we first added a new blob, and then used the newly created <code>_id</code> to make the request and then test the subsequent response.</p>

<h2>Test - PUT</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should update a SINGLE blob on /blob/&lt;id&gt; PUT&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">chai</span><span class="p">.</span><span class="nx">request</span><span class="p">(</span><span class="nx">server</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/blobs&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span>
</span><span class='line'>      <span class="nx">chai</span><span class="p">.</span><span class="nx">request</span><span class="p">(</span><span class="nx">server</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">put</span><span class="p">(</span><span class="s1">&#39;/blob/&#39;</span><span class="o">+</span><span class="nx">res</span><span class="p">.</span><span class="nx">body</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">_id</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">send</span><span class="p">({</span><span class="s1">&#39;name&#39;</span><span class="o">:</span> <span class="s1">&#39;Spider&#39;</span><span class="p">})</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">response</span><span class="p">){</span>
</span><span class='line'>          <span class="nx">response</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">200</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">response</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">json</span><span class="p">;</span>
</span><span class='line'>          <span class="nx">response</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">a</span><span class="p">(</span><span class="s1">&#39;object&#39;</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">response</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">property</span><span class="p">(</span><span class="s1">&#39;UPDATED&#39;</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">response</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">UPDATED</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">a</span><span class="p">(</span><span class="s1">&#39;object&#39;</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">response</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">UPDATED</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">property</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">response</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">UPDATED</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">property</span><span class="p">(</span><span class="s1">&#39;_id&#39;</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">response</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">UPDATED</span><span class="p">.</span><span class="nx">name</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="s1">&#39;Spider&#39;</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">done</span><span class="p">();</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>Here, we hit the <code>/blobs</code> endpoint with a GET request to grab the blob added from the <code>beforeEach()</code> hook, then we simply added the <code>_id</code> to the URL for the PUT request and updated the name to <code>Spider</code>.</p>

<h2>Test - DELETE</h2>

<p>Finally&#8230;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should delete a SINGLE blob on /blob/&lt;id&gt; DELETE&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">chai</span><span class="p">.</span><span class="nx">request</span><span class="p">(</span><span class="nx">server</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/blobs&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span>
</span><span class='line'>      <span class="nx">chai</span><span class="p">.</span><span class="nx">request</span><span class="p">(</span><span class="nx">server</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="k">delete</span><span class="p">(</span><span class="s1">&#39;/blob/&#39;</span><span class="o">+</span><span class="nx">res</span><span class="p">.</span><span class="nx">body</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">_id</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">response</span><span class="p">){</span>
</span><span class='line'>          <span class="nx">response</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">200</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">response</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">json</span><span class="p">;</span>
</span><span class='line'>          <span class="nx">response</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">a</span><span class="p">(</span><span class="s1">&#39;object&#39;</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">response</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">property</span><span class="p">(</span><span class="s1">&#39;REMOVED&#39;</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">response</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">REMOVED</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">a</span><span class="p">(</span><span class="s1">&#39;object&#39;</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">response</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">REMOVED</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">property</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">response</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">REMOVED</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">have</span><span class="p">.</span><span class="nx">property</span><span class="p">(</span><span class="s1">&#39;_id&#39;</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">response</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">REMOVED</span><span class="p">.</span><span class="nx">name</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="s1">&#39;Bat&#39;</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">done</span><span class="p">();</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<h2>Conclusion</h2>

<p>Hopefully you can now see just how easy it is to test your code with Mocha and Chai. Keep practicing on your own, incorporating a true <a href="https://mochajs.org/#bdd">BDD</a> approach into your workflow. Grab the final code for this tutorial from the <a href="https://github.com/mjhea0/node-mocha-chai-tutorial">repository</a>.</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Node, Express, Swig, and MongoDB - getting started with CRUD]]></title>
    <link href="http://mjhea0.github.com/blog/2015/08/24/node-express-swig-mongo-primer/"/>
    
    <updated>2015-08-24T08:11:00-06:00</updated>
    <id>http://mjhea0.github.com/blog/2015/08/24/node-express-swig-mongo-primer</id>
    
    <content type="html"><![CDATA[<p><strong>Let&#39;s create a basic CRUD app using Node, Express, Swig, and MongoDB.</strong></p>

<div style="text-align:center;">
  <img src="http://mjhea0.github.com/images/node-express.png" style="max-width: 100%; border:0;" alt="mean stack authentication">
</div>

<p><br></p>

<blockquote>
<p>This tutorial utilizes <a href="http://nodejs.org/">Node</a> v0.12.5, <a href="http://expressjs.com/">Express</a> v4.13.1, <a href="http://paularmstrong.github.io/swig/">Swig</a> and <a href="http://mongoosejs.com/">Mongoose</a> v4.1.3.</p>
</blockquote>

<h2>Getting started</h2>

<p>Start by downloading the <a href="http://expressjs.com/starter/generator.html">Express application generator</a> (if you don&#39;t already have it) to create a basic Express project:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>npm install express-generator -g
</span></code></pre></td></tr></table></div></figure>

<blockquote>
<p>The <code>-g</code> flag indicates that you want to install the package globally, on your entire system.</p>
</blockquote>

<p>Navigate to a convenient directory, like your &quot;Desktop&quot; or &quot;Documents&quot;, then create the boilerplate:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>express node-express-swig-mongo
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>node-express-swig-mongo
</span></code></pre></td></tr></table></div></figure>

<p>Check out the project structure:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>├── app.js
</span><span class='line'>├── bin
</span><span class='line'>│   └── www
</span><span class='line'>├── package.json
</span><span class='line'>├── public
</span><span class='line'>│   ├── images
</span><span class='line'>│   ├── javascripts
</span><span class='line'>│   └── stylesheets
</span><span class='line'>│       └── style.css
</span><span class='line'>├── routes
</span><span class='line'>│   ├── index.js
</span><span class='line'>│   └── users.js
</span><span class='line'>└── views
</span><span class='line'>    ├── error.jade
</span><span class='line'>    ├── index.jade
</span><span class='line'>    └── layout.jade
</span></code></pre></td></tr></table></div></figure>

<p>Don&#39;t worry about the files and folders for now. Just know that we have created a boilerplate that can be used for a number of Node/Express applications. This took care of the heavy lifting, adding common files, folders, and scripts generally associated with all apps.</p>

<p>Notice the <em>package.json</em> file. This stores your project&#39;s dependencies, which we still need to install:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>npm install
</span></code></pre></td></tr></table></div></figure>

<p>Now let&#39;s install Mongoose and Swig:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>npm install mongoose swig --save
</span></code></pre></td></tr></table></div></figure>

<blockquote>
<p>The <code>--save</code> flag adds the dependencies and their versions to the <em>package.json</em> file. Take a look.</p>
</blockquote>

<h2>Sanity check</h2>

<p>Let&#39;s test our setup by running the app:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>npm start
</span></code></pre></td></tr></table></div></figure>

<p>Navigate to <a href="http://localhost:3000/">http://localhost:3000/</a> in your browser and you should see the &quot;Welcome to Express&quot; text. Once done, kill the server by pressing CTRL-C.</p>

<h2>Nodemon</h2>

<p>Before moving on, let&#39;s setup <a href="http://nodemon.io/">Nodemon</a> so that you can run your app and watch for code changes without having to manually restart the server. Check out the link above to learn more.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>npm install supervisor -g
</span></code></pre></td></tr></table></div></figure>

<p>Let&#39;s test again:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>nodemon
</span></code></pre></td></tr></table></div></figure>

<p>In your terminal you should see:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>23 Aug 16:31:02 - <span class="o">[</span>nodemon<span class="o">]</span> v1.4.1
</span><span class='line'>23 Aug 16:31:02 - <span class="o">[</span>nodemon<span class="o">]</span> to restart at any <span class="nb">time</span>, enter <span class="sb">`</span>rs<span class="sb">`</span>
</span><span class='line'>23 Aug 16:31:02 - <span class="o">[</span>nodemon<span class="o">]</span> watching: *.*
</span><span class='line'>23 Aug 16:31:02 - <span class="o">[</span>nodemon<span class="o">]</span> starting <span class="sb">`</span>node ./bin/www<span class="sb">`</span>
</span></code></pre></td></tr></table></div></figure>

<p>Essentially, Nodemon is watching for code changes, and if they do occur, then it will refresh the local server for you so you don&#39;t have to constantly kill the server then start it back up. It saves a lot of time and keystrokes.</p>

<p>Awesome. With the setup done, let&#39;s build something!</p>

<h2>Routes</h2>

<p>Grab your favorite text editor (such as <a href="http://www.sublimetext.com/">Sublime</a> or <a href="https://atom.io/">Atom</a>), and then open the main file, <em>app.js</em>, which houses much of the business logic. Take a look at the routes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="nx">routes</span><span class="p">);</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="s1">&#39;/users&#39;</span><span class="p">,</span> <span class="nx">users</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<p>Understanding how routes work as well as how to trace all the files associated with an individual route is an important skill to learn. You&#39;ll be able to approach most applications and understand how they work just by starting with the routes.</p>

<p>Let&#39;s look at this route:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="s1">&#39;/users&#39;</span><span class="p">,</span> <span class="nx">users</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>Here, we know that this route is associated with the <code>/users</code> endpoint. What&#39;s an endpoint? Simply navigate to <a href="http://localhost:3000/users">http://localhost:3000/users</a>.</p>

<p>The end user navigates to that endpoint and expects <em>something</em> to happen. That could mean some HTML is rendered or perhaps JSON is returned. That&#39;s not important at this point. For now, let&#39;s look at how Node handles the logic for &quot;handling routes&quot;.</p>

<p>Also, within that route, you can see the variable <code>users</code>. Where is in this file? It&#39;s at the top, and it loads in another file within our app:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">users</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./routes/users&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<p>Open that file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">router</span> <span class="o">=</span> <span class="nx">express</span><span class="p">.</span><span class="nx">Router</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* GET users listing. */</span>
</span><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;respond with a resource&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">router</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>

<p><strong>What&#39;s happening here?</strong> Essentially when that endpoint is hit, it responds by sending text in the form of a response to the end user - &quot;respond with a resource&quot;. Now, of course you don&#39;t always have to send text. You could respond with a template or view like a Jade or Swig template file that gets rendered into HTML. We&#39;ll look at how this works in just a minute when we add our own routes.</p>

<p><strong>Make sure you understand everything in this section before moving on.</strong></p>

<h3>Add a new route</h3>

<p>Let&#39;s now add a new route that renders a HTML form to the end user.</p>

<p>Start by adding the route handler in the <em>app.js</em> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="s1">&#39;/api&#39;</span><span class="p">,</span> <span class="nx">api</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<blockquote>
<p>Remember this simply means <code>app.use(&#39;/ENDPOINT&#39;, VARIABLE_NAME);</code>,</p>
</blockquote>

<p>Use the <code>api</code> variable to require a JS file within our routes folder.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">api</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./routes/api&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<p>Take a look in the terminal. You should see an error, indicating Node can&#39;t find the <code>./routes/api</code> module. We need to create it!</p>

<p>Create a new file called <em>api.js</em> in the &quot;routes&quot; directory. Add the following code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">router</span> <span class="o">=</span> <span class="nx">express</span><span class="p">.</span><span class="nx">Router</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/superheros&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;Just a test&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">router</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>

<blockquote>
<p>Do you remember what this code <code>res.send(&#39;Just a test&#39;);</code> will do? If not, review the previous section.</p>
</blockquote>

<p>Navigate to <a href="http://localhost:3000/api/superheros">http://localhost:3000/api/superheros</a>. You should see the text &quot;Just a test&quot; on the page.</p>

<h2>Swig</h2>

<p>Swig is a templating language, which compiles down to HTML, making it easy to separate logic from markup. For more on Swig, check out the <a href="http://mherman.org/blog/2015/08/23/primer-on-swig-templating/#.VdpL_VNViko">Primer on Swig Templating</a>.</p>

<p>Take a quick look at the <em>layout.jade</em>, <em>index.jade</em>, and <em>error.jade</em> files within the &quot;views&quot; folder. Right now these files are using <a href="http://jade-lang.com/">Jade</a> templating. Let&#39;s update these files to remove Jade and add Swig. First, remove the <em>.jade</em> extension from each file and add a <em>.html</em> extension. Now we can update the actual syntax&#8230;</p>

<p><strong><em>layout.html</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;title&gt;</span>{{ title }}<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;//netdna.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;/css/main.css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;body&gt;</span>
</span><span class='line'>    {% block content %}
</span><span class='line'>    {% endblock %}
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;//code.jquery.com/jquery-2.1.4.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;/js/main.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p><strong><em>index.html</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{% extends &#39;layout.html&#39; %}
</span><span class='line'>
</span><span class='line'>{% block title %}{% endblock %}
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>{% block content %}
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;h1&gt;</span>{{ title }}<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>    <span class="nt">&lt;p&gt;</span>Welcome to {{ title }}<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>{% endblock %}
</span></code></pre></td></tr></table></div></figure>

<p><strong><em>error.html</em></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{% extends &#39;layout.html&#39; %}
</span><span class='line'>
</span><span class='line'>{% block title %}{% endblock %}
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>{% block content %}
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;h1&gt;</span>{{ message }}<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>    <span class="nt">&lt;h2&gt;</span>{{ error.status }}<span class="nt">&lt;/h2&gt;</span>
</span><span class='line'>    <span class="nt">&lt;pre&gt;</span>{{ error.stack }}<span class="nt">&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>{% endblock %}
</span></code></pre></td></tr></table></div></figure>

<p>Finally, update <em>app.js</em> by requiring the following dependency at the top of the file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">swig</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;swig&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<p>Then set Swig as the template engine by replacing <code>app.set(&#39;view engine&#39;, &#39;jade&#39;);</code> with-</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">swig</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">swig</span><span class="p">.</span><span class="nx">Swig</span><span class="p">();</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">engine</span><span class="p">(</span><span class="s1">&#39;html&#39;</span><span class="p">,</span> <span class="nx">swig</span><span class="p">.</span><span class="nx">renderFile</span><span class="p">);</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;view engine&#39;</span><span class="p">,</span> <span class="s1">&#39;html&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<p>Jump back to the &quot;views&quot;, and take a look at <em>layout.html</em> and <em>index.html</em>. There&#39;s a relationship between those two files. We define the base structure in the <em>layout</em> file, which contains common structure that can be reused in multiple places.</p>

<p>Do you see the <code>block</code> keyword?</p>

<p>What really happens when the <em>index</em> file is rendered is that it first renders the base template because of the <code>extends</code> keyword. So, the <em>layout</em> template then gets rendered, which eventually pulls in the child template, overwriting the <code>block</code> keyword with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;h1&gt;</span>{{ title }}<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>  <span class="nt">&lt;p&gt;</span>Welcome to {{ title }}<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p>Hope that makes sense. If not, check out <a href="http://mherman.org/blog/2015/08/23/primer-on-swig-templating/#template-inheritence">this</a> resource for more info on template inheritance.</p>

<h3>Setup <em>api.html</em></h3>

<p>Create a new file called <em>api.html</em> in the &quot;views&quot; directory, and then add the following code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{% extends &#39;layout.html&#39; %}
</span><span class='line'>
</span><span class='line'>{% block title %}{% endblock %}
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>{% block content %}
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;h1&gt;</span>{{ title }}<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>    <span class="nt">&lt;p&gt;</span>Welcome to {{ title }}<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>{% endblock %}
</span></code></pre></td></tr></table></div></figure>

<p>The same thing is happening here with inheritance. If you&#39;re unfamiliar with Swig syntax, <code>{{ title }}</code> is essentially a variable, which we can pass in from <code>./routes/api.js</code>.</p>

<p>Update <code>./routes/api.js</code> by changing-</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;Just a test&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<p>-to-</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">res</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="s1">&#39;api&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;Superhero API&#39;</span> <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>This just says, &quot;When a user hits the <code>/api/superheros</code> endpoint, render the <em>api.html</em> file and pass in <code>Superhero API</code> as the title.&quot;</p>

<blockquote>
<p>Keep in mind that all Swig files are converted to HTML since browsers can&#39;t read the Swig templating syntax.</p>
</blockquote>

<p>Ready to test? Simple refresh <a href="http://localhost:3000/api/superheros">http://localhost:3000/api/superheros</a>.</p>

<p>Did it work? If yes, move on. If not, go back through this section and review.</p>

<h3>Update <em>api.html</em></h3>

<p>So, let&#39;s update the template to display a form:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{% extends &#39;layout.html&#39; %}
</span><span class='line'>
</span><span class='line'>{% block title %}{% endblock %}
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>{% block content %}
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;h1&gt;</span>{{ title }}<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;br&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;form</span> <span class="na">method=</span><span class="s">&quot;post&quot;</span> <span class="na">action=</span><span class="s">&quot;/api/superheros&quot;</span> <span class="na">class=</span><span class="s">&quot;form-inline&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;form-group&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;label&gt;</span>Superhero name<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">name=</span><span class="s">&quot;name&quot;</span> <span class="na">class=</span><span class="s">&quot;form-control&quot;</span> <span class="na">required</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>      <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">class=</span><span class="s">&quot;btn btn-default&quot;</span><span class="nt">&gt;</span>Save<span class="nt">&lt;/button&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/form&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>{% endblock %}
</span></code></pre></td></tr></table></div></figure>

<p>Refresh your browser. Do you see the form? Try clicking save. What happens? Well, you just tried to send a POST request to the <code>/api/superheros</code> endpoint, which does not exist - so you should see a 404 error. Let&#39;s set up the route handler.</p>

<h2>POST requests (part 1)</h2>

<p>Open <em>api.js</em> to add the logic for this new route:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">router</span> <span class="o">=</span> <span class="nx">express</span><span class="p">.</span><span class="nx">Router</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/superheros&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="s1">&#39;api&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;Superhero API&#39;</span> <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/superheros&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">redirect</span><span class="p">(</span><span class="s1">&#39;/api/superheros&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">router</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>

<p>Test this out again. Now, when you submit the form, we have the <code>/api/superheros</code> endpoint setup, which then grabs the text from the input box via <code>req.body.name</code>. Make sure the text is consoled in your terminal.</p>

<p>Okay. So, we are handling the routes and rendering the right template, but we still need to setup Mongoose to save the data from our form before we can finish with the POST request.</p>

<h2>Mongoose</h2>

<p><a href="http://mongoosejs.com/">Mongoose</a> is used for interacting with MongoDB. Start with defining the Schema, which then maps to a collection in Mongo.</p>

<p>Create a file called <em>database.js</em> in your app&#39;s root directory, then add the following code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">mongoose</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;mongoose&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">Schema</span>   <span class="o">=</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">Schema</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">Superhero</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Schema</span><span class="p">(</span>
</span><span class='line'>  <span class="p">{</span><span class="nx">name</span> <span class="o">:</span> <span class="nb">String</span><span class="p">}</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">mongoose</span><span class="p">.</span><span class="nx">model</span><span class="p">(</span><span class="s1">&#39;superheros&#39;</span><span class="p">,</span> <span class="nx">Superhero</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">mongoose</span><span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="s1">&#39;mongodb://localhost/node-superhero&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<p>Here, we required/included the Mongoose library along with a reference to the <code>Schema()</code> method. As said, you always start with defining the schema, then we linked it to collection called &quot;superheros&quot;. Finally, we opened a connection to an instance of our local MongoDB.</p>

<blockquote>
<p>If you don&#39;t have the MongoDB server running. Do so now. Open a new terminal window, and run the command <code>sudo mongod</code>. If you need to set up MongoDB, follow the Installation steps <a href="http://docs.mongodb.org/manual/tutorial/install-mongodb-on-os-x/">here</a>.</p>
</blockquote>

<p>Next, open <em>app.js</em> and require the Mongoose config at the very top of the file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// mongoose config</span>
</span><span class='line'><span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./database&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<p>With Mongoose setup, we need to update <em>api.js</em> to create (via POST) and read (via GET) data from the Mongo collection.</p>

<h2>GET requests (all resources)</h2>

<p>Open <em>api.js</em>. Require Mongoose as well as the <code>superheros</code> model, which we already created:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">mongoose</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;mongoose&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">Superhero</span> <span class="o">=</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">model</span><span class="p">(</span><span class="s1">&#39;superheros&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<p>Now, update the function handling GET requests:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/superheros&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">Superhero</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">superheros</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">superheros</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span>
</span><span class='line'>      <span class="s1">&#39;api&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="p">{</span><span class="nx">title</span> <span class="o">:</span> <span class="s1">&#39;Superhero API&#39;</span><span class="p">,</span> <span class="nx">superheros</span> <span class="o">:</span> <span class="nx">superheros</span><span class="p">}</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p><code>Superhero.find()</code> grabs all superheros from the Mongo collection, which we assign to the variable <code>superheros</code>. We can now use that variable in the Swig template.</p>

<h3>Update <em>api.html</em> to display superheros</h3>

<p>Let&#39;s add a loop to iterate through the superheros and then display the <code>name</code> key from the collection.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{% extends &#39;layout.html&#39; %}
</span><span class='line'>
</span><span class='line'>{% block title %}{% endblock %}
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>{% block content %}
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;h1&gt;</span>{{ title }}<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;br&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;form</span> <span class="na">method=</span><span class="s">&quot;post&quot;</span> <span class="na">action=</span><span class="s">&quot;/api/superheros&quot;</span> <span class="na">class=</span><span class="s">&quot;form-inline&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;form-group&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;label&gt;</span>Superhero name<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">name=</span><span class="s">&quot;name&quot;</span> <span class="na">class=</span><span class="s">&quot;form-control&quot;</span> <span class="na">required</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>      <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">class=</span><span class="s">&quot;btn btn-default&quot;</span><span class="nt">&gt;</span>Save<span class="nt">&lt;/button&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/form&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;hr&gt;&lt;br&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;h2&gt;</span>All Superheros<span class="nt">&lt;/h2&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;ul&gt;</span>
</span><span class='line'>    {% for superhero in superheros %}
</span><span class='line'>      <span class="nt">&lt;li&gt;</span>{{superhero.name}}<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    {% endfor %}
</span><span class='line'>    <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>{% endblock %}
</span></code></pre></td></tr></table></div></figure>

<blockquote>
<p>Do you remember where we set the <code>name</code> key? Check out the database schema in <em>database.js</em>.</p>
</blockquote>

<p>Before this will actually work - e.g., display superheros - we first need to add the logic to insert data into the Mongo collection.</p>

<h2>POST requests (part 2)</h2>

<p>Back in <em>api.js</em>, update the function for handling POST requests:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/superheros&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">new</span> <span class="nx">Superhero</span><span class="p">({</span><span class="nx">name</span> <span class="o">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">name</span><span class="p">})</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">save</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">superhero</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">superhero</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">redirect</span><span class="p">(</span><span class="s1">&#39;/api/superheros&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>This simply saves a new superhero, which again is grabbed from the form via <code>req.body.name</code>.</p>

<h2>Sanity Check</h2>

<p>Refresh you app. Add some superheros. If you&#39;ve done everything correctly, the superheros should be displayed beneath the form.</p>

<p>What about updates? And deletions? First, let&#39;s display a single superhero.</p>

<h2>GET requests (single resource)</h2>

<p>Update the list item in the HTML file like so to give each item a unique URL.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;superhero/{{superhero.id}}&quot;</span><span class="err">&lt;/</span><span class="na">a</span><span class="nt">&gt;</span>{{superhero.name}}<span class="nt">&lt;/li&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p>Now, let&#39;s add a new route handler to <em>api.js</em> to display a single superhero:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/superhero/:id&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">query</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&quot;_id&quot;</span><span class="o">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span><span class="p">};</span>
</span><span class='line'>  <span class="nx">Superhero</span><span class="p">.</span><span class="nx">findOne</span><span class="p">(</span><span class="nx">query</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">superhero</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">superhero</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span>
</span><span class='line'>      <span class="s1">&#39;superhero&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="p">{</span><span class="nx">title</span> <span class="o">:</span> <span class="s1">&#39;Superhero API - &#39;</span> <span class="o">+</span> <span class="nx">superhero</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span> <span class="nx">superhero</span> <span class="o">:</span> <span class="nx">superhero</span><span class="p">}</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>What&#39;s next? A new template. <em>superhero.html</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{% extends &#39;layout.html&#39; %}
</span><span class='line'>
</span><span class='line'>{% block title %}{% endblock %}
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>{% block content %}
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;h1&gt;</span>{{ title }}<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;br&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;form</span> <span class="na">method=</span><span class="s">&quot;post&quot;</span> <span class="na">action=</span><span class="s">&quot;/api/superhero/{{superhero.id}}?_method=PUT&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;form-group&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;label&gt;</span>Superhero name<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">name=</span><span class="s">&quot;name&quot;</span> <span class="na">class=</span><span class="s">&quot;form-control&quot;</span> <span class="na">value=</span><span class="s">&quot;{{superhero.name}}&quot;</span> <span class="na">required</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>      <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">class=</span><span class="s">&quot;btn btn-default&quot;</span><span class="nt">&gt;</span>Update<span class="nt">&lt;/button&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/form&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;br&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;form</span> <span class="na">method=</span><span class="s">&quot;post&quot;</span> <span class="na">action=</span><span class="s">&quot;/api/superhero/{{superhero.id}}?_method=DELETE&quot;</span> <span class="na">class=</span><span class="s">&quot;form-inline&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">class=</span><span class="s">&quot;btn btn-default&quot;</span><span class="nt">&gt;</span>Delete<span class="nt">&lt;/button&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/form&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>{% endblock %}
</span></code></pre></td></tr></table></div></figure>

<p>Test this out.</p>

<h2>PUT requests</h2>

<p>Since most browsers do not handle PUT or DELETE requests, we need to use the <a href="https://github.com/expressjs/method-override">method-override</a> middleware to handle such requests.</p>

<p>Install via NPM:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>npm install method-override --save
</span></code></pre></td></tr></table></div></figure>

<p>Add the requirement to <em>app.js</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">methodOverride</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;method-override&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<p>Then define the middleware just below the view engine setup in <em>app.js</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">methodOverride</span><span class="p">(</span><span class="s1">&#39;_method&#39;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>

<p>Finally, add the route handler to <em>api.js</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">put</span><span class="p">(</span><span class="s1">&#39;/superhero/:id&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">query</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&quot;_id&quot;</span><span class="o">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span><span class="p">};</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">update</span> <span class="o">=</span> <span class="p">{</span><span class="nx">name</span> <span class="o">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">name</span><span class="p">};</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">options</span> <span class="o">=</span> <span class="p">{</span><span class="k">new</span><span class="o">:</span> <span class="kc">true</span><span class="p">};</span>
</span><span class='line'>  <span class="nx">Superhero</span><span class="p">.</span><span class="nx">findOneAndUpdate</span><span class="p">(</span><span class="nx">query</span><span class="p">,</span> <span class="nx">update</span><span class="p">,</span> <span class="nx">options</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">superhero</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">superhero</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span>
</span><span class='line'>      <span class="s1">&#39;superhero&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="p">{</span><span class="nx">title</span> <span class="o">:</span> <span class="s1">&#39;Superhero API - &#39;</span> <span class="o">+</span> <span class="nx">superhero</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span> <span class="nx">superhero</span> <span class="o">:</span> <span class="nx">superhero</span><span class="p">}</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>Here, we are simply searching Mongo for the correct superhero via the Mongo ID and then updating the superhero name, which comes from the form, <code>req.body.name</code>. By setting <code>new</code> to <code>true</code>, we&#39;re able to grab the updated superhero information after the changes are made in Mongo. Try removing this option. What happens?</p>

<h2>DELETE requests</h2>

<p>With the button already set up in the template, we just need to add the route handler to <em>api.js</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">router</span><span class="p">.</span><span class="k">delete</span><span class="p">(</span><span class="s1">&#39;/superhero/:id&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">query</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&quot;_id&quot;</span><span class="o">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span><span class="p">};</span>
</span><span class='line'>  <span class="nx">Superhero</span><span class="p">.</span><span class="nx">findOneAndRemove</span><span class="p">(</span><span class="nx">query</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">superhero</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">superhero</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">redirect</span><span class="p">(</span><span class="s1">&#39;/api/superheros&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>Again, we&#39;re querying the database by the Mongo ID and then removing it. Simple, right?</p>

<h2>Conclusion</h2>

<p>That&#39;s it. Post your questions below. Grab the code from the <a href="https://github.com/mjhea0/node-express-swig-mongo">repository</a>. Cheers!</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Primer on Swig Templating]]></title>
    <link href="http://mjhea0.github.com/blog/2015/08/23/primer-on-swig-templating/"/>
    
    <updated>2015-08-23T14:10:00-06:00</updated>
    <id>http://mjhea0.github.com/blog/2015/08/23/primer-on-swig-templating</id>
    
    <content type="html"><![CDATA[<p><strong>Let&#39;s look at the basics of <a href="http://paularmstrong.github.io/swig/">Swig</a>, &quot;a simple, powerful, and extendable JavaScript Template Engine&quot; for NodeJS.</strong></p>

<p><hr><br></p>

<p>First off, a templating engine creates web pages (or views) dynamically by combining variables and programming logic with HTML. Essentially, you can add placeholders (or tags) to your HTML that are replaced by <em>actual</em> code defined from your router or controller. In general, tags, for the majority of templating engines, fall within one of two categores-</p>

<ol>
<li><em>Variables/Output Tags</em> - surrounded by double curly brackets &#8220;, these output the results of a logic tag or a variable to the end user</li>
<li><em>Logic Tags</em> - surrouded by <code>{% ... %}</code>, these handle programming logic, like loops and conditionals</li>
</ol>

<blockquote>
<p>Before diving in, grab the basic project structure from <a href="https://github.com/mjhea0/swig-primer/releases/tag/v1">Github</a>, install the dependencies via NPM - <code>npm install</code> - and then run the server. Pay attention to where we initialize Swig and set it as the templating language in <em>app.js</em>:<br>
    <code><br>
    var swig = new swig.Swig();<br>
    app.engine(&#39;html&#39;, swig.renderFile);<br>
    app.set(&#39;view engine&#39;, &#39;html&#39;);<br>
</code></p>
</blockquote>

<h2>Output Tags</h2>

<p>Let&#39;s start with some basic examples&#8230;</p>

<h3>Basics</h3>

<p>First, we can pass variables from our route handlers/view functions directly to the templates.</p>

<p>Update the <em>index.html</em> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;title&gt;</span>{{title}}<span class="nt">&lt;/title&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>  <span class="nt">&lt;h1&gt;</span>{{title}}<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p>Now, we can pass in a variable called <code>title</code> to the template from <em>app.js</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// *** main routes *** //</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="s1">&#39;index.html&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;Swig Primer!&#39;</span><span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>Fire up the server and test this out. Nice. <strong>Try adding another variable to the template.</strong></p>

<p><em>index.html</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;title&gt;</span>{{title}}<span class="nt">&lt;/title&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>  <span class="nt">&lt;h1&gt;</span>{{title}}<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>  <span class="nt">&lt;p&gt;</span>{{description}}<span class="nt">&lt;/p&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p><em>app.js</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">title</span> <span class="o">=</span> <span class="s1">&#39;Swig Primer!&#39;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">description</span> <span class="o">=</span> <span class="s1">&#39;Swig is &quot;a simple, powerful, and extendable JavaScript Template Engine&quot; for NodeJS.&#39;</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="s1">&#39;index.html&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">title</span><span class="o">:</span> <span class="nx">title</span><span class="p">,</span> <span class="nx">description</span><span class="o">:</span> <span class="nx">description</span><span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>Keep in mind that all variable outputs are <a href="http://paularmstrong.github.io/swig/docs/api/#SwigOpts">automtomatically escaped</a> except for function outputs:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// *** main routes *** //</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">title</span> <span class="o">=</span> <span class="s1">&#39;Swig Primer!&#39;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">description</span> <span class="o">=</span> <span class="s1">&#39;Swig is &quot;a simple, powerful, and extendable JavaScript Template Engine&quot; for NodeJS.&#39;</span>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">allthethings</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s1">&#39;&lt;span&gt;All the things!&lt;/span&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="s1">&#39;index.html&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">title</span><span class="o">:</span> <span class="nx">title</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">description</span><span class="o">:</span> <span class="nx">description</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">allthethings</span><span class="o">:</span> <span class="nx">allthethings</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>Don&#39;t forget to call the function in the template - <code>&lt;p&gt;&lt;/p&gt;</code></p>

<blockquote>
<p>Please see the official <a href="http://paularmstrong.github.io/swig/docs/#variables">documentation</a> for more info on output tags.</p>
</blockquote>

<h3>Filters</h3>

<p>Filters, which are just simple methods, can be used to modify the output value. To illustrate some examples, add another route handler to <em>app.js</em>, like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/filter&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="s1">&#39;filter.html&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;Hello, World!&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">date</span><span class="o">:</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(),</span>
</span><span class='line'>    <span class="nx">nameArray</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;This&#39;</span><span class="p">,</span> <span class="s1">&#39;is&#39;</span><span class="p">,</span> <span class="s1">&#39;just&#39;</span><span class="p">,</span> <span class="s1">&#39;an&#39;</span><span class="p">,</span> <span class="s1">&#39;example&#39;</span><span class="p">]</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>Now just add a new template, <em>filter.html</em>, adding in a number of filters:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;title&gt;</span>{{title}}<span class="nt">&lt;/title&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>  <span class="nt">&lt;h1&gt;</span>{{title | upper}}<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>  <span class="nt">&lt;p&gt;</span>{{date | date(&quot;Y-m-d&quot;)}}<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>  <span class="nt">&lt;p&gt;</span>{{nameArray | join(&#39; &#39;)}}<span class="nt">&lt;/p&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<blockquote>
<p>Check out all the available <a href="http://paularmstrong.github.io/swig/docs/filters/">filters</a>. You can also extend the functionality of Swig by adding your own <a href="http://paularmstrong.github.io/swig/docs/extending/">custom filters</a>!</p>
</blockquote>

<h2>Logic Tags</h2>

<p>As the name suggests, <a href="http://paularmstrong.github.io/swig/docs/tags/">logic tags</a> let you use, well, logic in your templates.</p>

<h3>IF statements</h3>

<p>Here&#39;s a simple example&#8230;</p>

<p><em>app.js</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/logic&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">title</span> <span class="o">=</span> <span class="s1">&#39;Swig Logic!&#39;</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="s1">&#39;logic.html&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">title</span><span class="o">:</span> <span class="nx">title</span><span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p><em>logic.html</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>
</span><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;title&gt;</span>{% if title %}{{title}}{% endif %}<span class="nt">&lt;/title&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>  {% if title %}
</span><span class='line'>    <span class="nt">&lt;h1&gt;</span>{{title}}<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>  {% endif %}
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>

<p><strong>Test out some more examples of <a href="http://paularmstrong.github.io/swig/docs/tags/#if">if</a>, <a href="http://paularmstrong.github.io/swig/docs/tags/#elif">elif</a>, and <a href="http://paularmstrong.github.io/swig/docs/tags/#else">else</a>.</strong></p>

<h3>Loops</h3>

<p><strong>How about a for loop?</strong></p>

<p><em>app.js</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/logic&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">title</span> <span class="o">=</span> <span class="s1">&#39;Swig Logic!&#39;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">numberArray</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">]</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="s1">&#39;logic.html&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">title</span><span class="o">:</span> <span class="nx">title</span><span class="p">,</span> <span class="nx">numberArray</span><span class="o">:</span> <span class="nx">numberArray</span><span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p><em>logic.html</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;title&gt;</span>{% if title %}{{title}}{% endif %}<span class="nt">&lt;/title&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>  {% if title %}
</span><span class='line'>    <span class="nt">&lt;h1&gt;</span>{{title}}<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>  {% endif %}
</span><span class='line'>  <span class="nt">&lt;ul&gt;</span>
</span><span class='line'>    {% for num in numberArray %}
</span><span class='line'>      <span class="nt">&lt;li&gt;</span>{{ num }}<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    {% endfor %}
</span><span class='line'>  <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p><strong>Need to reverse the loop?</strong></p>

<p>Simply add a filter:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;title&gt;</span>{% if title %}{{title}}{% endif %}<span class="nt">&lt;/title&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>  {% if title %}
</span><span class='line'>    <span class="nt">&lt;h1&gt;</span>{{title}}<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>  {% endif %}
</span><span class='line'>  <span class="nt">&lt;ul&gt;</span>
</span><span class='line'>    {% for num in numberArray | reverse %}
</span><span class='line'>      <span class="nt">&lt;li&gt;</span>{{ num }}<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    {% endfor %}
</span><span class='line'>  <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p><strong>What would a basic loop and filter look like?</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;title&gt;</span>{% if title %}{{title}}{% endif %}<span class="nt">&lt;/title&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>  {% if title %}
</span><span class='line'>    <span class="nt">&lt;h1&gt;</span>{{title}}<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>  {% endif %}
</span><span class='line'>  <span class="nt">&lt;ul&gt;</span>
</span><span class='line'>    {% for num in numberArray %}
</span><span class='line'>      {% if num % 2 === 0 %}
</span><span class='line'>        <span class="nt">&lt;li&gt;</span>{{ num }}<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>      {% endif %}
</span><span class='line'>    {% endfor %}
</span><span class='line'>  <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<blockquote>
<p>You could also write a custom filter for this if you needed to do the <em>same</em> filtering logic a number of times throughout your application.</p>
</blockquote>

<p>There&#39;s also a number of <a href="http://paularmstrong.github.io/swig/docs/tags/#for">helper methods</a> available with loops:</p>

<ul>
<li><code>loop.index</code> returns the current iteration of the loop (1-indexed)</li>
<li><code>loop.index0</code> returns the current iteration of the loop (0-indexed)</li>
<li><code>loop.revindex</code> returns the number of iterations from the end of the loop (1-indexed)</li>
<li><code>loop.revindex0</code> returns the number of iterations from the end of the loop (0-indexed)</li>
<li><code>loop.key</code> returns the key of the current item, if the iterator is an object; otherwise it will operate the same as <code>loop.index</code></li>
<li><code>loop.first</code> returns true if the current object is the first in the object or array.</li>
<li><code>loop.last</code> returns true if the current object is the last in the object or array.</li>
</ul>

<p>Try some of these out:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{% for num in numberArray | reverse %}
</span><span class='line'>  {% if num % 2 === 0 %}
</span><span class='line'>    <span class="nt">&lt;li&gt;</span>{{ num }} - {{loop.index}}<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>  {% endif %}
</span><span class='line'>{% endfor %}
</span></code></pre></td></tr></table></div></figure>

<h2>Template Inheritence</h2>

<p>Logic tags can also be used to extend common code from a base template to child templates. You can use the <code>block</code> tag to accomplish this.</p>

<p>Create a new HTML file called <em>layout.html</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;title&gt;</span>{{title}}<span class="nt">&lt;/title&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>  {% block content %}{% endblock %}
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p>Did you notice the <code>{% block content %}{% endblock %}</code> tags? These are like placeholders that child templates fill in.</p>

<p>Add another new file called <em>test.html</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{% extends &quot;layout.html&quot; %}
</span><span class='line'>{% block content %}
</span><span class='line'>  <span class="nt">&lt;h3&gt;</span> This is the start of a child template<span class="nt">&lt;/h3&gt;</span>
</span><span class='line'>{% endblock %}
</span></code></pre></td></tr></table></div></figure>

<p>Finally, add a route handler to <em>app.js</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{% extends &quot;layout.html&quot; %}
</span><span class='line'>{% block content %}
</span><span class='line'>  <span class="nt">&lt;h1&gt;</span>This is the start of a child template<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>  <span class="nt">&lt;h1&gt;</span>{{title}}<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>{% endblock %}
</span></code></pre></td></tr></table></div></figure>

<p>So, the blocks -  <code>{% block content %}{% endblock %}</code> correspond to the block placeholders from the layout file, and since this file extends from the layout, the content defined here is placed in the corresponding placeholders in the layout.</p>

<h2>Conclusion</h2>

<p>Check the <a href="http://paularmstrong.github.io/swig/">documentation</a> for more info. Add your questions below. Cheers!</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Handling User Authentication with the MEAN Stack]]></title>
    <link href="http://mjhea0.github.com/blog/2015/07/02/handling-user-authentication-with-the-mean-stack/"/>
    
    <updated>2015-07-02T07:04:00-06:00</updated>
    <id>http://mjhea0.github.com/blog/2015/07/02/handling-user-authentication-with-the-mean-stack</id>
    
    <content type="html"><![CDATA[<div style="text-align:center;">
  <img src="http://mjhea0.github.com/images/mean-auth.png" style="max-width: 100%; border:0;" alt="mean stack authentication">
</div>

<p><br></p>

<p><strong>This post provides a solution to the question, &quot;How do I handle user authentication with the MEAN Stack - MongoDB, ExpressJS, AngularJS, NodeJS?&quot;.</strong></p>

<blockquote>
<p>Much of this post is ported from <a href="https://realpython.com/blog/python/handling-user-authentication-with-angular-and-flask/">Handling User Authentication with Angular and Flask</a>.</p>
</blockquote>

<p>Keep in mind that this solution posed in this tutorial is not the <em>only</em> solution to the question at hand, and it may not even be the <em>right</em> solution for your situation. Regardless of the solution you implement, it is important to note that since end users have full control of the browser as well as access to the front-end code, sensitive data living in your server-side API must be secure. In other words, make certain that you implement an authentication strategy on the server-side to protect sensitive API endpoints.</p>

<p>That said, we need to enable the following workflow:</p>

<ol>
<li>When the client accesses the main route, an index page is served, at which point Angular takes over.</li>
<li>The Angular app immediately &quot;asks&quot; the server if a user is logged in.</li>
<li>Assuming the server indicates that a user is not logged in, the client is immediately asked to log in.</li>
<li>Once logged in, the Angular app then tracks the user&#39;s login status.</li>
</ol>

<blockquote>
<p>This tutorial uses <a href="http://docs.mongodb.org/v2.6/">MongoDB</a> v2.6.7, <a href="http://expressjs.com/4x/api.html">ExpressJS</a> v4.9.8, <a href="https://code.angularjs.org/1.3.15/docs/guide">AngularJS</a> v1.3.15, <a href="https://nodejs.org/">NodeJS</a> v0.12.2, and <a href="https://github.com/jaredhanson/passport-local">Passport-Local</a> v1.0.0. For a full list of dependencies, please view the <em><a href="https://github.com/mjhea0/mean-auth/blob/master/package.json">package.json</a></em> file.</p>
</blockquote>

<h2>Getting Started</h2>

<p>First, grab the boilerplate code from the <a href="https://github.com/mjhea0/mean-auth/releases/tag/v1">project repo</a>, install the requirements, and then test out the app:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>npm start
</span></code></pre></td></tr></table></div></figure>

<p>Navigate to <a href="http://localhost:3000/">http://localhost:3000/</a> and you should see a simple welcome message - &quot;Yo!&quot;. Once you&#39;re finishing admiring the page, kill the server, and glance over the code within the project folder:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>├── client
</span><span class='line'>│   ├── index.html
</span><span class='line'>│   ├── main.js
</span><span class='line'>│   └── partials
</span><span class='line'>│       └── home.html
</span><span class='line'>├── package.json
</span><span class='line'>└── server
</span><span class='line'>    ├── app.js
</span><span class='line'>    ├── models
</span><span class='line'>    │   └── user.js
</span><span class='line'>    ├── routes
</span><span class='line'>    │   └── api.js
</span><span class='line'>    └── server.js
</span></code></pre></td></tr></table></div></figure>

<p>Nothing too spectacular. You can see that the back-end code resides in the &quot;server&quot; folder, while the front-end code lives in the &quot;client&quot; folder. Explore the files and folder within each.</p>

<h2>Login API</h2>

<p>Let&#39;s start with the back-end API. This is already built out, for your convenience. Why? The focus is mainly on the client-side. If you&#39;re looking for a back-end tutorial for setting up Passport with NodeJS, ExpressJS, and MongoDB take a look at this <a href="http://mherman.org/blog/2015/01/31/local-authentication-with-passport-and-express-4/#.VZCK9xNViko">tutorial</a>.</p>

<h3>User Registration</h3>

<p>Open the &quot;routes&quot; folder and find the following code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/register&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">User</span><span class="p">.</span><span class="nx">register</span><span class="p">(</span><span class="k">new</span> <span class="nx">User</span><span class="p">({</span> <span class="nx">username</span><span class="o">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">username</span> <span class="p">}),</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">password</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">account</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">500</span><span class="p">).</span><span class="nx">json</span><span class="p">({</span><span class="nx">err</span><span class="o">:</span> <span class="nx">err</span><span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">passport</span><span class="p">.</span><span class="nx">authenticate</span><span class="p">(</span><span class="s1">&#39;local&#39;</span><span class="p">)(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">200</span><span class="p">).</span><span class="nx">json</span><span class="p">({</span><span class="nx">status</span><span class="o">:</span> <span class="s1">&#39;Registration successful!&#39;</span><span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>Here, we grab the values from the payload sent with the POST request (from the client-side), create a new <code>User</code> instance, and then attempt to add the instance to the database. If this succeeds a user is added, of course, and then we return a JSON response with a <code>status</code> of &quot;success&quot;. If it fails, an &quot;error&quot; response is sent.</p>

<p>Let&#39;s test this via curl. Fire up the server and then run the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>curl -H <span class="s2">&quot;Accept: application/json&quot;</span> -H <span class="s2">&quot;Content-type: application/json&quot;</span> -X POST <span class="se">\</span>
</span><span class='line'>-d <span class="s1">&#39;{&quot;username&quot;: &quot;test@test.com&quot;, &quot;password&quot;: &quot;test&quot;}&#39;</span> http://localhost:3000/user/register
</span></code></pre></td></tr></table></div></figure>

<p>You should see a success message:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">{</span><span class="s2">&quot;status&quot;</span>:<span class="s2">&quot;Registration successful!&quot;</span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Try it again, with the exact same username and password, and you should see an error:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">{</span><span class="s2">&quot;err&quot;</span>:<span class="o">{</span><span class="s2">&quot;name&quot;</span>:<span class="s2">&quot;BadRequestError&quot;</span>,<span class="s2">&quot;message&quot;</span>:<span class="s2">&quot;User already exists with username test@test.com&quot;</span><span class="o">}}</span>
</span></code></pre></td></tr></table></div></figure>

<p>On to the login&#8230;</p>

<h3>User Login</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/login&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">passport</span><span class="p">.</span><span class="nx">authenticate</span><span class="p">(</span><span class="s1">&#39;local&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">user</span><span class="p">,</span> <span class="nx">info</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">500</span><span class="p">).</span><span class="nx">json</span><span class="p">({</span><span class="nx">err</span><span class="o">:</span> <span class="nx">err</span><span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">401</span><span class="p">).</span><span class="nx">json</span><span class="p">({</span><span class="nx">err</span><span class="o">:</span> <span class="nx">info</span><span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">req</span><span class="p">.</span><span class="nx">logIn</span><span class="p">(</span><span class="nx">user</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">500</span><span class="p">).</span><span class="nx">json</span><span class="p">({</span><span class="nx">err</span><span class="o">:</span> <span class="s1">&#39;Could not log in user&#39;</span><span class="p">});</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">200</span><span class="p">).</span><span class="nx">json</span><span class="p">({</span><span class="nx">status</span><span class="o">:</span> <span class="s1">&#39;Login successful!&#39;</span><span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">})(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>This utilizes Passport&#39;s <a href="https://github.com/jaredhanson/passport-local">local strategy</a> to verify the username/email as well as the password. The appropriate response is then returned.</p>

<p>With the server running, test again with curl-</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>curl -H <span class="s2">&quot;Accept: application/json&quot;</span> -H <span class="s2">&quot;Content-type: application/json&quot;</span> -X POST <span class="se">\</span>
</span><span class='line'>-d <span class="s1">&#39;{&quot;username&quot;: &quot;test@test.com&quot;, &quot;password&quot;: &quot;test&quot;}&#39;</span> http://localhost:3000/user/login
</span></code></pre></td></tr></table></div></figure>

<p>-and you should see:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">{</span><span class="s2">&quot;message&quot;</span>:<span class="s2">&quot;Login successful!&quot;</span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Test again with curl, sending the wrong password, and you should see:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">{</span><span class="s2">&quot;err&quot;</span>:<span class="o">{</span><span class="s2">&quot;status&quot;</span>:<span class="s2">&quot;Incorrect password&quot;</span><span class="o">}}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Perfect!</p>

<h3>User Logout</h3>

<p>Finally, take a look at the logout:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/logout&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">req</span><span class="p">.</span><span class="nx">logout</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">200</span><span class="p">).</span><span class="nx">json</span><span class="p">({</span><span class="nx">status</span><span class="o">:</span> <span class="s1">&#39;Bye!&#39;</span><span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>This should be straightforward, and you can probably guess what the response will look like - but let&#39;s test it  again:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">curl</span> <span class="o">-</span><span class="nx">H</span> <span class="s2">&quot;Accept: application/json&quot;</span> <span class="o">-</span><span class="nx">H</span> <span class="s2">&quot;Content-type: application/json&quot;</span> <span class="o">-</span><span class="nx">X</span> <span class="nx">GET</span> <span class="o">\</span>
</span><span class='line'><span class="nx">http</span><span class="o">:</span><span class="c1">//localhost:3000/user/logout</span>
</span></code></pre></td></tr></table></div></figure>

<p>You should see:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">{</span><span class="s2">&quot;status&quot;</span>:<span class="s2">&quot;Bye!&quot;</span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>On to the client-side!</p>

<h2>Angular App</h2>

<p>Before diving in, remember that since end users have full access to the power of the browser as well as <a href="https://developer.chrome.com/devtools">DevTools</a> and the client-side code, it&#39;s vital that you not only restrict access to sensitive endpoints on the server-side - but that you also do not store sensitive data on the client-side. Keep this in mind as you add auth functionality to your own MEAN application stack.</p>

<h3>Client-side Routing</h3>

<p>Let&#39;s add the remainder of the client-side routes to the <em>main.js</em> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">myApp</span><span class="p">.</span><span class="nx">config</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">$routeProvider</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$routeProvider</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">templateUrl</span><span class="o">:</span> <span class="s1">&#39;partials/home.html&#39;</span><span class="p">})</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="s1">&#39;/login&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">templateUrl</span><span class="o">:</span> <span class="s1">&#39;partials/login.html&#39;</span><span class="p">,</span> <span class="nx">controller</span><span class="o">:</span> <span class="s1">&#39;loginController&#39;</span><span class="p">})</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="s1">&#39;/logout&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">controller</span><span class="o">:</span> <span class="s1">&#39;logoutController&#39;</span><span class="p">})</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="s1">&#39;/register&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">templateUrl</span><span class="o">:</span> <span class="s1">&#39;partials/register.html&#39;</span><span class="p">,</span> <span class="nx">controller</span><span class="o">:</span> <span class="s1">&#39;registerController&#39;</span><span class="p">})</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="s1">&#39;/one&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">template</span><span class="o">:</span> <span class="s1">&#39;&lt;h1&gt;This is page one!&lt;/h1&gt;&#39;</span><span class="p">})</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="s1">&#39;/two&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">template</span><span class="o">:</span> <span class="s1">&#39;&lt;h1&gt;This is page two!&lt;/h1&gt;&#39;</span><span class="p">})</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">otherwise</span><span class="p">({</span><span class="nx">redirectTo</span><span class="o">:</span> <span class="s1">&#39;/&#39;</span><span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>Here, we created five new routes. Before we add the subsequent templates and controllers, let&#39;s create a <a href="https://docs.angularjs.org/guide/services">service</a> to handle authentication.</p>

<h3>Authentication Service</h3>

<p>Start by adding the basic structure of the service to a new file called <em>services.js</em> in the &quot;client&quot; directory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;myApp&#39;</span><span class="p">).</span><span class="nx">factory</span><span class="p">(</span><span class="s1">&#39;AuthService&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="p">[</span><span class="s1">&#39;$q&#39;</span><span class="p">,</span> <span class="s1">&#39;$timeout&#39;</span><span class="p">,</span> <span class="s1">&#39;$http&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="kd">function</span> <span class="p">(</span><span class="nx">$q</span><span class="p">,</span> <span class="nx">$timeout</span><span class="p">,</span> <span class="nx">$http</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// create user variable</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">user</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// return available functions for use in controllers</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">({</span>
</span><span class='line'>      <span class="nx">isLoggedIn</span><span class="o">:</span> <span class="nx">isLoggedIn</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">getUserStatus</span><span class="o">:</span> <span class="nx">getUserStatus</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">login</span><span class="o">:</span> <span class="nx">login</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">logout</span><span class="o">:</span> <span class="nx">logout</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">register</span><span class="o">:</span> <span class="nx">register</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}]);</span>
</span></code></pre></td></tr></table></div></figure>

<p>Here, we simply defined the service name, <code>AuthService</code>, and then injected the dependencies that we will be using - <code>$q</code>, <code>$timeout</code>, <code>$http</code> - and then returned the functions, which we still need to write, for use outside the service.</p>

<p>Make sure to add the script to the <em>index.html</em> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;./services.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p>Let&#39;s create each function&#8230;</p>

<p><strong><code>isLoggedIn()</code></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">isLoggedIn</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>This function returns <code>true</code> if <code>user</code> evaluates to <code>true</code> - a user is logged in - otherwise it returns false.</p>

<p><strong><code>getUserStatus()</code></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">getUserStatus</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">user</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p><strong><code>login()</code></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">login</span><span class="p">(</span><span class="nx">username</span><span class="p">,</span> <span class="nx">password</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// create a new instance of deferred</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">deferred</span> <span class="o">=</span> <span class="nx">$q</span><span class="p">.</span><span class="nx">defer</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// send a post request to the server</span>
</span><span class='line'>  <span class="nx">$http</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/user/login&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">username</span><span class="o">:</span> <span class="nx">username</span><span class="p">,</span> <span class="nx">password</span><span class="o">:</span> <span class="nx">password</span><span class="p">})</span>
</span><span class='line'>    <span class="c1">// handle success</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">success</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">status</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nx">status</span> <span class="o">===</span> <span class="mi">200</span> <span class="o">&amp;&amp;</span> <span class="nx">data</span><span class="p">.</span><span class="nx">status</span><span class="p">){</span>
</span><span class='line'>        <span class="nx">user</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">deferred</span><span class="p">.</span><span class="nx">resolve</span><span class="p">();</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">user</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">deferred</span><span class="p">.</span><span class="nx">reject</span><span class="p">();</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>    <span class="c1">// handle error</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">user</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">deferred</span><span class="p">.</span><span class="nx">reject</span><span class="p">();</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// return promise object</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">deferred</span><span class="p">.</span><span class="nx">promise</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Here, we used the <a href="https://docs.angularjs.org/1.3.15/docs/api/ng/service/$q">$q</a> service to set up a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">promise</a>, which we&#39;ll access in a future controller. We also utilized the <a href="https://docs.angularjs.org/1.3.15/docs/api/ng/service/$http">$http</a> service to send an AJAX request to the <code>/api/login</code> endpoint that we already set up in our back-end Node/Express app.</p>

<p>Based on the returned response, we either <a href="https://code.angularjs.org/1.3.15/docs/api/ng/service/$q#usage">resolve</a> or <a href="https://code.angularjs.org/1.3.15/docs/api/ng/service/$q#usage">reject</a> and set the value of <code>user</code> to <code>true</code> or <code>false</code>.</p>

<p><strong><code>logout()</code></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">logout</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// create a new instance of deferred</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">deferred</span> <span class="o">=</span> <span class="nx">$q</span><span class="p">.</span><span class="nx">defer</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// send a get request to the server</span>
</span><span class='line'>  <span class="nx">$http</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/user/logout&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="c1">// handle success</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">success</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">user</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">deferred</span><span class="p">.</span><span class="nx">resolve</span><span class="p">();</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>    <span class="c1">// handle error</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">user</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">deferred</span><span class="p">.</span><span class="nx">reject</span><span class="p">();</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// return promise object</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">deferred</span><span class="p">.</span><span class="nx">promise</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Here, we followed the same formula as the <code>login()</code> function, except we sent a GET request rather than a POST and to be safe we just went ahead and handled the error the same as the success.</p>

<p><strong><code>register()</code></strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">register</span><span class="p">(</span><span class="nx">username</span><span class="p">,</span> <span class="nx">password</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// create a new instance of deferred</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">deferred</span> <span class="o">=</span> <span class="nx">$q</span><span class="p">.</span><span class="nx">defer</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// send a post request to the server</span>
</span><span class='line'>  <span class="nx">$http</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/user/register&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">username</span><span class="o">:</span> <span class="nx">username</span><span class="p">,</span> <span class="nx">password</span><span class="o">:</span> <span class="nx">password</span><span class="p">})</span>
</span><span class='line'>    <span class="c1">// handle success</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">success</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">status</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nx">status</span> <span class="o">===</span> <span class="mi">200</span> <span class="o">&amp;&amp;</span> <span class="nx">data</span><span class="p">.</span><span class="nx">status</span><span class="p">){</span>
</span><span class='line'>        <span class="nx">deferred</span><span class="p">.</span><span class="nx">resolve</span><span class="p">();</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">deferred</span><span class="p">.</span><span class="nx">reject</span><span class="p">();</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>    <span class="c1">// handle error</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">deferred</span><span class="p">.</span><span class="nx">reject</span><span class="p">();</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// return promise object</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">deferred</span><span class="p">.</span><span class="nx">promise</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Again, we followed a similar formula to the <code>logout()</code> function. Can you tell what&#39;s happening?</p>

<p>That&#39;s it for the service. Keep in mind that we still have not &quot;used&quot; this service. In order to do that we just need to inject it into the necessary components in the Angular app. In our case, that will be the controllers, which we&#39;ll build next.</p>

<h3>Templates and Controllers</h3>

<p>Looking back at our routes, we need to setup two partials/templates and three controllers:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="s1">&#39;/login&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">templateUrl</span><span class="o">:</span> <span class="s1">&#39;partials/login.html&#39;</span><span class="p">,</span> <span class="nx">controller</span><span class="o">:</span> <span class="s1">&#39;loginController&#39;</span><span class="p">})</span>
</span><span class='line'><span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="s1">&#39;/logout&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">controller</span><span class="o">:</span> <span class="s1">&#39;logoutController&#39;</span><span class="p">})</span>
</span><span class='line'><span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="s1">&#39;/register&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">templateUrl</span><span class="o">:</span> <span class="s1">&#39;partials/register.html&#39;</span><span class="p">,</span> <span class="nx">controller</span><span class="o">:</span> <span class="s1">&#39;registerController&#39;</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>

<p><strong>Login</strong></p>

<p>First, add the following HTML to a new file called <em>login.html</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;col-md-4&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;h1&gt;</span>Login<span class="nt">&lt;/h2&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">ng-show=</span><span class="s">&quot;error&quot;</span> <span class="na">class=</span><span class="s">&quot;alert alert-danger&quot;</span><span class="nt">&gt;</span><span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;form</span> <span class="na">class=</span><span class="s">&quot;form&quot;</span> <span class="na">ng-submit=</span><span class="s">&quot;login()&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;form-group&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;label&gt;</span>Username<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>      <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">class=</span><span class="s">&quot;form-control&quot;</span> <span class="na">name=</span><span class="s">&quot;username&quot;</span> <span class="na">ng-model=</span><span class="s">&quot;loginForm.username&quot;</span> <span class="na">required</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;form-group&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;label&gt;</span>Password<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;password&quot;</span> <span class="na">class=</span><span class="s">&quot;form-control&quot;</span> <span class="na">name=</span><span class="s">&quot;password&quot;</span> <span class="na">ng-model=</span><span class="s">&quot;loginForm.password&quot;</span> <span class="na">required</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">class=</span><span class="s">&quot;btn btn-default&quot;</span> <span class="na">ng-disabled=</span><span class="s">&quot;disabled&quot;</span><span class="nt">&gt;</span>Login<span class="nt">&lt;/button&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/form&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p>Add this file to the &quot;partials&quot; directory.</p>

<p>Take note of the form. We used the <a href="https://code.angularjs.org/1.3.15/docs/api/ng/directive/ngModel">ng-model</a> directive on each of the inputs so that we can capture those values in the controller. Also, when the form is submitted, the <a href="https://code.angularjs.org/1.3.15/docs/api/ng/directive/ngSubmit">ng-submit</a> directive handles the event by firing the <code>login()</code> function.</p>

<p>Next, within the &quot;client&quot; folder, add a new file called <em>controllers.js</em>. Yes, this will hold all of our Angular app&#39;s controllers. Don&#39;t forget to add the script to the <em>index.html</em> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;./controllers.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p>Now, let&#39;s add the first controller:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;myApp&#39;</span><span class="p">).</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;loginController&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="p">[</span><span class="s1">&#39;$scope&#39;</span><span class="p">,</span> <span class="s1">&#39;$location&#39;</span><span class="p">,</span> <span class="s1">&#39;AuthService&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="kd">function</span> <span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">$location</span><span class="p">,</span> <span class="nx">AuthService</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">AuthService</span><span class="p">.</span><span class="nx">getUserStatus</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">login</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// initial values</span>
</span><span class='line'>      <span class="nx">$scope</span><span class="p">.</span><span class="nx">error</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">$scope</span><span class="p">.</span><span class="nx">disabled</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// call login from service</span>
</span><span class='line'>      <span class="nx">AuthService</span><span class="p">.</span><span class="nx">login</span><span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">loginForm</span><span class="p">.</span><span class="nx">username</span><span class="p">,</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">loginForm</span><span class="p">.</span><span class="nx">password</span><span class="p">)</span>
</span><span class='line'>        <span class="c1">// handle success</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">$location</span><span class="p">.</span><span class="nx">path</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">$scope</span><span class="p">.</span><span class="nx">disabled</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>          <span class="nx">$scope</span><span class="p">.</span><span class="nx">loginForm</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>        <span class="p">})</span>
</span><span class='line'>        <span class="c1">// handle error</span>
</span><span class='line'>        <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">$scope</span><span class="p">.</span><span class="nx">error</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>          <span class="nx">$scope</span><span class="p">.</span><span class="nx">errorMessage</span> <span class="o">=</span> <span class="s2">&quot;Invalid username and/or password&quot;</span><span class="p">;</span>
</span><span class='line'>          <span class="nx">$scope</span><span class="p">.</span><span class="nx">disabled</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>          <span class="nx">$scope</span><span class="p">.</span><span class="nx">loginForm</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="p">}]);</span>
</span></code></pre></td></tr></table></div></figure>

<p>So, when the <code>login()</code> function is fired, we set some initial values and then call <code>login()</code> from the <code>AuthService</code>, passing the user inputed email and password as arguments. The subsequent success or error is then handled and the DOM/view/template is updated appropriately.</p>

<p>Did you notice how we logged the return value of <code>AuthService.getUserStatus()</code> to the console? This is to ensure that the value is correct based on whether a user is logged in or out - <code>true</code> or <code>false</code>, respectively.</p>

<p>Ready to test the first round-trip - client =&gt; server =&gt; client?</p>

<p>Fire up the server and navigate to <a href="http://localhost:3000/#/login">http://localhost:3000/#/login</a> in your browser. First, try logging in with the user credentials used to register earlier - e.g, <code>test@test.com</code> and <code>test</code>, respectively. If all went well, you should be redirected to the main URL. Next, try to log in using invalid credentials. You should see the error message flash, &quot;Invalid username and/or password&quot;.</p>

<p><strong>Logout</strong></p>

<p>Add the controller:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;myApp&#39;</span><span class="p">).</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;logoutController&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="p">[</span><span class="s1">&#39;$scope&#39;</span><span class="p">,</span> <span class="s1">&#39;$location&#39;</span><span class="p">,</span> <span class="s1">&#39;AuthService&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="kd">function</span> <span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">$location</span><span class="p">,</span> <span class="nx">AuthService</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">logout</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">AuthService</span><span class="p">.</span><span class="nx">getUserStatus</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// call logout from service</span>
</span><span class='line'>      <span class="nx">AuthService</span><span class="p">.</span><span class="nx">logout</span><span class="p">()</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">$location</span><span class="p">.</span><span class="nx">path</span><span class="p">(</span><span class="s1">&#39;/login&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="p">}]);</span>
</span></code></pre></td></tr></table></div></figure>

<p>Here, we called <code>AuthService.logout()</code> and then redirected the user to the <code>/login</code> route after the promise is resolved.</p>

<p>Add a button to <em>home.html</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">ng-controller=</span><span class="s">&quot;logoutController&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;a</span> <span class="na">ng-click=</span><span class="s">&#39;logout()&#39;</span> <span class="na">class=</span><span class="s">&quot;btn btn-default&quot;</span><span class="nt">&gt;</span>Logout<span class="nt">&lt;/a&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p>And then test it out again.</p>

<p><strong>Register</strong></p>

<p>Add a new new file called <em>register.html</em> to the &quot;partials&quot; folder and add the following HTML:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;col-md-4&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;h1&gt;</span>Register<span class="nt">&lt;/h2&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">ng-show=</span><span class="s">&quot;error&quot;</span> <span class="na">class=</span><span class="s">&quot;alert alert-danger&quot;</span><span class="nt">&gt;</span><span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;form</span> <span class="na">class=</span><span class="s">&quot;form&quot;</span> <span class="na">ng-submit=</span><span class="s">&quot;register()&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;form-group&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;label&gt;</span>Username<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>      <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">class=</span><span class="s">&quot;form-control&quot;</span> <span class="na">name=</span><span class="s">&quot;username&quot;</span> <span class="na">ng-model=</span><span class="s">&quot;registerForm.username&quot;</span> <span class="na">required</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;form-group&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;label&gt;</span>Password<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;password&quot;</span> <span class="na">class=</span><span class="s">&quot;form-control&quot;</span> <span class="na">name=</span><span class="s">&quot;password&quot;</span> <span class="na">ng-model=</span><span class="s">&quot;registerForm.password&quot;</span> <span class="na">required</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">class=</span><span class="s">&quot;btn btn-default&quot;</span> <span class="na">ng-disabled=</span><span class="s">&quot;disabled&quot;</span><span class="nt">&gt;</span>Register<span class="nt">&lt;/button&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/form&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p>Next, add the controller:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;myApp&#39;</span><span class="p">).</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;registerController&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="p">[</span><span class="s1">&#39;$scope&#39;</span><span class="p">,</span> <span class="s1">&#39;$location&#39;</span><span class="p">,</span> <span class="s1">&#39;AuthService&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="kd">function</span> <span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">$location</span><span class="p">,</span> <span class="nx">AuthService</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">AuthService</span><span class="p">.</span><span class="nx">getUserStatus</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">register</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// initial values</span>
</span><span class='line'>      <span class="nx">$scope</span><span class="p">.</span><span class="nx">error</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">$scope</span><span class="p">.</span><span class="nx">disabled</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// call register from service</span>
</span><span class='line'>      <span class="nx">AuthService</span><span class="p">.</span><span class="nx">register</span><span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">registerForm</span><span class="p">.</span><span class="nx">username</span><span class="p">,</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">registerForm</span><span class="p">.</span><span class="nx">password</span><span class="p">)</span>
</span><span class='line'>        <span class="c1">// handle success</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">$location</span><span class="p">.</span><span class="nx">path</span><span class="p">(</span><span class="s1">&#39;/login&#39;</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">$scope</span><span class="p">.</span><span class="nx">disabled</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>          <span class="nx">$scope</span><span class="p">.</span><span class="nx">registerForm</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>        <span class="p">})</span>
</span><span class='line'>        <span class="c1">// handle error</span>
</span><span class='line'>        <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">$scope</span><span class="p">.</span><span class="nx">error</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>          <span class="nx">$scope</span><span class="p">.</span><span class="nx">errorMessage</span> <span class="o">=</span> <span class="s2">&quot;Something went wrong!&quot;</span><span class="p">;</span>
</span><span class='line'>          <span class="nx">$scope</span><span class="p">.</span><span class="nx">disabled</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>          <span class="nx">$scope</span><span class="p">.</span><span class="nx">registerForm</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="p">}]);</span>
</span></code></pre></td></tr></table></div></figure>

<p>You&#39;ve seen this before, so let&#39;s move right on to testing.</p>

<p>Fire up the server and register a new user at <a href="http://localhost:3000/#/register">http://localhost:3000/#/register</a>. Make sure to test logging in with that new user as well.</p>

<p>Well, that&#39;s it for the templates and controllers. We now need to add in functionality to check if a user is logged in on each and every change of route.</p>

<h3>Route Changes</h3>

<p>Start by adding the following code to <em>main.js</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">myApp</span><span class="p">.</span><span class="nx">run</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">$rootScope</span><span class="p">,</span> <span class="nx">$location</span><span class="p">,</span> <span class="nx">$route</span><span class="p">,</span> <span class="nx">AuthService</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$rootScope</span><span class="p">.</span><span class="nx">$on</span><span class="p">(</span><span class="s1">&#39;$routeChangeStart&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">next</span><span class="p">,</span> <span class="nx">current</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">AuthService</span><span class="p">.</span><span class="nx">isLoggedIn</span><span class="p">()</span> <span class="o">===</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$location</span><span class="p">.</span><span class="nx">path</span><span class="p">(</span><span class="s1">&#39;/login&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>The <a href="https://code.angularjs.org/1.3.15/docs/api/ngRoute/service/$route">$routeChangeStart</a> event happens before the actual route change occurs. So, whenever a route is accessed, before the view is served, we ensure that the user is logged in. Test this out!</p>

<h2>Route Restriction</h2>

<p>Right now all client-side routes require a user to be logged in. What if you want certain routes restricted and other routes open?</p>

<p>You can add the following code to each route handler, replacing <code>true</code> with <code>false</code> for routes that you do not want to restrict:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">access</span><span class="o">:</span> <span class="p">{</span><span class="nx">restricted</span><span class="o">:</span> <span class="kc">true</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">myApp</span><span class="p">.</span><span class="nx">config</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">$routeProvider</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$routeProvider</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">templateUrl</span><span class="o">:</span> <span class="s1">&#39;partials/home.html&#39;</span><span class="p">})</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="s1">&#39;/login&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">templateUrl</span><span class="o">:</span> <span class="s1">&#39;partials/login.html&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">controller</span><span class="o">:</span> <span class="s1">&#39;loginController&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">access</span><span class="o">:</span> <span class="p">{</span><span class="nx">restricted</span><span class="o">:</span> <span class="kc">false</span><span class="p">}</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="s1">&#39;/logout&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">controller</span><span class="o">:</span> <span class="s1">&#39;logoutController&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">access</span><span class="o">:</span> <span class="p">{</span><span class="nx">restricted</span><span class="o">:</span> <span class="kc">true</span><span class="p">}</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="s1">&#39;/register&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">templateUrl</span><span class="o">:</span> <span class="s1">&#39;partials/register.html&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">controller</span><span class="o">:</span> <span class="s1">&#39;registerController&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">access</span><span class="o">:</span> <span class="p">{</span><span class="nx">restricted</span><span class="o">:</span> <span class="kc">true</span><span class="p">}</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="s1">&#39;/one&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">template</span><span class="o">:</span> <span class="s1">&#39;&lt;h1&gt;This is page one!&lt;/h1&gt;&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">access</span><span class="o">:</span> <span class="p">{</span><span class="nx">restricted</span><span class="o">:</span> <span class="kc">true</span><span class="p">}</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="s1">&#39;/two&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">template</span><span class="o">:</span> <span class="s1">&#39;&lt;h1&gt;This is page two!&lt;/h1&gt;&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">access</span><span class="o">:</span> <span class="p">{</span><span class="nx">restricted</span><span class="o">:</span> <span class="kc">false</span><span class="p">}</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">otherwise</span><span class="p">({</span><span class="nx">redirectTo</span><span class="o">:</span> <span class="s1">&#39;/&#39;</span><span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>Now just update the <code>$routeChangeStart</code> code in <em>main.js</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">myApp</span><span class="p">.</span><span class="nx">run</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">$rootScope</span><span class="p">,</span> <span class="nx">$location</span><span class="p">,</span> <span class="nx">$route</span><span class="p">,</span> <span class="nx">AuthService</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$rootScope</span><span class="p">.</span><span class="nx">$on</span><span class="p">(</span><span class="s1">&#39;$routeChangeStart&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">next</span><span class="p">,</span> <span class="nx">current</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">next</span><span class="p">.</span><span class="nx">access</span><span class="p">.</span><span class="nx">restricted</span> <span class="o">&amp;&amp;</span> <span class="nx">AuthService</span><span class="p">.</span><span class="nx">isLoggedIn</span><span class="p">()</span> <span class="o">===</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$location</span><span class="p">.</span><span class="nx">path</span><span class="p">(</span><span class="s1">&#39;/login&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">$route</span><span class="p">.</span><span class="nx">reload</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>Test it out!</p>

<h2>Conclusion</h2>

<p>That&#39;s it. One thing you should note is that the Angular app can be used with various frameworks as long as the endpoints are set up correctly in the AJAX requests. So, you can easily take the Angular portion and add it to your Django or Pyramid or NodeJS app. Try it!</p>

<blockquote>
<p>Check out a Python/Flask app with Angular Auth <a href="https://realpython.com/blog/python/handling-user-authentication-with-angular-and-flask/">here</a></p>
</blockquote>

<p>Grab the final code from the <a href="https://github.com/mjhea0/mean-auth">repo</a>. Cheers!</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Testing AngularJS with Protractor and Karma - part 2]]></title>
    <link href="http://mjhea0.github.com/blog/2015/04/26/testing-angularjs-with-protractor-and-karma-part-2/"/>
    
    <updated>2015-04-26T08:06:00-06:00</updated>
    <id>http://mjhea0.github.com/blog/2015/04/26/testing-angularjs-with-protractor-and-karma-part-2</id>
    
    <content type="html"><![CDATA[<p><strong>This article details how to test a simple AngularJS application using unit tests and end-to-end (E2E) tests.</strong></p>

<div style="text-align:center;">
  <img src="https://raw.githubusercontent.com/mjhea0/angular-testing-tutorial/master/img/angular-protractor.png" style="max-width: 100%; border:0;" alt="angular + protractor">
</div>

<p><br></p>

<ul>
<li><a href="http://mherman.org/blog/2015/04/09/testing-angularjs-with-protractor-and-karma-part-1">Part 1</a> - In the first part we&#39;ll look at unit tests, which ensure that small, isolated pieces of code (e.g., a unit) behave as expected.</li>
<li>Part 2 - In part two we&#39;ll address E2E tests, which verify that all the pieces of code (units) fit together by simulating the user experience through browser automation. <strong>(current)</strong></li>
</ul>

<p>Having finished up unit testing, let&#39;s now turn our attention to e2e testing using <a href="http://angular.github.io/protractor/#/">Protractor</a>, which is a testing framework built specifically for AngularJS apps. Essentially, it runs tests against an app in the browser via <a href="http://seleniumhq.github.io/selenium/docs/api/javascript/">Selenium Webdriver</a>, interacting with the app from an end user’s perspective.</p>

<div style="text-align:center;">
  <img src="https://raw.githubusercontent.com/mjhea0/angular-testing-tutorial/master/img/components.png" style="max-width: 100%; border:0;" alt="protractor components">
</div>

<p><br></p>

<p>Since e2e tests are much more expensive than unit tests - e.g., they generally take more time to run and are harder to write and maintain - you should almost always focus the majority of your testing efforts on unit tests. It&#39;s good to follow the 80/20 rule - 80% of your tests are unit tests, while 20% are e2e tests. That said, this tutorial series breaks this rule since the goal is to educate. Keep this in mind as you write your own tests against your own application.</p>

<p>Also, make sure you test the most important aspects/functions of your application with your e2e tests. Don&#39;t waste time on the trivial. Again, they are expensive, so make each one count.</p>

<p>The <a href="https://github.com/mjhea0/angular-testing-tutorial">repo</a> includes the following tags:</p>

<ol>
<li><em>v1</em> - <a href="https://github.com/mjhea0/angular-testing-tutorial/releases/tag/v1">project boilerplate</a></li>
<li><em>v2</em> - <a href="https://github.com/mjhea0/angular-testing-tutorial/releases/tag/v2">adds testing boilerplate/configuration</a></li>
<li><em>v3</em> - <a href="https://github.com/mjhea0/angular-testing-tutorial/releases/tag/v3">adds unit tests</a></li>
<li><em>v4</em> - <a href="https://github.com/mjhea0/angular-testing-tutorial/releases/tag/v4">adds E2E tests</a></li>
</ol>

<h2>Project Setup</h2>

<p>Assuming you followed the <a href="http://mherman.org/blog/2015/04/09/testing-angularjs-with-protractor-and-karma-part-1">first part</a> of this tutorial, checkout the third tag, <code>v3</code>, and then run the current test suite starting with the unit tests:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git checkout tags/v3
</span><span class='line'><span class="nv">$ </span>gulp unit
</span><span class='line'>
</span><span class='line'><span class="o">[</span>23:30:01<span class="o">]</span> Using gulpfile ~/angular-testing-tutorial/Gulpfile.js
</span><span class='line'><span class="o">[</span>23:30:01<span class="o">]</span> Starting <span class="s1">&#39;unit&#39;</span>...
</span><span class='line'>INFO <span class="o">[</span>karma<span class="o">]</span>: Karma v0.12.31 server started at http://localhost:9876/
</span><span class='line'>INFO <span class="o">[</span>launcher<span class="o">]</span>: Starting browser Chrome
</span><span class='line'>INFO <span class="o">[</span>Chrome 42.0.2311 <span class="o">(</span>Mac OS X 10.10.2<span class="o">)]</span>: Connected on socket i04LmGbgt7P1lNIUTgIJ with id 48442826
</span><span class='line'>Chrome 42.0.2311 <span class="o">(</span>Mac OS X 10.10.2<span class="o">)</span>: Executed 12 of 12 SUCCESS <span class="o">(</span>0.236 secs / 0.051 secs<span class="o">)</span>
</span><span class='line'><span class="o">[</span>23:30:06<span class="o">]</span> Finished <span class="s1">&#39;unit&#39;</span> after 4.43 s
</span></code></pre></td></tr></table></div></figure>

<p>For the e2e tests, you&#39;ll need to open two new terminal windows. In the first new window, run <code>webdriver-manager start</code>. In the second, navigate to your project directory and then run the app - <code>gulp</code>.</p>

<p>Finally, back in the original window, run the tests:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>gulp e2e
</span><span class='line'>
</span><span class='line'><span class="o">[</span>23:31:11<span class="o">]</span> Using gulpfile ~/angular-testing-tutorial/Gulpfile.js
</span><span class='line'><span class="o">[</span>23:31:11<span class="o">]</span> Starting <span class="s1">&#39;e2e&#39;</span>...
</span><span class='line'>Using the selenium server at http://localhost:4444/wd/hub
</span><span class='line'><span class="o">[</span>launcher<span class="o">]</span> Running 1 instances of WebDriver
</span><span class='line'>.
</span><span class='line'>
</span><span class='line'>Finished in 1.174 seconds
</span><span class='line'>1 <span class="nb">test</span>, 1 assertion, 0 failures
</span><span class='line'>
</span><span class='line'><span class="o">[</span>launcher<span class="o">]</span> 0 instance<span class="o">(</span>s<span class="o">)</span> of WebDriver still running
</span><span class='line'><span class="o">[</span>launcher<span class="o">]</span> chrome <span class="c">#1 passed</span>
</span></code></pre></td></tr></table></div></figure>

<p>Everything look good?</p>

<h2>The Tests</h2>

<p>Open the test spec, <em>spec.js</em>, within the &quot;tests/e2e&quot; directory. Let&#39;s look at the first test:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;myController&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;the dom initially has a greeting&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">browser</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;http://localhost:8888/#/one&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">expect</span><span class="p">(</span><span class="nx">element</span><span class="p">(</span><span class="nx">by</span><span class="p">.</span><span class="nx">id</span><span class="p">(</span><span class="s1">&#39;greeting&#39;</span><span class="p">)).</span><span class="nx">getText</span><span class="p">()).</span><span class="nx">toEqual</span><span class="p">(</span><span class="s1">&#39;Hello, World!&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>Notice how we&#39;re still using <a href="http://mochajs.org/">Mocha</a> and <a href="http://chaijs.com/">Chai</a> to <a href="http://angular.github.io/protractor/#/frameworks">manage/structure</a> the test so that it simply opens <code>http://localhost:8888/#/one</code> and then asserts that the text within the HTML element with an ID of <code>greeting</code> is  <code>Hello, World!</code>. Simple, right?</p>

<p>Let&#39;s take a quick look at the Angular services that we&#39;re using:</p>

<ol>
<li><a href="http://angular.github.io/protractor/#/api?view=Protractor">browser</a> - loads the page in the browser</li>
<li><a href="http://angular.github.io/protractor/#/api?view=ElementFinder">element</a> - interacts with the page</li>
<li><a href="http://angular.github.io/protractor/#/api?view=ProtractorBy">by</a> - finds elements within the page</li>
</ol>

<p>Finally, one important thing to note is how these tests run. Notice that there&#39;s no callbacks and/or promises in the test. How does that work with asynchronous code? Simple: Protractor continues to check each assertion until it passes or a certain amount of <a href="https://github.com/angular/protractor/blob/master/docs/timeouts.md">time</a> passes. There also is a <a href="http://angular.github.io/protractor/#/api?view=then">promise</a> attached to most methods that can be access using <code>then</code>.</p>

<p>With that, let&#39;s write some tests on our own.</p>

<h3>TestOneController</h3>

<p>Just like in the first part, open the controller code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">myApp</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;TestOneController&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">greeting</span> <span class="o">=</span> <span class="s2">&quot;Hello, World!&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">newText</span> <span class="o">=</span> <span class="kc">undefined</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">changeGreeting</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">newText</span> <span class="o">!==</span> <span class="kc">undefined</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$scope</span><span class="p">.</span><span class="nx">greeting</span> <span class="o">=</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">newText</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>How about the HTML?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;h2&gt;</span>Say something<span class="nt">&lt;/h2&gt;</span>
</span><span class='line'><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">ng-model=</span><span class="s">&quot;newText&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;button</span> <span class="na">class=</span><span class="s">&quot;btn btn-default&quot;</span> <span class="na">ng-click=</span><span class="s">&quot;changeGreeting()&quot;</span><span class="nt">&gt;</span>Change!<span class="nt">&lt;/button&gt;</span>
</span><span class='line'><span class="nt">&lt;p</span> <span class="na">id=</span><span class="s">&quot;greeting&quot;</span><span class="nt">&gt;</span><span class="nt">&lt;/p&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p>Looking at the Angular code along with the HTML, we know that on the button click, <code>greeting</code> is updated with the user supplied text from the input box. Sound right? Test this out: With the app running via Gulp, navigate to <a href="http://localhost:8888/#/one">http://localhost:8888/#/one</a> and manually test the app to ensure that the controller is working as it should.</p>

<p>Now since we already tested the initial state of <code>greeting</code>, let&#39;s write the test to ensure that the state updates on the button click:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;TestOneController&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">beforeEach</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">browser</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;http://localhost:8888/#/one&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;initially has a greeting&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">expect</span><span class="p">(</span><span class="nx">element</span><span class="p">(</span><span class="nx">by</span><span class="p">.</span><span class="nx">id</span><span class="p">(</span><span class="s1">&#39;greeting&#39;</span><span class="p">)).</span><span class="nx">getText</span><span class="p">()).</span><span class="nx">toEqual</span><span class="p">(</span><span class="s1">&#39;Hello, World!&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;clicking the button changes the greeting if text is inputed&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">element</span><span class="p">(</span><span class="nx">by</span><span class="p">.</span><span class="nx">css</span><span class="p">(</span><span class="s1">&#39;[ng-model=&quot;newText&quot;]&#39;</span><span class="p">)).</span><span class="nx">sendKeys</span><span class="p">(</span><span class="s1">&#39;Hi!&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">element</span><span class="p">(</span><span class="nx">by</span><span class="p">.</span><span class="nx">css</span><span class="p">(</span><span class="s1">&#39;.btn-default&#39;</span><span class="p">)).</span><span class="nx">click</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">expect</span><span class="p">(</span><span class="nx">element</span><span class="p">(</span><span class="nx">by</span><span class="p">.</span><span class="nx">id</span><span class="p">(</span><span class="s1">&#39;greeting&#39;</span><span class="p">)).</span><span class="nx">getText</span><span class="p">()).</span><span class="nx">toEqual</span><span class="p">(</span><span class="s1">&#39;Hi!&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;clicking the button does not change the greeting if text is not inputed&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">element</span><span class="p">(</span><span class="nx">by</span><span class="p">.</span><span class="nx">css</span><span class="p">(</span><span class="s1">&#39;.btn-default&#39;</span><span class="p">)).</span><span class="nx">click</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">expect</span><span class="p">(</span><span class="nx">element</span><span class="p">(</span><span class="nx">by</span><span class="p">.</span><span class="nx">id</span><span class="p">(</span><span class="s1">&#39;greeting&#39;</span><span class="p">)).</span><span class="nx">getText</span><span class="p">()).</span><span class="nx">toEqual</span><span class="p">(</span><span class="s1">&#39;Hello, World!&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>So, in both new test cases we&#39;re targeting the input form - via the global <a href="http://angular.github.io/protractor/#/locators">element</a> function - and adding text to it with the <code>sendKeys()</code> method - <code>Hi!</code> in the first test and no text in the second. Then after clicking the button, we&#39;re asserting that the text contained within the HTML element with an id of &quot;greeting&quot; is as expected.</p>

<p>Run the tests. If all went well, you should see:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">[</span>06:15:45<span class="o">]</span> Using gulpfile ~/angular-testing-tutorial/Gulpfile.js
</span><span class='line'><span class="o">[</span>06:15:45<span class="o">]</span> Starting <span class="s1">&#39;e2e&#39;</span>...
</span><span class='line'>Using the selenium server at http://localhost:4444/wd/hub
</span><span class='line'><span class="o">[</span>launcher<span class="o">]</span> Running 1 instances of WebDriver
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'>Finished in 3.606 seconds
</span><span class='line'>3 tests, 3 assertions, 0 failures
</span><span class='line'>
</span><span class='line'><span class="o">[</span>launcher<span class="o">]</span> 0 instance<span class="o">(</span>s<span class="o">)</span> of WebDriver still running
</span><span class='line'><span class="o">[</span>launcher<span class="o">]</span> chrome <span class="c">#1 passed</span>
</span><span class='line'>Michaels-MacBook-Pro-3:angular-testing-tutorial michael<span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>

<p>Did you see Chrome open in a new window and run the tests, then close itself? It&#39;s super fast!! Want to run the tests in Firefox (or a different <a href="http://angular.github.io/protractor/#/browser-support">browser</a>) as well? Simply update the Protractor config file, <em>protractor.conf.js</em>, like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">config</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">seleniumAddress</span><span class="o">:</span> <span class="s1">&#39;http://localhost:4444/wd/hub&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">specs</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;tests/e2e/*.js&#39;</span><span class="p">],</span>
</span><span class='line'>  <span class="nx">multiCapabilities</span><span class="o">:</span> <span class="p">[{</span>
</span><span class='line'>    <span class="nx">browserName</span><span class="o">:</span> <span class="s1">&#39;firefox&#39;</span>
</span><span class='line'>  <span class="p">},</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">browserName</span><span class="o">:</span> <span class="s1">&#39;chrome&#39;</span>
</span><span class='line'>  <span class="p">}]</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>

<p>Test it again. You should now see the tests run in both Chrome and Firefox simultaneously. Nice.</p>

<p>Finally, to simplify the code and speed up the tests (so we only search the DOM once per element), we can assign each element to a variable:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;TestOneController&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">greeting</span> <span class="o">=</span> <span class="nx">element</span><span class="p">(</span><span class="nx">by</span><span class="p">.</span><span class="nx">id</span><span class="p">(</span><span class="s1">&#39;greeting&#39;</span><span class="p">));</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">textInputBox</span> <span class="o">=</span> <span class="nx">element</span><span class="p">(</span><span class="nx">by</span><span class="p">.</span><span class="nx">css</span><span class="p">(</span><span class="s1">&#39;[ng-model=&quot;newText&quot;]&#39;</span><span class="p">));</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">changeGreetingButton</span> <span class="o">=</span> <span class="nx">element</span><span class="p">(</span><span class="nx">by</span><span class="p">.</span><span class="nx">css</span><span class="p">(</span><span class="s1">&#39;.btn-default&#39;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">beforeEach</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">browser</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;http://localhost:8888/#/one&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;initially has a greeting&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">expect</span><span class="p">(</span><span class="nx">greeting</span><span class="p">.</span><span class="nx">getText</span><span class="p">()).</span><span class="nx">toEqual</span><span class="p">(</span><span class="s1">&#39;Hello, World!&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;clicking the button changes the greeting if text is inputed&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">textInputBox</span><span class="p">.</span><span class="nx">sendKeys</span><span class="p">(</span><span class="s1">&#39;Hi!&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">changeGreetingButton</span><span class="p">.</span><span class="nx">click</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">expect</span><span class="p">(</span><span class="nx">greeting</span><span class="p">.</span><span class="nx">getText</span><span class="p">()).</span><span class="nx">toEqual</span><span class="p">(</span><span class="s1">&#39;Hi!&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;clicking the button does not change the greeting if text is not inputed&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">textInputBox</span><span class="p">.</span><span class="nx">sendKeys</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">changeGreetingButton</span><span class="p">.</span><span class="nx">click</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">expect</span><span class="p">(</span><span class="nx">greeting</span><span class="p">.</span><span class="nx">getText</span><span class="p">()).</span><span class="nx">toEqual</span><span class="p">(</span><span class="s1">&#39;Hello, World!&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>Test one last time to ensure that this refactor didn&#39;t break anything.</p>

<h3>TestTwoController</h3>

<p>Again, start with the code.</p>

<p>Angular:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>myApp.controller<span class="o">(</span><span class="s1">&#39;TestTwoController&#39;</span>, <span class="k">function</span><span class="o">(</span><span class="nv">$scope</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">$scope</span>.total <span class="o">=</span> 6;
</span><span class='line'>  <span class="nv">$scope</span>.newItem <span class="o">=</span> undefined;
</span><span class='line'>  <span class="nv">$scope</span>.items <span class="o">=</span> <span class="o">[</span>1, 2, 3<span class="o">]</span>;
</span><span class='line'>  <span class="nv">$scope</span>.add <span class="o">=</span> <span class="k">function</span> <span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span><span class="o">(</span>typeof <span class="nv">$scope</span>.newItem <span class="o">==</span> <span class="s1">&#39;number&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="nv">$scope</span>.items.push<span class="o">(</span><span class="nv">$scope</span>.newItem<span class="o">)</span>;
</span><span class='line'>      <span class="nv">$scope</span>.total <span class="o">=</span> 0;
</span><span class='line'>      <span class="k">for</span><span class="o">(</span>var <span class="nv">i</span> <span class="o">=</span> 0; i &lt; <span class="nv">$scope</span>.items.length; i++<span class="o">){</span>
</span><span class='line'>        <span class="nv">$scope</span>.total +<span class="o">=</span> parseInt<span class="o">(</span><span class="nv">$scope</span>.items<span class="o">[</span>i<span class="o">])</span>;
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>;
</span><span class='line'><span class="o">})</span>;
</span></code></pre></td></tr></table></div></figure>

<p>HTML:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;h2&gt;</span>Add values<span class="nt">&lt;/h2&gt;</span>
</span><span class='line'><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;number&quot;</span> <span class="na">ng-model=</span><span class="s">&quot;newItem&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;button</span> <span class="na">class=</span><span class="s">&quot;btn btn-default&quot;</span> <span class="na">ng-click=</span><span class="s">&quot;add()&quot;</span><span class="nt">&gt;</span>Add!<span class="nt">&lt;/button&gt;</span>
</span><span class='line'><span class="nt">&lt;p&gt;</span><span class="nt">&lt;/p&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p>Then test it in the browser.</p>

<p>Like last time, we simply need to ensure that <code>total</code> is updated appropriately when the end user submits a number in the input box and then clicks the button.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;TestTwoController&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">total</span> <span class="o">=</span> <span class="nx">element</span><span class="p">(</span><span class="nx">by</span><span class="p">.</span><span class="nx">tagName</span><span class="p">(</span><span class="s1">&#39;p&#39;</span><span class="p">));</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">numberInputBox</span> <span class="o">=</span> <span class="nx">element</span><span class="p">(</span><span class="nx">by</span><span class="p">.</span><span class="nx">css</span><span class="p">(</span><span class="s1">&#39;[ng-model=&quot;newItem&quot;]&#39;</span><span class="p">));</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">changeTotalButton</span> <span class="o">=</span> <span class="nx">element</span><span class="p">(</span><span class="nx">by</span><span class="p">.</span><span class="nx">css</span><span class="p">(</span><span class="s1">&#39;.btn-default&#39;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">beforeEach</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">browser</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;http://localhost:8888/#/two&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;initially has a total&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">expect</span><span class="p">(</span><span class="nx">total</span><span class="p">.</span><span class="nx">getText</span><span class="p">()).</span><span class="nx">toEqual</span><span class="p">(</span><span class="s1">&#39;6&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;updates the `total` when a value is added&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">numberInputBox</span><span class="p">.</span><span class="nx">sendKeys</span><span class="p">(</span><span class="mi">7</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">changeTotalButton</span><span class="p">.</span><span class="nx">click</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">numberInputBox</span><span class="p">.</span><span class="nx">clear</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">expect</span><span class="p">(</span><span class="nx">total</span><span class="p">.</span><span class="nx">getText</span><span class="p">()).</span><span class="nx">toEqual</span><span class="p">(</span><span class="s1">&#39;13&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">numberInputBox</span><span class="p">.</span><span class="nx">sendKeys</span><span class="p">(</span><span class="mi">7</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">changeTotalButton</span><span class="p">.</span><span class="nx">click</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">expect</span><span class="p">(</span><span class="nx">total</span><span class="p">.</span><span class="nx">getText</span><span class="p">()).</span><span class="nx">toEqual</span><span class="p">(</span><span class="s1">&#39;20&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">numberInputBox</span><span class="p">.</span><span class="nx">clear</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">numberInputBox</span><span class="p">.</span><span class="nx">sendKeys</span><span class="p">(</span><span class="o">-</span><span class="mi">700</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">changeTotalButton</span><span class="p">.</span><span class="nx">click</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">expect</span><span class="p">(</span><span class="nx">total</span><span class="p">.</span><span class="nx">getText</span><span class="p">()).</span><span class="nx">toEqual</span><span class="p">(</span><span class="s1">&#39;-680&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;does not update the `total` when an empty value is added&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">numberInputBox</span><span class="p">.</span><span class="nx">sendKeys</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">changeTotalButton</span><span class="p">.</span><span class="nx">click</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">expect</span><span class="p">(</span><span class="nx">total</span><span class="p">.</span><span class="nx">getText</span><span class="p">()).</span><span class="nx">toEqual</span><span class="p">(</span><span class="s1">&#39;6&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">numberInputBox</span><span class="p">.</span><span class="nx">sendKeys</span><span class="p">(</span><span class="s1">&#39;hi!&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">changeTotalButton</span><span class="p">.</span><span class="nx">click</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">expect</span><span class="p">(</span><span class="nx">total</span><span class="p">.</span><span class="nx">getText</span><span class="p">()).</span><span class="nx">toEqual</span><span class="p">(</span><span class="s1">&#39;6&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>Run the tests and you should see:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>6 tests, 9 assertions, 0 failures
</span></code></pre></td></tr></table></div></figure>

<p>Moving along&#8230;</p>

<h3>TestThreeController</h3>

<p>You know the drill:</p>

<ol>
<li>Look at the Angular and HTML code</li>
<li>Manually test in the browser</li>
<li>Write the e2e test to automate the manual test</li>
</ol>

<p>Try this on your own before looking at the code below.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;TestThreeController&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">modalNumber</span> <span class="o">=</span> <span class="nx">element</span><span class="p">.</span><span class="nx">all</span><span class="p">(</span><span class="nx">by</span><span class="p">.</span><span class="nx">tagName</span><span class="p">(</span><span class="s1">&#39;span&#39;</span><span class="p">)).</span><span class="nx">get</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">modalButton</span> <span class="o">=</span> <span class="nx">element</span><span class="p">(</span><span class="nx">by</span><span class="p">.</span><span class="nx">tagName</span><span class="p">(</span><span class="s1">&#39;button&#39;</span><span class="p">));</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">iterateButton</span> <span class="o">=</span> <span class="nx">element</span><span class="p">(</span><span class="nx">by</span><span class="p">.</span><span class="nx">css</span><span class="p">(</span><span class="s1">&#39;[ng-click=&quot;changeModalText()&quot;]&#39;</span><span class="p">));</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">hideButton</span> <span class="o">=</span> <span class="nx">element</span><span class="p">(</span><span class="nx">by</span><span class="p">.</span><span class="nx">css</span><span class="p">(</span><span class="s1">&#39;[ng-click=&quot;$hide()&quot;]&#39;</span><span class="p">));</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">justSomeText</span> <span class="o">=</span> <span class="nx">element</span><span class="p">(</span><span class="nx">by</span><span class="p">.</span><span class="nx">tagName</span><span class="p">(</span><span class="s1">&#39;h2&#39;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">beforeEach</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">browser</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;http://localhost:8888/#/three&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;initially has a modalNumber&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">modalButton</span><span class="p">.</span><span class="nx">click</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">expect</span><span class="p">(</span><span class="nx">modalNumber</span><span class="p">.</span><span class="nx">getText</span><span class="p">()).</span><span class="nx">toEqual</span><span class="p">(</span><span class="s1">&#39;1&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;updates the `modalNumber` when a value is added&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">modalButton</span><span class="p">.</span><span class="nx">click</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">iterateButton</span><span class="p">.</span><span class="nx">click</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">expect</span><span class="p">(</span><span class="nx">modalNumber</span><span class="p">.</span><span class="nx">getText</span><span class="p">()).</span><span class="nx">toEqual</span><span class="p">(</span><span class="s1">&#39;2&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">iterateButton</span><span class="p">.</span><span class="nx">click</span><span class="p">().</span><span class="nx">click</span><span class="p">().</span><span class="nx">click</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">expect</span><span class="p">(</span><span class="nx">modalNumber</span><span class="p">.</span><span class="nx">getText</span><span class="p">()).</span><span class="nx">toEqual</span><span class="p">(</span><span class="s1">&#39;5&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">hideButton</span><span class="p">.</span><span class="nx">click</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">expect</span><span class="p">(</span><span class="nx">justSomeText</span><span class="p">.</span><span class="nx">getText</span><span class="p">()).</span><span class="nx">toEqual</span><span class="p">(</span><span class="s1">&#39;Just a modal&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<h3>TestFourController</h3>

<p>Since this controller makes an external call to <a href="https://api.github.com/repositories">https://api.github.com/repositories</a> you can either mock out (fake) this request using <a href="https://docs.angularjs.org/api/ngMockE2E">ngMockE2E</a>, like we did for the unit test, or you can actually make the API call. Again, this depends on how expensive the call is and how important the functionality is to your application. In most cases, it&#39;s better to actually make the call since e2e tests should mimic the actual end user experience as much as possible. Plus, unlike unit tests which test implementation, these tests test user behavior, across several independent units - thus, these tests should not be isolated and can rely on making actual API calls either to the back-end or externally.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;TestFourController&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">loadButton</span> <span class="o">=</span> <span class="nx">element</span><span class="p">(</span><span class="nx">by</span><span class="p">.</span><span class="nx">tagName</span><span class="p">(</span><span class="s1">&#39;button&#39;</span><span class="p">));</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">ul</span> <span class="o">=</span> <span class="nx">element</span><span class="p">.</span><span class="nx">all</span><span class="p">(</span><span class="nx">by</span><span class="p">.</span><span class="nx">tagName</span><span class="p">(</span><span class="s1">&#39;ul&#39;</span><span class="p">));</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">li</span> <span class="o">=</span> <span class="nx">element</span><span class="p">.</span><span class="nx">all</span><span class="p">(</span><span class="nx">by</span><span class="p">.</span><span class="nx">tagName</span><span class="p">(</span><span class="s1">&#39;li&#39;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">beforeEach</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">browser</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;http://localhost:8888/#/four&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;updates the DOM when the button is clicked&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">expect</span><span class="p">(</span><span class="nx">ul</span><span class="p">.</span><span class="nx">count</span><span class="p">()).</span><span class="nx">toEqual</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">expect</span><span class="p">(</span><span class="nx">li</span><span class="p">.</span><span class="nx">count</span><span class="p">()).</span><span class="nx">toEqual</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">loadButton</span><span class="p">.</span><span class="nx">click</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">expect</span><span class="p">(</span><span class="nx">ul</span><span class="p">.</span><span class="nx">count</span><span class="p">()).</span><span class="nx">toEqual</span><span class="p">(</span><span class="mi">101</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">expect</span><span class="p">(</span><span class="nx">li</span><span class="p">.</span><span class="nx">count</span><span class="p">()).</span><span class="nx">toEqual</span><span class="p">(</span><span class="mi">105</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>Here, when the button is clicked, the API call is made and the scope is updated. We then assert that there are 101 UL tags and 105 LI tags, representing a Github username and repo returned from the API call, present on the DOM.</p>

<p>That&#39;s it!</p>

<h2>Conclusion</h2>

<p><em>Want more?</em></p>

<ol>
<li>Take a look at the <a href="http://angular.github.io/protractor/#/page-objects">Page Objects</a> design pattern and refactor the tests so that they are better organized.</li>
<li>Break a test, and then <a href="http://angular.github.io/protractor/#/debugging#pausing-to-debug">pause</a> the test before the break via <code>browser.pause()</code> and/or <code>browser.debugger()</code> to debug.</li>
<li>Test your own Angular app, and then add a link to the comments to get feedback.</li>
</ol>

<p>Be sure to check the <a href="http://angular.github.io/protractor/#/">Protractor</a> documentation for more. Thanks again for reading, and happy testing!</p>

<p><hr><br></p>

<p><em>Interested in learning how to test an Angular + Django app? Check out <a href="http://www.realpython.com/">Real Python</a> for details.</em></p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Testing AngularJS with Protractor and Karma - part 1]]></title>
    <link href="http://mjhea0.github.com/blog/2015/04/09/testing-angularjs-with-protractor-and-karma-part-1/"/>
    
    <updated>2015-04-09T09:06:00-06:00</updated>
    <id>http://mjhea0.github.com/blog/2015/04/09/testing-angularjs-with-protractor-and-karma-part-1</id>
    
    <content type="html"><![CDATA[<p><strong>This article details how to test a simple AngularJS application using unit tests and end-to-end (E2E) tests.</strong></p>

<div style="text-align:center;">
  <img src="https://raw.githubusercontent.com/mjhea0/angular-testing-tutorial/master/img/angular-karma.png" style="max-width: 100%; border:0;" alt="angular + karma">
</div>

<p><br></p>

<ul>
<li>Part 1 - In the first part we&#39;ll look at unit tests, which ensure that small, isolated pieces of code (e.g., a unit) behave as expected <strong>(current)</strong>.</li>
<li><a href="http://mherman.org/blog/2015/04/26/testing-angularjs-with-protractor-and-karma-part-2">Part 2</a> - In part two we&#39;ll address E2E tests, which verify that all the pieces of code (units) fit together by simulating the user experience through browser automation.</li>
</ul>

<p>To accomplish this we will be using <a href="http://karma-runner.github.io/">Karma</a> v0.12.31 (test runner) and <a href="http://chaijs.com/">Chai</a> v2.2.0 (assertions) for the unit tests (along with <a href="https://github.com/karma-runner/karma-mocha">Karma-Mocha</a>) and <a href="http://angular.github.io/protractor/#/">Protractor</a> v2.0.0 for the E2E tests. This article also uses <a href="https://angularjs.org/">Angular</a> v1.3.15. Be sure to take note of all dependencies and their versions in the <em>package.json</em> and <em>bower.json</em> files in the <a href="https://github.com/mjhea0/angular-testing-tutorial">repo</a>.</p>

<p>The repo includes the following tags:</p>

<ol>
<li><em>v1</em> - <a href="https://github.com/mjhea0/angular-testing-tutorial/releases/tag/v1">project boilerplate</a></li>
<li><em>v2</em> - <a href="https://github.com/mjhea0/angular-testing-tutorial/releases/tag/v2">adds testing boilerplate/configuration</a></li>
<li><em>v3</em> - <a href="https://github.com/mjhea0/angular-testing-tutorial/releases/tag/v3">adds unit tests</a></li>
<li><em>v4</em> - <a href="https://github.com/mjhea0/angular-testing-tutorial/releases/tag/v4">adds E2E tests</a></li>
</ol>

<h2>Project Setup</h2>

<p>Start by cloning the repo, checkout out the first tag, and then install the dependencies:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git clone https://github.com/mjhea0/angular-testing-tutorial.git
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>angular-testing-tutorial
</span><span class='line'><span class="nv">$ </span>git checkout tags/v1
</span><span class='line'><span class="nv">$ </span>npm install <span class="o">&amp;&amp;</span> bower install
</span></code></pre></td></tr></table></div></figure>

<p>Run the app:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>gulp
</span></code></pre></td></tr></table></div></figure>

<p>Navigate to <a href="http://localhost:8888">http://localhost:8888</a> to view the live app.</p>

<div style="text-align:center;">
  <img src="https://raw.githubusercontent.com/mjhea0/angular-testing-tutorial/master/img/live-app.png" style="max-width: 100%; border:0;" alt="angular app">
</div>

<p><br></p>

<p>Test it out. Once done, kill the server and checkout the second tag:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git checkout tags/v2
</span></code></pre></td></tr></table></div></figure>

<p>There should now be a &quot;tests&quot; folder and a few more tasks in the Gulpfile.</p>

<p>Run the unit tests:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>gulp unit
</span></code></pre></td></tr></table></div></figure>

<p>They should pass:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">[</span>05:28:02<span class="o">]</span> Using gulpfile ~/angular-testing-tutorial/Gulpfile.js
</span><span class='line'><span class="o">[</span>05:28:02<span class="o">]</span> Starting <span class="s1">&#39;unit&#39;</span>...
</span><span class='line'>INFO <span class="o">[</span>karma<span class="o">]</span>: Karma v0.12.31 server started at http://localhost:9876/
</span><span class='line'>INFO <span class="o">[</span>launcher<span class="o">]</span>: Starting browser Chrome
</span><span class='line'>INFO <span class="o">[</span>Chrome 41.0.2272 <span class="o">(</span>Mac OS X 10.10.2<span class="o">)]</span>: Connected on socket JBQp0aEyu8KSqUfGoxsd with id 94772581
</span><span class='line'>Chrome 41.0.2272 <span class="o">(</span>Mac OS X 10.10.2<span class="o">)</span>: Executed 2 of 2 SUCCESS <span class="o">(</span>0.061 secs / 0.002 secs<span class="o">)</span>
</span><span class='line'><span class="o">[</span>05:28:05<span class="o">]</span> Finished <span class="s1">&#39;unit&#39;</span> after 3.23 s
</span></code></pre></td></tr></table></div></figure>

<p>Now for the e2e tests:</p>

<ol>
<li>1st terminal window: <code>webdriver-manager start</code></li>
<li>2nd terminal window (within the project directory): <code>gulp</code></li>
<li>3rd terminal window (within the project directory): <code>gulp e2e</code></li>
</ol>

<p>They should pass as well:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">[</span>05:29:45<span class="o">]</span> Using gulpfile ~/angular-testing-tutorial/Gulpfile.js
</span><span class='line'><span class="o">[</span>05:29:45<span class="o">]</span> Starting <span class="s1">&#39;e2e&#39;</span>...
</span><span class='line'>Using the selenium server at http://localhost:4444/wd/hub
</span><span class='line'><span class="o">[</span>launcher<span class="o">]</span> Running 1 instances of WebDriver
</span><span class='line'>.
</span><span class='line'>
</span><span class='line'>Finished in 0.921 seconds
</span><span class='line'>1 <span class="nb">test</span>, 1 assertion, 0 failures
</span><span class='line'>
</span><span class='line'><span class="o">[</span>launcher<span class="o">]</span> 0 instance<span class="o">(</span>s<span class="o">)</span> of WebDriver still running
</span><span class='line'><span class="o">[</span>launcher<span class="o">]</span> chrome <span class="c">#1 passed</span>
</span></code></pre></td></tr></table></div></figure>

<p>So, what&#39;s happening here&#8230;</p>

<h2>Configuration Files</h2>

<p>There are two configuration files in the &quot;tests&quot; folder - one for Karma and the other for Protractor.</p>

<h3>Karma</h3>

<p><a href="http://karma-runner.github.io/">Karma</a> is a test runner built by the AngularJS team that executes the unit tests and reports the results.</p>

<p>Let&#39;s look the config file, <em>karma.conf.js</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">config</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">config</span><span class="p">.</span><span class="nx">set</span><span class="p">({</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// base path that will be used to resolve all patterns</span>
</span><span class='line'>    <span class="nx">basePath</span><span class="o">:</span> <span class="s1">&#39;.&#39;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// frameworks to use</span>
</span><span class='line'>    <span class="nx">frameworks</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;mocha&#39;</span><span class="p">,</span> <span class="s1">&#39;chai&#39;</span><span class="p">],</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// list of files / patterns to load in the browser</span>
</span><span class='line'>    <span class="nx">files</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="s1">&#39;../app/bower_components/angular/angular.js&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;../app/bower_components/jquery/dist/jquery.js&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;../app/bower_components/angular-strap/dist/angular-strap.js&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;../app/bower_components/angular-strap/dist/angular-strap.tpl.js&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;../app/bower_components/angular-mocks/angular-mocks.js&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;../app/bower_components/angular-route/angular-route.js&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;./unit/*.js&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;../app/app.js&#39;</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// test result reporter</span>
</span><span class='line'>    <span class="nx">reporters</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;progress&#39;</span><span class="p">],</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// web server port</span>
</span><span class='line'>    <span class="nx">port</span><span class="o">:</span> <span class="mi">9876</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// enable / disable colors in the output (reporters and logs)</span>
</span><span class='line'>    <span class="nx">colors</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// level of logging</span>
</span><span class='line'>    <span class="nx">logLevel</span><span class="o">:</span> <span class="nx">config</span><span class="p">.</span><span class="nx">LOG_INFO</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// enable / disable watching file and executing tests whenever any file changes</span>
</span><span class='line'>    <span class="nx">autoWatch</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// start these browsers</span>
</span><span class='line'>    <span class="nx">browsers</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;Chrome&#39;</span><span class="p">],</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Continuous Integration mode</span>
</span><span class='line'>    <span class="nx">singleRun</span><span class="o">:</span> <span class="kc">false</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>

<blockquote>
<p>You can also run <code>karma init</code> to be guided through the creation of a config file.</p>
</blockquote>

<p>Be sure to read over the comments for an overview of each config option. For more information, review the <a href="http://karma-runner.github.io/0.12/config/configuration-file.html">official documentation</a>.</p>

<h3>Protractor</h3>

<p><a href="http://angular.github.io/protractor/#/">Protractor</a> provides a nice wrapper around <a href="https://github.com/SeleniumHQ/selenium/wiki/WebDriverJs">WebDriverJS</a>, the JavaScript bindings for <a href="http://seleniumhq.github.io/selenium/docs/api/javascript/">Selenium Webdriver</a>, to run tests against an AngularJS application running live in a browser.</p>

<p>Turn your attention to the Protractor config file, <em>protractor.conf.js</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">config</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">seleniumAddress</span><span class="o">:</span> <span class="s1">&#39;http://localhost:4444/wd/hub&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">specs</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;tests/e2e/*.js&#39;</span><span class="p">]</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>

<p>This tells protractor where to find the test files (called specs) and specifies the address that the Selenium server is running on. Simple.</p>

<p>Ready to start testing?</p>

<h2>Unit Tests</h2>

<p>We&#39;ll start with unit tests since they are much easier to write, debug, and maintain.</p>

<p>Keep in mind that unit tests, by definition, only test isolated units of code so they rely heavily on mocking fake data. This can add much complexity to your tests and can decrease the effectiveness of the actual tests. For example, if you&#39;re mocking out an HTTP request to a back-end API, then you&#39;re not really testing your application. Instead you&#39;re simulating the request and then using fake JSON data to simulate the response back. The tests may run faster, but they are much less effective.</p>

<p>When starting out, mock out only the most expensive requests and make the actual API call in other situations. Over time you will develop a better sense of which requests should be mocked and which should not.</p>

<p>Finally, if you decide not to mock a request in a specific test, then the test is no longer a unit test since it&#39;s not testing an isolated unit of code. Instead you are testing multiple units, which is an integration test. For simplicity, we will continue to refer to such tests as unit tests.</p>

<p>With that, let&#39;s create some tests, broken up by controller!</p>

<h3>TestOneController</h3>

<p>Take a look at the code in the first controller:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">myApp</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;TestOneController&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">greeting</span> <span class="o">=</span> <span class="s2">&quot;Hello, World!&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">newText</span> <span class="o">=</span> <span class="kc">undefined</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">changeGreeting</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">greeting</span> <span class="o">=</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">newText</span><span class="p">;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>What&#39;s happening here? Confirm your answer by running your app and watching what happens. Now, what can/should we test?</p>

<ol>
<li><code>greeting</code> has an initial value of <code>&quot;Hello, World!&quot;</code>, and</li>
<li>The <code>changeGreeting</code> function updates <code>greeting</code>.</li>
</ol>

<p>You probably noticed that we are already testing this in the spec:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;TestOneController&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">controller</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">$scope</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">beforeEach</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">module</span><span class="p">(</span><span class="s1">&#39;myApp&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">beforeEach</span><span class="p">(</span><span class="nx">inject</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">$controller</span><span class="p">,</span> <span class="nx">$rootScope</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$scope</span> <span class="o">=</span> <span class="nx">$rootScope</span><span class="p">.</span><span class="nx">$new</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">controller</span> <span class="o">=</span> <span class="nx">$controller</span><span class="p">(</span><span class="s1">&#39;TestOneController&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$scope</span><span class="o">:</span> <span class="nx">$scope</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">}));</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;initially has a greeting&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">greeting</span><span class="p">,</span> <span class="s2">&quot;Hello, World!&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;clicking the button changes the greeting&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">newText</span> <span class="o">=</span> <span class="s2">&quot;Hi!&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">changeGreeting</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">greeting</span><span class="p">,</span> <span class="s2">&quot;Hi!&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>What&#39;s happening?</p>

<ol>
<li>The <code>describe</code> block is used to group similar tests.</li>
<li>The module, <code>myApp</code>, is loaded, into each test, in the first <code>beforeEach</code> block, which instantiates a clean testing environment.</li>
<li>The dependencies are injected, a new scope is created, and the controller is instantiated in the second <code>beforeEach</code>.</li>
<li>Each <code>it</code> function is a separate test, which includes a title, in human readable form, and a function with the actual test code.</li>
<li>The first test asserts that the initial state of <code>greeting</code> is <code>&quot;Hello, World!&quot;</code>.</li>
<li>Meanwhile, the second test assets that the <code>changeGreeting()</code> function actually changes the value of <code>greeting</code>.</li>
</ol>

<p>Make sense?</p>

<p><em>In most cases, unit tests simply change the scope and assert that the results are what we expected.</em></p>

<blockquote>
<p>In general, when testing controllers, you inject then register the controller with a <code>beforeEach</code> block, along with the <code>$rootScope</code> and then test that the functions within the controller act as expected.</p>
</blockquote>

<p>Run the tests again to ensure they still pass - <code>gulp unit</code>.</p>

<p>What else could we test? How about if <code>newText</code> doesn&#39;t change - e.g., if the user submits the button without entering any text in the input box - then the value of <code>greeting</code> should stay the same. Try writing this on your own, before you look at my answer:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">it</span><span class="p">(</span><span class="s1">&#39;clicking the button does not change the greeting if text is not inputed&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">changeGreeting</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">greeting</span><span class="p">,</span> <span class="s2">&quot;Hello, World!&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>Try running this. It should fail.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Chrome 41.0.2272 <span class="o">(</span>Mac OS X 10.10.2<span class="o">)</span> TestOneController clicking the button does not change the greeting FAILED
</span><span class='line'>  AssertionError: expected undefined to equal <span class="s1">&#39;Hello, World!&#39;</span>
</span></code></pre></td></tr></table></div></figure>

<p>So, we&#39;ve revealed a bug. We could fix this by adding validation to the input box to ensure the end user enters a value or we could update <code>changeGreeting</code> to only update <code>greeting</code> if <code>newText</code> is not <code>undefined</code>. Let&#39;s go with the latter.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$scope</span><span class="p">.</span><span class="nx">changeGreeting</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">newText</span> <span class="o">!==</span> <span class="kc">undefined</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">greeting</span> <span class="o">=</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">newText</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>

<p>Save the code, and then run the tests again:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>gulp unit
</span><span class='line'><span class="o">[</span>08:28:18<span class="o">]</span> Using gulpfile ~/angular-testing-tutorial/Gulpfile.js
</span><span class='line'><span class="o">[</span>08:28:18<span class="o">]</span> Starting <span class="s1">&#39;unit&#39;</span>...
</span><span class='line'>INFO <span class="o">[</span>karma<span class="o">]</span>: Karma v0.12.31 server started at http://localhost:9876/
</span><span class='line'>INFO <span class="o">[</span>launcher<span class="o">]</span>: Starting browser Chrome
</span><span class='line'>INFO <span class="o">[</span>Chrome 41.0.2272 <span class="o">(</span>Mac OS X 10.10.2<span class="o">)]</span>: Connected on socket HGnVC5-cAXOZjAsrSCWj with id 83240025
</span><span class='line'>Chrome 41.0.2272 <span class="o">(</span>Mac OS X 10.10.2<span class="o">)</span>: Executed 3 of 3 SUCCESS <span class="o">(</span>0.065 secs / 0.001 secs<span class="o">)</span>
</span><span class='line'><span class="o">[</span>08:28:21<span class="o">]</span> Finished <span class="s1">&#39;unit&#39;</span> after 3.13 s
</span></code></pre></td></tr></table></div></figure>

<p>Nice!</p>

<blockquote>
<p>Since controllers are used to bind data to the template (via scope), unit tests are perfect for testing the controller logic - e.g., what happens to the scope as the controller runs - while E2E tests ensure that the template is updated accordingly.</p>
</blockquote>

<h3>TestTwoController</h3>

<p>Start by analyzing the code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">myApp</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;TestTwoController&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">total</span> <span class="o">=</span> <span class="mi">6</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">newItem</span> <span class="o">=</span> <span class="kc">undefined</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">items</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">add</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">items</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">newItem</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">total</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">items</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>      <span class="nx">$scope</span><span class="p">.</span><span class="nx">total</span> <span class="o">+=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">items</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>What should we test? Take out a pen and paper and write down everything that should be tested. Once done, write the code. Check your code against mine.</p>

<p>Be sure to start with the following boilerplate:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;TestTwoController&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">controller</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">$scope</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">beforeEach</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">module</span><span class="p">(</span><span class="s1">&#39;myApp&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">beforeEach</span><span class="p">(</span><span class="nx">inject</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">$controller</span><span class="p">,</span> <span class="nx">$rootScope</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$scope</span> <span class="o">=</span> <span class="nx">$rootScope</span><span class="p">.</span><span class="nx">$new</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">controller</span> <span class="o">=</span> <span class="nx">$controller</span><span class="p">(</span><span class="s1">&#39;TestTwoController&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$scope</span><span class="o">:</span> <span class="nx">$scope</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">}));</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<h4>Test 1: The initial value of <code>total</code></h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">it</span><span class="p">(</span><span class="s1">&#39;initially has a total&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">total</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<h4>Test 2: The initial value of <code>items</code></h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">it</span><span class="p">(</span><span class="s1">&#39;initially has items&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">assert</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">items</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">assert</span><span class="p">.</span><span class="nx">deepEqual</span><span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">items</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<h4>Test 3: The <code>add</code> function updates the <code>total</code> and <code>items</code> array when a value is added</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">it</span><span class="p">(</span><span class="s1">&#39;the `add` function updates the `total` and `items` array when a value is added&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">newItem</span> <span class="o">=</span> <span class="mi">7</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">add</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">total</span><span class="p">,</span> <span class="mi">13</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">assert</span><span class="p">.</span><span class="nx">deepEqual</span><span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">items</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">7</span><span class="p">]);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<h4>Test 4: The <code>add</code> function does not update the <code>total</code> and <code>items</code> array when an empty value is added</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">it</span><span class="p">(</span><span class="s1">&#39;does not update the `total` and `items` array when an empty value is added&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">newItem</span> <span class="o">=</span> <span class="kc">undefined</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">add</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">total</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">assert</span><span class="p">.</span><span class="nx">deepEqual</span><span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">items</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]);</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">newItem</span> <span class="o">=</span> <span class="mi">22</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">add</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">total</span><span class="p">,</span> <span class="mi">28</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">assert</span><span class="p">.</span><span class="nx">deepEqual</span><span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">items</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">22</span><span class="p">]);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<h4>Run</h4>

<p>Each test should be straightforward. Run the tests. There should be one failure:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Chrome</span> <span class="mf">41.0</span><span class="p">.</span><span class="mi">2272</span> <span class="p">(</span><span class="nx">Mac</span> <span class="nx">OS</span> <span class="nx">X</span> <span class="mf">10.10</span><span class="p">.</span><span class="mi">2</span><span class="p">)</span> <span class="nx">TestTwoController</span> <span class="nx">does</span> <span class="nx">not</span> <span class="nx">update</span> <span class="nx">the</span> <span class="err">`</span><span class="nx">total</span><span class="err">`</span> <span class="nx">and</span> <span class="err">`</span><span class="nx">items</span><span class="err">`</span> <span class="nx">array</span> <span class="nx">when</span> <span class="nx">an</span> <span class="nx">empty</span> <span class="nx">value</span> <span class="nx">is</span> <span class="nx">added</span> <span class="nx">FAILED</span>
</span><span class='line'>  <span class="nx">AssertionError</span><span class="o">:</span> <span class="nx">expected</span> <span class="kc">NaN</span> <span class="nx">to</span> <span class="nx">equal</span> <span class="mi">6</span>
</span></code></pre></td></tr></table></div></figure>

<p>Update the code, adding a conditional again:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$scope</span><span class="p">.</span><span class="nx">add</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">newItem</span> <span class="o">==</span> <span class="s1">&#39;number&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">items</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">newItem</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">total</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">items</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>      <span class="nx">$scope</span><span class="p">.</span><span class="nx">total</span> <span class="o">+=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">items</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>

<p>Also update the partial, <em>/app/partials/two.html</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;number&quot;</span> <span class="na">ng-model=</span><span class="s">&quot;newItem&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p>Run it again:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>gulp unit
</span><span class='line'><span class="o">[</span>09:56:10<span class="o">]</span> Using gulpfile ~/angular-testing-tutorial/Gulpfile.js
</span><span class='line'><span class="o">[</span>09:56:10<span class="o">]</span> Starting <span class="s1">&#39;unit&#39;</span>...
</span><span class='line'>INFO <span class="o">[</span>karma<span class="o">]</span>: Karma v0.12.31 server started at http://localhost:9876/
</span><span class='line'>INFO <span class="o">[</span>launcher<span class="o">]</span>: Starting browser Chrome
</span><span class='line'>INFO <span class="o">[</span>Chrome 41.0.2272 <span class="o">(</span>Mac OS X 10.10.2<span class="o">)]</span>: Connected on socket Lbv1sROpYrEHgotlmJZf with id 91008249
</span><span class='line'>Chrome 41.0.2272 <span class="o">(</span>Mac OS X 10.10.2<span class="o">)</span>: Executed 7 of 7 SUCCESS <span class="o">(</span>0.082 secs / 0.003 secs<span class="o">)</span>
</span><span class='line'><span class="o">[</span>09:56:13<span class="o">]</span> Finished <span class="s1">&#39;unit&#39;</span> after 3.05 s
</span></code></pre></td></tr></table></div></figure>

<p>Success!</p>

<p>Did I miss anything? Comment below.</p>

<h3>TestThreeController</h3>

<p>Again, check out the code in <em>app.js</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">myApp</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;TestThreeController&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">modal</span> <span class="o">=</span> <span class="p">{</span><span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;Hi!&#39;</span><span class="p">,</span> <span class="nx">content</span><span class="o">:</span> <span class="s1">&#39;This is a message!&#39;</span><span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>What can we test here?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">it</span><span class="p">(</span><span class="s1">&#39;initially has a modal&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">assert</span><span class="p">.</span><span class="nx">isObject</span><span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">modal</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">assert</span><span class="p">.</span><span class="nx">deepEqual</span><span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">modal</span><span class="p">,</span> <span class="p">{</span><span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;Hi!&#39;</span><span class="p">,</span> <span class="nx">content</span><span class="o">:</span> <span class="s1">&#39;This is a message!&#39;</span><span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>Perhaps a better question is: What <em>should</em> we test here? Is the above test really necessary? Probably not. But we may need to test it out more in the future if we build out the functionality. Let&#39;s go for it!</p>

<h4>Update <em>app.js</em>:</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">myApp</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;TestThreeController&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">$modal</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">modalNumber</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">myModal</span> <span class="o">=</span> <span class="nx">$modal</span><span class="p">({</span><span class="nx">scope</span><span class="o">:</span> <span class="nx">$scope</span><span class="p">,</span> <span class="nx">template</span><span class="o">:</span> <span class="s1">&#39;modal.tpl.html&#39;</span><span class="p">,</span> <span class="nx">show</span><span class="o">:</span> <span class="kc">false</span><span class="p">});</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">showModal</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">myModal</span><span class="p">.</span><span class="nx">$promise</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">myModal</span><span class="p">.</span><span class="nx">show</span><span class="p">);</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">changeModalText</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">modalNumber</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>Here we are defined a custom template, <code>modal.tpl.html</code>, to be used for the modal text and then we assigned <code>$scope.modalNumber</code> to <code>1</code> as well as function to iterate the number.</p>

<h4>Add <em>modal.tpl.html</em>:</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;modal&quot;</span> <span class="na">tabindex=</span><span class="s">&quot;-1&quot;</span> <span class="na">role=</span><span class="s">&quot;dialog&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;modal-dialog&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;modal-content&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;modal-body&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;span&gt;</span>
</span><span class='line'>          <span class="nt">&lt;button</span> <span class="na">class=</span><span class="s">&quot;btn btn-default&quot;</span> <span class="na">ng-click=</span><span class="s">&quot;changeModalText()&quot;</span><span class="nt">&gt;</span>Iterate<span class="nt">&lt;/button&gt;</span>
</span><span class='line'>          <span class="ni">&amp;nbsp;&amp;#8594;&amp;nbsp;</span>
</span><span class='line'>          <span class="nt">&lt;span&gt;</span><span class="nt">&lt;/span&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/span&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;modal-footer&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">&quot;button&quot;</span> <span class="na">class=</span><span class="s">&quot;btn btn-default&quot;</span> <span class="na">ng-click=</span><span class="s">&quot;$hide()&quot;</span><span class="nt">&gt;</span>Close<span class="nt">&lt;/button&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p>Add this template to the &quot;app&quot; folder.</p>

<h4>Update <em>three.html</em>:</h4>

<p>Finally, update the partial:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;h2&gt;</span>Just a modal<span class="nt">&lt;/h2&gt;</span>
</span><span class='line'><span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">&quot;button&quot;</span> <span class="na">class=</span><span class="s">&quot;btn btn-lg btn-default&quot;</span> <span class="na">data-template=</span><span class="s">&quot;modal.tpl.html&quot;</span> <span class="na">bs-modal=</span><span class="s">&quot;modal&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  Launch modal!
</span><span class='line'><span class="nt">&lt;/button&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p>Run the app to make sure everything works, and then update the test&#8230;</p>

<h4>Test redux</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;TestThreeController&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">controller</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">$scope</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">beforeEach</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">module</span><span class="p">(</span><span class="s1">&#39;myApp&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">beforeEach</span><span class="p">(</span><span class="nx">inject</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">$controller</span><span class="p">,</span> <span class="nx">$rootScope</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$scope</span> <span class="o">=</span> <span class="nx">$rootScope</span><span class="p">.</span><span class="nx">$new</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">controller</span> <span class="o">=</span> <span class="nx">$controller</span><span class="p">(</span><span class="s1">&#39;TestThreeController&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$scope</span><span class="o">:</span> <span class="nx">$scope</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">}));</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;initially has a modalNumber&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">modalNumber</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;updates the `modalNumber` when a value is added&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">changeModalText</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">modalNumber</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">changeModalText</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">modalNumber</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>Notice how we&#39;re no longer testing that a modal is present. We&#39;ll test that via the E2E tests.</p>

<h3>TestFourController</h3>

<p>Finally, let&#39;s test the AJAX request:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>myApp.controller<span class="o">(</span><span class="s1">&#39;TestFourController&#39;</span>, <span class="k">function</span><span class="o">(</span><span class="nv">$scope</span>, <span class="nv">$http</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">$scope</span>.repos <span class="o">=</span> <span class="o">[]</span>;
</span><span class='line'>  <span class="nv">$scope</span>.loadRepos <span class="o">=</span> <span class="k">function</span> <span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="nv">$http</span>.get<span class="o">(</span><span class="s1">&#39;https://api.github.com/repositories&#39;</span><span class="o">)</span>.then<span class="o">(</span><span class="k">function</span> <span class="o">(</span>repos<span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="nv">$scope</span>.repos <span class="o">=</span> repos.data;
</span><span class='line'>    <span class="o">})</span>;
</span><span class='line'>  <span class="o">}</span>;
</span><span class='line'><span class="o">})</span>;
</span></code></pre></td></tr></table></div></figure>

<p>Remember the discussion earlier on mocking HTTP requests? Well, here&#39;s probably a good place to actually use a mocking library since this request hits an external API. To do this, we can use the <code>$httpBackend</code> directive from the <a href="https://docs.angularjs.org/api/ngMock">angular-mocks</a> library.</p>

<p>First, let&#39;s first add the <em>mock.js</em> file found in the <a href="https://github.com/mjhea0/angular-testing-tutorial/tree/master/tests/mock">repo</a> into a new folder called &quot;mock&quot; within the &quot;tests&quot; folder. This module uses <code>angular.module().value</code> to set a JSON value to use as the fake data.</p>

<p>Update the list of files in <em>karma.conf.js</em> so that the the mock file is loaded and served by Karma:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">files</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>  <span class="s1">&#39;../app/bower_components/angular/angular.js&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;../app/bower_components/jquery/dist/jquery.js&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;../app/bower_components/angular-strap/dist/angular-strap.js&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;../app/bower_components/angular-strap/dist/angular-strap.tpl.js&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;../app/bower_components/angular-mocks/angular-mocks.js&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;../app/bower_components/angular-route/angular-route.js&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;./unit/*.js&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;./mock/*.js&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;../app/app.js&#39;</span>
</span><span class='line'><span class="p">],</span>
</span></code></pre></td></tr></table></div></figure>

<p>Next, add the test:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;TestFourController&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">controller</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">$scope</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">$httpBackend</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">mockedDashboardJSON</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">beforeEach</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">module</span><span class="p">(</span><span class="s1">&#39;myApp&#39;</span><span class="p">,</span> <span class="s1">&#39;mockedDashboardJSON&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">beforeEach</span><span class="p">(</span><span class="nx">inject</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">$controller</span><span class="p">,</span> <span class="nx">$rootScope</span><span class="p">,</span> <span class="nx">_$httpBackend_</span><span class="p">,</span> <span class="nx">defaultJSON</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$httpBackend</span> <span class="o">=</span> <span class="nx">_$httpBackend_</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">$scope</span> <span class="o">=</span> <span class="nx">$rootScope</span><span class="p">.</span><span class="nx">$new</span><span class="p">();</span>
</span><span class='line'>      <span class="nx">$httpBackend</span><span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="s1">&#39;GET&#39;</span><span class="p">,</span><span class="s1">&#39;https://api.github.com/repositories&#39;</span><span class="p">).</span><span class="nx">respond</span><span class="p">(</span><span class="nx">defaultJSON</span><span class="p">.</span><span class="nx">fakeData</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">controller</span> <span class="o">=</span> <span class="nx">$controller</span><span class="p">(</span><span class="s1">&#39;TestFourController&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">$scope</span><span class="o">:</span> <span class="nx">$scope</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">}));</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">afterEach</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$httpBackend</span><span class="p">.</span><span class="nx">verifyNoOutstandingExpectation</span><span class="p">();</span>
</span><span class='line'>      <span class="nx">$httpBackend</span><span class="p">.</span><span class="nx">verifyNoOutstandingRequest</span><span class="p">();</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;initially has repos&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">assert</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">repos</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">assert</span><span class="p">.</span><span class="nx">deepEqual</span><span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">repos</span><span class="p">,</span> <span class="p">[]);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;clicking the button updates the repos&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$scope</span><span class="p">.</span><span class="nx">loadRepos</span><span class="p">();</span>
</span><span class='line'>      <span class="nx">$httpBackend</span><span class="p">.</span><span class="nx">flush</span><span class="p">();</span>
</span><span class='line'>      <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">repos</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span> <span class="mi">100</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>What&#39;s happening?</p>

<ol>
<li>Essentially, here we&#39;re injecting <code>defaultJSON</code> so that when the app tries to make the HTTP request, it triggers <code>$httpBackend</code>, which, in turn, uses the <code>defaultJSON</code> value.</li>
<li>Did you notice the underscores surrounding the <code>$httpBackend</code> directive? This is a hack that allows us to use the dependency in multiple tests. You can find more information on this from the <a href="https://docs.angularjs.org/api/ngMock/function/angular.mock.inject">official documentation</a>.</li>
<li>Finally, we&#39;re using an <code>afterEach</code> block to check that we&#39;re not missing any HTTP requests in our tests via the <code>verifyNoOutstandingExpectation()</code> and <code>verifyNoOutstandingRequest()</code> methods. Again, you can read more about these methods from the <a href="https://docs.angularjs.org/api/ngMock/service/$httpBackend">Angular docs</a>.</li>
</ol>

<p>Test it out!</p>

<h3>Routes</h3>

<p>How about the routes, templates, and partials?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;routes&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">beforeEach</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">module</span><span class="p">(</span><span class="s1">&#39;myApp&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">beforeEach</span><span class="p">(</span><span class="nx">inject</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">_$httpBackend_</span><span class="p">,</span> <span class="nx">_$route_</span><span class="p">,</span> <span class="nx">_$location_</span><span class="p">,</span> <span class="nx">$rootScope</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$httpBackend</span> <span class="o">=</span> <span class="nx">_$httpBackend_</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">$route</span> <span class="o">=</span> <span class="nx">_$route_</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">$location</span> <span class="o">=</span> <span class="nx">_$location_</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">$scope</span> <span class="o">=</span> <span class="nx">$rootScope</span><span class="p">.</span><span class="nx">$new</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}));</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should load the one.html template&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">$httpBackend</span><span class="p">.</span><span class="nx">whenGET</span><span class="p">(</span><span class="s1">&#39;partals/one.html&#39;</span><span class="p">).</span><span class="nx">respond</span><span class="p">(</span><span class="s1">&#39;...&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">$apply</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$location</span><span class="p">.</span><span class="nx">path</span><span class="p">(</span><span class="s1">&#39;/one&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">$route</span><span class="p">.</span><span class="nx">current</span><span class="p">.</span><span class="nx">templateUrl</span><span class="p">,</span> <span class="s1">&#39;partials/one.html&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">$route</span><span class="p">.</span><span class="nx">current</span><span class="p">.</span><span class="nx">controller</span><span class="p">,</span> <span class="s1">&#39;TestOneController&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<ol>
<li>When the route is loaded, the <code>current</code> property is updated. We then test to ensure that the current controller and template are <code>TestOneController</code> and <code>partials/one.html</code>, respectively.</li>
<li>Did you notice that we wrapped the route change inside the <code>$apply</code> callback? Since unit tests don&#39;t run the full Angular app, we had to simulate it by triggering the <a href="https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$digest">digest cycle</a>.</li>
<li>Curious about <code>WhenGET</code>? Check out the <a href="https://docs.angularjs.org/api/ngMock/service/$httpBackend">Angular documentation</a>. Take note of <code>ExpectGET</code> as well. Can you re-write the above test to use <code>ExpectGET</code>?</li>
</ol>

<p>Make sure to run the tests one last time:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>gulp unit
</span><span class='line'><span class="o">[</span>05:20:07<span class="o">]</span> Using gulpfile ~/angular-testing-tutorial/Gulpfile.js
</span><span class='line'><span class="o">[</span>05:20:07<span class="o">]</span> Starting <span class="s1">&#39;unit&#39;</span>...
</span><span class='line'>INFO <span class="o">[</span>karma<span class="o">]</span>: Karma v0.12.31 server started at http://localhost:9876/
</span><span class='line'>INFO <span class="o">[</span>launcher<span class="o">]</span>: Starting browser Chrome
</span><span class='line'>INFO <span class="o">[</span>Chrome 41.0.2272 <span class="o">(</span>Mac OS X 10.10.2<span class="o">)]</span>: Connected on socket R5qQUcjswAbpcvMK6JKu with id 67365006
</span><span class='line'>Chrome 41.0.2272 <span class="o">(</span>Mac OS X 10.10.2<span class="o">)</span>: Executed 12 of 12 SUCCESS <span class="o">(</span>0.16 secs / 0.027 secs<span class="o">)</span>
</span><span class='line'><span class="o">[</span>05:20:10<span class="o">]</span> Finished <span class="s1">&#39;unit&#39;</span> after 3.44 s
</span></code></pre></td></tr></table></div></figure>

<h2>Conclusion</h2>

<p>That&#39;s it for unit tests. In the next <a href="http://mherman.org/blog/2015/04/26/testing-angularjs-with-protractor-and-karma-part-2">part</a>, we&#39;ll test the entire application, front to back, using end-to-end (E2E) tests via Protractor.</p>

<p>Checkout the third tag, <code>v3</code>, to view all the completed unit tests:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git checkout tags/v3
</span></code></pre></td></tr></table></div></figure>

<p>Ready for more?</p>

<p>Try adding some <a href="http://mherman.org/blog/2014/06/12/primer-on-angularjs-service-types/">Factories/Services</a> and Filters to your app to continue practicing. Since the syntax is relatively the same for testing all parts of an Angular app, you should be able to extend your testing knowledge to both factories and filters. Take a look at this <a href="https://github.com/mjhea0/thinkful-mentor/tree/master/angular/projects/angular-unit-test-demo/app/components">example</a> for help getting started. Once you feel comfortable with factories, controllers, and filters, move on to testing more difficult components, like directives, resources, and animations. Good luck!</p>

<p>Comment below with questions.</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Node with Docker - continuous integration and delivery]]></title>
    <link href="http://mjhea0.github.com/blog/2015/03/06/node-with-docker-continuous-integration-and-delivery/"/>
    
    <updated>2015-03-06T08:05:00-07:00</updated>
    <id>http://mjhea0.github.com/blog/2015/03/06/node-with-docker-continuous-integration-and-delivery</id>
    
    <content type="html"><![CDATA[<p>Welcome.</p>

<p><strong>This is a quick start guide for spinning up Docker containers that run NodeJS and Redis. We’ll look at a basic development workflow to manage the local development of an app, on Mac OS X, as well as continuous integration and delivery, step by step.</strong></p>

<div style="text-align:center;">
  <img src="https://raw.githubusercontent.com/mjhea0/node-docker-workflow/master/_presentation/images/logo.png" style="max-width: 100%; border:0;" alt="logo">
</div>

<p><br></p>

<p><em>Updated on May 13th, 2015</em> - Upgraded to the latest versions of Docker (1.6.1), boot2docker (1.6.1), and Docker Compose (1.2.0)</p>

<blockquote>
<p>This tutorial is ported from <a href="https://realpython.com/blog/python/docker-in-action-fitter-happier-more-productive/">Docker in Action - Fitter, Happier, More Productive</a>.</p>
</blockquote>

<p>We&#39;ll be using the following tools, technologies, and services in this post:</p>

<ol>
<li><a href="http://nodejs.org/">NodeJS</a> v0.12.0</li>
<li><a href="http://expressjs.com/">Express</a> v3.4.8</li>
<li><a href="http://redis.io/">Redis</a> v2.8.19</li>
<li><a href="https://www.docker.com/">Docker</a> v1.6.1</li>
<li><a href="http://boot2docker.io/">boot2docker</a> v1.6.1</li>
<li><a href="https://docs.docker.com/compose/">Docker Compose</a> v1.2.0</li>
<li><a href="https://hub.docker.com/">Docker Hub</a></li>
<li><a href="https://circleci.com/">CircleCI</a></li>
<li><a href="https://www.digitalocean.com/">Digital Ocean</a></li>
<li><a href="https://www.tutum.co/">Tutum</a></li>
</ol>

<blockquote>
<p>There&#39;s slides too! Check them out <a href="http://realpython.github.io/fitter-happier-docker/node.html#/">here</a>, if interested.</p>
</blockquote>

<h2>Docker?</h2>

<p>Be sure you understand the Docker basics before diving into this tutorial. Check out the official <a href="https://www.docker.com/whatisdocker/">&quot;What is Docker?&quot;</a> guide for an excellent intro.</p>

<p>In short, with Docker, you can truly mimic your production environment on your local machine. No more having to debug environment specific bugs or worrying that your app will perform differently in production.</p>

<ol>
<li>Version control for infrastructure</li>
<li>Easily distribute/recreate your entire development environment</li>
<li>Build once, run anywhere – aka The Holy Grail!</li>
</ol>

<h3>Docker-specific terms</h3>

<ul>
<li>A <em>Dockerfile is a file that contains a set of instructions used to create an *image</em>.</li>
<li>An <em>image</em> is used to build and save snapshots (the state) of an environment.</li>
<li>A <em>container</em> is an instantiated, live <em>image</em> that runs a collection of processes.</li>
</ul>

<blockquote>
<p>Be sure to check out the Docker <a href="https://docs.docker.com/">documentation</a> for more info on <a href="https://docs.docker.com/reference/builder/">Dockerfiles</a>, <a href="https://docs.docker.com/terms/image/">images</a>, and <a href="https://docs.docker.com/terms/container/">containers</a>.</p>
</blockquote>

<h2>Local Setup</h2>

<p>Let&#39;s get your local development environment set up!</p>

<h3>Get Docker</h3>

<p>Follow the download instructions from the guide <a href="https://docs.docker.com/installation/mac/">Installing Docker on Mac OS X</a> to install both Docker and the official boot2docker package. <a href="http://boot2docker.io/">boot2docker</a> is a <em>lightweight</em> Linux distribution designed specifically to run Docker for Windows and Mac OS X users. In essence, it starts a small VM that’s configured to run Docker containers.</p>

<p>Once installed, run the following commands in your project directory to start boot2docker:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>boot2docker init
</span><span class='line'><span class="nv">$ </span>boot2docker up
</span><span class='line'><span class="nv">$ </span><span class="k">$(</span>boot2docker shellinit<span class="k">)</span>
</span></code></pre></td></tr></table></div></figure>

<h3>Get the Project</h3>

<p>Grab the base code from the <a href="https://github.com/mjhea0/node-docker-workflow/releases/tag/base">repo</a>, and add it to your project directory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>└── app
</span><span class='line'>    ├── Dockerfile
</span><span class='line'>    ├── index.js
</span><span class='line'>    ├── package.json
</span><span class='line'>    └── <span class="nb">test</span>
</span><span class='line'>        └── test.js
</span></code></pre></td></tr></table></div></figure>

<h3>Compose Up!</h3>

<p><a href="https://github.com/docker/compose">Docker Compose</a> (Previously known as fig) is an orchestration framework that handles the building and running of multiple services, making it easy to link multiple services together running in different containers. Follow the installation instructions <a href="http://docs.docker.com/compose/install/#install-compose">here</a>, and then test it out to make sure all is well:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>docker-compose --version
</span><span class='line'>docker-compose 1.2.0
</span></code></pre></td></tr></table></div></figure>

<p>Now we just need to define the services - web (NodeJS) and persistence (Redis) in a configuration file called  <em>docker-compose.yml</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">web</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">build</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">./app</span>
</span><span class='line'>  <span class="l-Scalar-Plain">volumes</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="s">&quot;app:/src/app&quot;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">ports</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="s">&quot;80:3000&quot;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">links</span><span class="p-Indicator">:</span>
</span><span class='line'>   <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">redis</span>
</span><span class='line'><span class="l-Scalar-Plain">redis</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">redis:latest</span>
</span><span class='line'>    <span class="l-Scalar-Plain">ports</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="s">&quot;6379:6379&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<p>Here we add the services that make up our basic stack:</p>

<ol>
<li><strong>web</strong>: First, we build the image based on the instructions in the <em>app/Dockerfile</em> - where we setup our Node environment, create a volume, install the required dependencies, and fire up the app running on port 3000. Then we forward that port in the container to port 80 on the host environment - e.g., the boot2docker VM.</li>
<li><strong>redis</strong>: Next, the Redis service is built from the <a href="https://registry.hub.docker.com/_/redis/">image</a> on Docker Hub. Port 6379 is exposed and forwarded.</li>
</ol>

<h3>Profit</h3>

<p>Run <code>docker-compose up</code> to build new images for the NodeJS/Express app and Redis services and then run both processes in new containers. Open your browser and navigate to the IP address associated the boot2docker VM (<code>boot2docker ip</code>). You should see the text, &quot;You have viewed this page 1 times!&quot; in your browser. Refresh. The page counter should increment.</p>

<p>Once done, kill the processes (Ctrl-C). Commit your changes locally, and then push to Github.</p>

<h3>Next Steps</h3>

<p>So, what did we accomplish?</p>

<p>We set up our local environment, detailing the basic process of building an <em>image</em> from a <em>Dockerfile</em> and then creating an instance of the image called a <em>container</em>. We then tied everything together with Docker Compose to build and connect different containers for both the NodeJS/Express app and Redis process.</p>

<p>Need the updated code? Grab it from the <a href="https://github.com/mjhea0/node-docker-workflow/releases/tag/compose">repo</a>.</p>

<p>Next, let’s talk about Continuous Integration&#8230;</p>

<h2>Continuous Integration</h2>

<p>We&#39;ll start with Docker Hub.</p>

<h3>Docker Hub</h3>

<p><a href="https://hub.docker.com/">Docker Hub</a> &quot;manages the lifecycle of distributed apps with cloud services for building and sharing containers and automating workflows&quot;. It&#39;s the Github for Docker images.</p>

<ol>
<li><a href="https://hub.docker.com/account/signup/">Signup</a> using your Github credentials.</li>
<li><a href="http://docs.docker.com/docker-hub/builds/#about-automated-builds">Set up</a> a new automated build. And add your Github repo that you created and pushed to earlier. Just accept all the default options, expect for the &quot;Dockerfile Location&quot; - change that to &quot;/app&quot;. Once complete, Docker Hub will trigger an initial build.</li>
</ol>

<p>Each time you push to Github, Docker Hub will generate a new build from scratch.</p>

<p>Docker Hub acts much like a continuous integration server since it ensures you do not cause a regression that completely breaks the build process when the code base is updated. That said, Docker Hub should be the last test before deployment to either staging or production so let&#39;s use a <em>true</em> continuous integration server to fully test our code before it hits Docker Hub.</p>

<h3>CircleCI</h3>

<p><a href="https://circleci.com/">CircleCI</a> is a CI platform that supports Docker.</p>

<p>Given a Dockerfile, CircleCI builds an image, starts a new container (or containers), and then runs tests inside that container.</p>

<ol>
<li><a href="https://circleci.com/">Sign up</a> with your Github account.</li>
<li>Create a new project using the Github repo you created.</li>
</ol>

<p>Next we need to add a configuration file, called <em>circle.yml</em>, to the root folder of the project so that CircleCI can properly create the build.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">machine</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">services</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">docker</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">dependencies</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">override</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">curl -L https://github.com/docker/compose/releases/download/1.1.0/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose chmod +x /usr/local/bin/docker-compose</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">test</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">override</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">sudo pip install --upgrade docker-compose</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">cd app; mocha</span>
</span></code></pre></td></tr></table></div></figure>

<p>Here, we install Docker Compose, create a new image, and run the container along with our unit tests.</p>

<blockquote>
<p>Notice how we’re using the command <code>docker-compose run -d --no-deps web</code>, to run the web process, instead of <code>docker-compose up</code>. This is because CircleCI already has Redis <a href="https://circleci.com/docs/environment#databases">running</a> and available to us for our tests. So, we just need to run the web process.</p>
</blockquote>

<p>Before we test this out, we need to change some settings on Docker Hub.</p>

<h3>Docker Hub (redux)</h3>

<p>Right now, each push to Github will create a new build. That&#39;s not what we want. Instead, we want CircleCI to run tests against the master branch then <em>after</em> they pass(and only after they pass), a new build should trigger on Docker Hub.</p>

<p>Open your repository on Docker Hub, and make the following updates:</p>

<ol>
<li>Under <em>Settings</em> click <em>Automated Build</em>.</li>
<li>Uncheck the Active box: “When active we will build when new pushes occur”. Save the changes.</li>
<li>Then once again under <em>Settings</em> click <em>Build Triggers</em>.</li>
<li>Change the status to on.</li>
<li>Copy the example curl command – i.e., <code>$ curl --data &quot;build=true&quot; -X POST https://registry.hub.docker.com/u/mjhea0/node-docker-workflow/trigger/84957124-2b85-410d-b602-b48193853b66/</code>.</li>
</ol>

<h3>CircleCI (redux)</h3>

<p>Back on CircleCI, let&#39;s add that curl command as an environment variable:</p>

<ol>
<li>Within the <em>Project Settings</em>, select <em>Environment variables</em>.</li>
<li>Add a new variable with the name &quot;DEPLOY&quot; and paste the curl command as the value.</li>
</ol>

<p>Then add the following code to the bottom of the <em>circle.yml</em> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">deployment</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">hub</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">branch</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">master</span>
</span><span class='line'>    <span class="l-Scalar-Plain">commands</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">$DEPLOY</span>
</span></code></pre></td></tr></table></div></figure>

<p>This simple fires the <code>$DEPLOY</code> variable after our tests pass on the master branch.</p>

<p>Now, let&#39;s test!</p>

<h3>Profit!</h3>

<p>Follow these steps&#8230;</p>

<ol>
<li>Create a new branch</li>
<li>Make changes locally</li>
<li>Issue a pull request</li>
<li>Manually merge once the tests pass</li>
<li>Once the second round passes, a new build is triggered on Docker Hub</li>
</ol>

<p>What&#39;s left? Deployment! Grab the updated <a href="https://github.com/mjhea0/node-docker-workflow/releases/tag/circle">code</a>, if necessary.</p>

<h2>Deployment</h2>

<p>Let&#39;s get our app running on <a href="https://www.digitalocean.com/">Digital Ocean</a>.</p>

<p>After you&#39;ve signed up, create a new Droplet, choose “Applications” and then select the Docker Application.</p>

<p>Once setup, SSH into the server as the ‘root’ user:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>ssh root@&lt;some_ip_address&gt;
</span></code></pre></td></tr></table></div></figure>

<p>Now you just need to clone the repo, install Docker compose, and then you can run your app:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git clone https://github.com/mjhea0/node-docker-workflow.git
</span><span class='line'><span class="nv">$ </span>curl -L https://github.com/docker/compose/releases/download/1.1.0/docker-compose-<span class="sb">`</span>uname -s<span class="sb">`</span>-<span class="sb">`</span>uname -m<span class="sb">`</span> &gt; /usr/local/bin/docker-compose
</span><span class='line'><span class="nv">$ </span>chmod +x /usr/local/bin/docker-compose
</span><span class='line'><span class="nv">$ </span>docker-compose up -d
</span></code></pre></td></tr></table></div></figure>

<p>Sanity check. Navigate to your Droplet’s IP address in the browser. You should see your app.</p>

<p>Nice!</p>

<p>But what about continuous delivery? Instead of having to SSH into the server and clone the new code, the process should be part of our workflow so that once a new build is generated on Docker Hub, the code is updated on Digital Ocean automatically.</p>

<p>Enter <a href="https://www.tutum.co/">Tutum</a>.</p>

<h2>Continuous Delivery</h2>

<p><a href="https://www.tutum.co/">Tutum</a> manages the orchestration and deployment of Docker images and containers. Setup is simple. After you&#39;ve signed up (with Github), you need to add a <a href="https://support.tutum.co/support/solutions/articles/5000523221-your-first-node">Node</a>, which is just a Linux host. We&#39;ll use Digital Ocean.</p>

<p>Start by linking your Digital Ocean account within the &quot;Account Info&quot; area.</p>

<p>Now you can add a new Node. The process is straightforward, but if you need help, please refer to the <a href="https://support.tutum.co/support/solutions/articles/5000523221-your-first-node">official documentation</a>. Just add a name, select a region, and then you&#39;re good to go.</p>

<p>With a Node setup, we can now add a <a href="https://support.tutum.co/support/solutions/articles/5000569899-stacks">Stack</a> of services - <em>web</em> and <em>Redis</em>, in our case - that make up our tech stack. Next, create a new file called <em>tutum.yml</em>, and add the following code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">web</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">mjhea0/node-docker-workflow</span>
</span><span class='line'>  <span class="l-Scalar-Plain">autorestart</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">always</span>
</span><span class='line'>  <span class="l-Scalar-Plain">ports</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="s">&quot;80:3000&quot;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">links</span><span class="p-Indicator">:</span>
</span><span class='line'>   <span class="p-Indicator">-</span> <span class="s">&quot;redis:redis&quot;</span>
</span><span class='line'><span class="l-Scalar-Plain">redis</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">redis</span>
</span><span class='line'>    <span class="l-Scalar-Plain">autorestart</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">always</span>
</span><span class='line'>    <span class="l-Scalar-Plain">ports</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="s">&quot;6379:6379&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<p>Here, we are pulling the images from Docker Hub and building them just like we did with Docker Compose. Notice the difference here, between this file and the <em>docker-compose.yml</em> file. Here, we are not creating images, we&#39;re pulling them in from Docker Hub. It&#39;s essentially the same thing since the most updated build is on Docker Hub.</p>

<p>Now just create a new Stack, adding a name and uploading the <em>tutum.yml</em> file, and click &quot;Create and deploy&quot; to pull in the new images on the Node and then build and run the containers.</p>

<p>Once done, you can view your live app!</p>

<blockquote>
<p>Note: You lose the &quot;magic&quot; of Tutum when running things in a single host, as we&#39;re currently doing. In a real world scenario you&#39;d want to deploy multiple web containers, load balance across them and have them live on different hosts, sharing a single REDIS cache. We may look at this in a future post, focusing solely on delivery.</p>
</blockquote>

<p>Before we call it quits, we need to sync Docker Hub with Tutum so that when a new build is created on Docker Hub, the services are rebuilt and redeployed on Tutum - automatically!</p>

<p>Tutum makes this simple.</p>

<p>Under the <em>Services</em> tab, click the <em>web</em> service, and, finally, click the <em>Webhooks tab</em>. To create a new hook, simply add a name and then click <em>Add</em>. Copy the URL, and then navigate back to Docker Hub. Once there, click the <em>Webhook</em> link and add a new hook, pasting in the URL.</p>

<p>Now after a build is created on Docker Hub, a POST request is sent to that URL, which, in turn, triggers a redeploy on Tutum. Boom!</p>

<h2>Conclusion</h2>

<p>As always comment below if you have questions. If you manage a different workflow for continuous integration and delivery, please post the details below. Grab the final code from the <a href="https://github.com/mjhea0/node-docker-workflow">repo</a>.</p>

<p>See you next time!</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[PostgreSQL and NodeJS]]></title>
    <link href="http://mjhea0.github.com/blog/2015/02/12/postgresql-and-nodejs/"/>
    
    <updated>2015-02-12T19:07:00-07:00</updated>
    <id>http://mjhea0.github.com/blog/2015/02/12/postgresql-and-nodejs</id>
    
    <content type="html"><![CDATA[<p><strong>Today we&#39;re going to build a CRUD todo single page application with Node, Express, Angular, and PostgreSQL.</strong></p>

<p><img src="https://raw.githubusercontent.com/mjhea0/node-postgres-todo/master/_blog/node-todo-postges.jpg" alt="node todo app"></p>

<blockquote>
<p>Technologies/Tools used - <a href="http://nodejs.org/">Node</a> v0.10.36, <a href="https://www.npmjs.com/package/express">Express</a> v4.11.1, <a href="https://angularjs.org/">Angular</a> v1.3.12.</p>
</blockquote>

<h2>Project Setup</h2>

<p>Start by installing the <a href="http://expressjs.com/starter/generator.html">Express generator</a> if you don&#39;t already have it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>npm install -g express-generator@4
</span></code></pre></td></tr></table></div></figure>

<p>Then create a new project and install the dependencies:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>express node-postgres-todo
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>node-postgres-todo <span class="o">&amp;&amp;</span> npm install
</span></code></pre></td></tr></table></div></figure>

<p>Add <a href="https://github.com/isaacs/node-supervisor">Supervisor</a> to watch for code changes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>npm install supervisor -g
</span></code></pre></td></tr></table></div></figure>

<p>Update the ‘start’ script in the <em>package.json</em> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="s2">&quot;scripts&quot;</span><span class="err">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;start&quot;</span><span class="p">:</span> <span class="s2">&quot;supervisor ./bin/www&quot;</span>
</span><span class='line'><span class="p">}</span><span class="err">,</span>
</span></code></pre></td></tr></table></div></figure>

<p>Run the app:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>npm start
</span></code></pre></td></tr></table></div></figure>

<p>Then navigate to <a href="http://localhost:3000/">http://localhost:3000/</a> in your browser. You should see the &quot;Welcome to Express&quot; text.</p>

<h2>Postgres Setup</h2>

<blockquote>
<p>Need to setup Postgres? On a Mac? Check out <a href="http://postgresapp.com/">Postgres.app</a>.</p>
</blockquote>

<p>With your Postgres server up and listening on port 5432, making a database connection is easy with the <a href="https://www.npmjs.com/package/pg">pg</a> library:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>npm install pg --save
</span></code></pre></td></tr></table></div></figure>

<p>Now let’s set up a simple table creation script:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">pg</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;pg&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">connectionString</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">DATABASE_URL</span> <span class="o">||</span> <span class="s1">&#39;postgres://localhost:5432/todo&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">client</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">pg</span><span class="p">.</span><span class="nx">Client</span><span class="p">(</span><span class="nx">connectionString</span><span class="p">);</span>
</span><span class='line'><span class="nx">client</span><span class="p">.</span><span class="nx">connect</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">query</span> <span class="o">=</span> <span class="nx">client</span><span class="p">.</span><span class="nx">query</span><span class="p">(</span><span class="s1">&#39;CREATE TABLE items(id SERIAL PRIMARY KEY, text VARCHAR(40) not null, complete BOOLEAN)&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">query</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;end&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="nx">client</span><span class="p">.</span><span class="nx">end</span><span class="p">();</span> <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>Save this as <em>database.js</em> in a new folder called &quot;models&quot;.</p>

<p>Here we create a new instance of <code>Client</code> to interact with the database and then establish communication with it via the <code>connect()</code> method. We then set run a SQL query via the <code>query()</code> method. Communication is closed via the <code>end()</code> method. Be sure to check out the <a href="https://github.com/brianc/node-postgres/wiki/Client">documentation</a> for more info.</p>

<p>Make sure you have a database called &quot;todo&quot; setup, and then run the script to setup the table and subsequent fields:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>node models/database.js
</span></code></pre></td></tr></table></div></figure>

<p>Verify the table/schema creation in <a href="http://postgresguide.com/utilities/psql.html">psql</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">michaelherman</span><span class="o">=</span><span class="c"># \c todo</span>
</span><span class='line'>You are now connected to database <span class="s2">&quot;todo&quot;</span> as user <span class="s2">&quot;michaelherman&quot;</span>.
</span><span class='line'><span class="nv">todo</span><span class="o">=</span><span class="c"># \d+ items</span>
</span><span class='line'>                                                     Table <span class="s2">&quot;public.items&quot;</span>
</span><span class='line'>  Column  |         Type          |                     Modifiers                      | Storage  | Stats target | Description
</span><span class='line'>----------+-----------------------+----------------------------------------------------+----------+--------------+-------------
</span><span class='line'> id       | integer               | not null default nextval<span class="o">(</span><span class="s1">&#39;items_id_seq&#39;</span>::regclass<span class="o">)</span> | plain    |              |
</span><span class='line'> text     | character varying<span class="o">(</span>40<span class="o">)</span> | not null                                           | extended |              |
</span><span class='line'> <span class="nb">complete</span> | boolean               |                                                    | plain    |              |
</span><span class='line'>Indexes:
</span><span class='line'>    <span class="s2">&quot;items_pkey&quot;</span> PRIMARY KEY, btree <span class="o">(</span>id<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>With the database connection setup along with the &quot;items&quot; table, we can now configure the CRUD portion of our app.</p>

<h2>Server-Side: Routes</h2>

<p>Let’s keep it simple by adding all endpoints to the <em>index.js</em> file within the &quot;routes&quot; folder. Make sure to update the imports:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">router</span> <span class="o">=</span> <span class="nx">express</span><span class="p">.</span><span class="nx">Router</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">pg</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;pg&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">connectionString</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">DATABASE_URL</span> <span class="o">||</span> <span class="s1">&#39;postgres://localhost:5432/todo&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>

<p>Now, let’s add each endpoint.</p>

<table style="font-size:16px;border-spacing:10px 0px;border-collapse:separate;border:1px solid black;">
<thead>
<tr>
<th style="text-align:center"><strong>Function</strong></th>
<th style="text-align:center"><strong>URL</strong></th>
<th style="text-align:center"><strong>Action</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>CREATE</td>
<td>/api/v1/todos</td>
<td>Create a single todo</td>
</tr>
<tr>
<td>READ</td>
<td>/api/v1/todos</td>
<td>Get all todos</td>
</tr>
<tr>
<td>UPDATE</td>
<td>/api/v1/todos/:todo_id</td>
<td>Update a single todo</td>
</tr>
<tr>
<td>DELETE</td>
<td>/api/v1/todos/:todo_id</td>
<td>Delete a single todo</td>
</tr>
</tbody>
</table>

<p><br></p>

<p>Follow along with the inline comments below for an explanation of what’s happening. Also, be sure to check out the <a href="https://github.com/brianc/node-postgres/wiki/Connection">pg documentation</a> to learn about connection pooling. How does that differ from <code>pg.Client</code>?</p>

<h3>Create</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/api/v1/todos&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">results</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Grab data from http request</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="p">{</span><span class="nx">text</span><span class="o">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">text</span><span class="p">,</span> <span class="nx">complete</span><span class="o">:</span> <span class="kc">false</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Get a Postgres client from the connection pool</span>
</span><span class='line'>    <span class="nx">pg</span><span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="nx">connectionString</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">client</span><span class="p">,</span> <span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// SQL Query &gt; Insert Data</span>
</span><span class='line'>        <span class="nx">client</span><span class="p">.</span><span class="nx">query</span><span class="p">(</span><span class="s2">&quot;INSERT INTO items(text, complete) values($1, $2)&quot;</span><span class="p">,</span> <span class="p">[</span><span class="nx">data</span><span class="p">.</span><span class="nx">text</span><span class="p">,</span> <span class="nx">data</span><span class="p">.</span><span class="nx">complete</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// SQL Query &gt; Select Data</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">query</span> <span class="o">=</span> <span class="nx">client</span><span class="p">.</span><span class="nx">query</span><span class="p">(</span><span class="s2">&quot;SELECT * FROM items ORDER BY id ASC&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Stream results back one row at a time</span>
</span><span class='line'>        <span class="nx">query</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;row&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">row</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">results</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">row</span><span class="p">);</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// After all data is returned, close connection and return results</span>
</span><span class='line'>        <span class="nx">query</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;end&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">client</span><span class="p">.</span><span class="nx">end</span><span class="p">();</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">results</span><span class="p">);</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Handle Errors</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>Test this out via Curl in your terminal:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>curl --data <span class="s2">&quot;text=test&amp;complete=false&quot;</span> http://127.0.0.1:3000/api/v1/todos
</span></code></pre></td></tr></table></div></figure>

<p>Then confirm that the data was INSERT’ed correctly into the database via psql:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">todo</span><span class="o">=</span><span class="c"># SELECT * FROM items ORDER BY id ASC;</span>
</span><span class='line'> id | text  | <span class="nb">complete</span>
</span><span class='line'>----+-------+----------
</span><span class='line'>  1 | <span class="nb">test</span>  | f
</span><span class='line'><span class="o">(</span>1 row<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>

<h3>Read</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/api/v1/todos&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">results</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Get a Postgres client from the connection pool</span>
</span><span class='line'>    <span class="nx">pg</span><span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="nx">connectionString</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">client</span><span class="p">,</span> <span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// SQL Query &gt; Select Data</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">query</span> <span class="o">=</span> <span class="nx">client</span><span class="p">.</span><span class="nx">query</span><span class="p">(</span><span class="s2">&quot;SELECT * FROM items ORDER BY id ASC;&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Stream results back one row at a time</span>
</span><span class='line'>        <span class="nx">query</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;row&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">row</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">results</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">row</span><span class="p">);</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// After all data is returned, close connection and return results</span>
</span><span class='line'>        <span class="nx">query</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;end&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">client</span><span class="p">.</span><span class="nx">end</span><span class="p">();</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">results</span><span class="p">);</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Handle Errors</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>Add a few more rows of data via Curl, and then test the endpoint out in your browser at <a href="http://localhost:3000/api/v1/todos">http://localhost:3000/api/v1/todos</a>. You should see an array of JSON objects:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="err">id:</span> <span class="err">1,</span>
</span><span class='line'>        <span class="err">text:</span> <span class="nt">&quot;test&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="err">complete:</span> <span class="err">false</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="err">id:</span> <span class="err">2,</span>
</span><span class='line'>        <span class="err">text:</span> <span class="nt">&quot;test2&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="err">complete:</span> <span class="err">false</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="err">id:</span> <span class="err">3,</span>
</span><span class='line'>        <span class="err">text:</span> <span class="nt">&quot;test3&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="err">complete:</span> <span class="err">false</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>

<h3>Update</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">put</span><span class="p">(</span><span class="s1">&#39;/api/v1/todos/:todo_id&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">results</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Grab data from the URL parameters</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">id</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">todo_id</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Grab data from http request</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="p">{</span><span class="nx">text</span><span class="o">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">text</span><span class="p">,</span> <span class="nx">complete</span><span class="o">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">complete</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Get a Postgres client from the connection pool</span>
</span><span class='line'>    <span class="nx">pg</span><span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="nx">connectionString</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">client</span><span class="p">,</span> <span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// SQL Query &gt; Update Data</span>
</span><span class='line'>        <span class="nx">client</span><span class="p">.</span><span class="nx">query</span><span class="p">(</span><span class="s2">&quot;UPDATE items SET text=($1), complete=($2) WHERE id=($3)&quot;</span><span class="p">,</span> <span class="p">[</span><span class="nx">data</span><span class="p">.</span><span class="nx">text</span><span class="p">,</span> <span class="nx">data</span><span class="p">.</span><span class="nx">complete</span><span class="p">,</span> <span class="nx">id</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// SQL Query &gt; Select Data</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">query</span> <span class="o">=</span> <span class="nx">client</span><span class="p">.</span><span class="nx">query</span><span class="p">(</span><span class="s2">&quot;SELECT * FROM items ORDER BY id ASC&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Stream results back one row at a time</span>
</span><span class='line'>        <span class="nx">query</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;row&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">row</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">results</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">row</span><span class="p">);</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// After all data is returned, close connection and return results</span>
</span><span class='line'>        <span class="nx">query</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;end&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">client</span><span class="p">.</span><span class="nx">end</span><span class="p">();</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">results</span><span class="p">);</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Handle Errors</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>Again, test via Curl:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>curl -X PUT --data <span class="s2">&quot;text=test&amp;complete=true&quot;</span> http://127.0.0.1:3000/api/v1/todos/1
</span></code></pre></td></tr></table></div></figure>

<p>Navigate to <a href="http://localhost:3000/api/v1/todos">http://localhost:3000/api/v1/todos</a> to make sure the data has been updated correctly.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="err">id:</span> <span class="err">1,</span>
</span><span class='line'>        <span class="err">text:</span> <span class="nt">&quot;test&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="err">complete:</span> <span class="err">true</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="err">id:</span> <span class="err">2,</span>
</span><span class='line'>        <span class="err">text:</span> <span class="nt">&quot;test2&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="err">complete:</span> <span class="err">false</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="err">id:</span> <span class="err">3,</span>
</span><span class='line'>        <span class="err">text:</span> <span class="nt">&quot;test3&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="err">complete:</span> <span class="err">false</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>

<h3>Delete</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">router</span><span class="p">.</span><span class="k">delete</span><span class="p">(</span><span class="s1">&#39;/api/v1/todos/:todo_id&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">results</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Grab data from the URL parameters</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">id</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">todo_id</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Get a Postgres client from the connection pool</span>
</span><span class='line'>    <span class="nx">pg</span><span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="nx">connectionString</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">client</span><span class="p">,</span> <span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// SQL Query &gt; Delete Data</span>
</span><span class='line'>        <span class="nx">client</span><span class="p">.</span><span class="nx">query</span><span class="p">(</span><span class="s2">&quot;DELETE FROM items WHERE id=($1)&quot;</span><span class="p">,</span> <span class="p">[</span><span class="nx">id</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// SQL Query &gt; Select Data</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">query</span> <span class="o">=</span> <span class="nx">client</span><span class="p">.</span><span class="nx">query</span><span class="p">(</span><span class="s2">&quot;SELECT * FROM items ORDER BY id ASC&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Stream results back one row at a time</span>
</span><span class='line'>        <span class="nx">query</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;row&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">row</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">results</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">row</span><span class="p">);</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// After all data is returned, close connection and return results</span>
</span><span class='line'>        <span class="nx">query</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;end&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">client</span><span class="p">.</span><span class="nx">end</span><span class="p">();</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">results</span><span class="p">);</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Handle Errors</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>Final Curl test:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>curl -X DELETE http://127.0.0.1:3000/api/v1/todos/3
</span></code></pre></td></tr></table></div></figure>

<p>And you should now have:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="err">id:</span> <span class="err">1,</span>
</span><span class='line'>        <span class="err">text:</span> <span class="nt">&quot;test&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="err">complete:</span> <span class="err">true</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="err">id:</span> <span class="err">2,</span>
</span><span class='line'>        <span class="err">text:</span> <span class="nt">&quot;test2&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="err">complete:</span> <span class="err">false</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>

<h2>Refactoring</h2>

<p>Before we jump to the client-side to add Angular, be aware that our code should be refactored to address a few issues. We’ll handle this later on in this tutorial, but this is an excellent opportunity to refactor the code on your own. Good luck!</p>

<h2>Client-Side: Angular</h2>

<p>Let’s dive right in to Angular.</p>

<blockquote>
<p>Keep in mind that this is not meant to be an exhaustive tutorial. If you’re new to Angular I suggest following my &quot;AngularJS by Example&quot; tutorial - <a href="https://github.com/mjhea0/thinkful-angular">Building a Bitcoin Investment Calculator</a>.</p>
</blockquote>

<h3>Module</h3>

<p>Create a file called <em>app.js</em> in the &quot;public/javascripts&quot; folder. This file will house our Angular module and controller:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;nodeTodo&#39;</span><span class="p">,</span> <span class="p">[])</span>
</span><span class='line'>
</span><span class='line'><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;mainController&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">$http</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">formData</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">todoData</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Get all todos</span>
</span><span class='line'>    <span class="nx">$http</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/api/v1/todos&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">success</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">$scope</span><span class="p">.</span><span class="nx">todoData</span> <span class="o">=</span> <span class="nx">data</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'>        <span class="p">})</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Error: &#39;</span> <span class="o">+</span> <span class="nx">error</span><span class="p">);</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>Here we define our module as well as the controller. Within the controller we are using the <a href="https://docs.angularjs.org/api/ng/service/$http"><code>$http</code></a> service to make an AJAX request to the <code>&#39;/api/v1/todos&#39;</code> endpoint and then updating the scope accordingly.</p>

<p>What else is going on?</p>

<p>Well, we’re <a href="https://docs.angularjs.org/guide/di">injecting</a> the <code>$scope</code> and <code>$http</code> services. Also, we’re defining and updating <code>$scope</code> to handle <a href="https://docs.angularjs.org/guide/databinding">binding</a>.</p>

<h3>Update <code>/</code> Route</h3>

<p>Let’s update the main route in <em>index.js</em> within the &quot;routes&quot; folder:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">sendFile</span><span class="p">(</span><span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="s1">&#39;../views&#39;</span><span class="p">,</span> <span class="s1">&#39;index.html&#39;</span><span class="p">));</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>So when the end user hits the main endpoint, we send the <em>index.html</em> file. This file will contain our HTML and Angular templates.</p>

<p>Make sure to add the following dependency as well:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;path&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<h3>View</h3>

<p>Now, let’s add our basic Angular view within <em>index.html</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">ng-app=</span><span class="s">&quot;nodeTodo&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;title&gt;</span>Todo App - with Node + Express + Angular + PostgreSQL<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;viewport&quot;</span> <span class="na">content=</span><span class="s">&quot;width=device-width, initial-scale=1.0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&quot;http://netdna.bootstrapcdn.com/bootstrap/3.3.1/css/bootstrap.min.css&quot;</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">media=</span><span class="s">&quot;screen&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;body</span> <span class="na">ng-controller=</span><span class="s">&quot;mainController&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;ul</span> <span class="na">ng-repeat=</span><span class="s">&quot;todo in todoData&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;li&gt;&lt;/li&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;http://code.jquery.com/jquery-1.11.2.min.js&quot;</span> <span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;http://netdna.bootstrapcdn.com/bootstrap/3.3.1/js/bootstrap.min.js&quot;</span> <span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.3.12/angular.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;javascripts/app.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p>This should all be straightforward. We bootstrap Angular - <code>ng-app=&quot;nodeTodo&quot;</code>, define the scope of the controller - <code>ng-controller=&quot;mainController&quot;</code> - and then use <code>ng-repeat</code> to loop through the <code>todoData</code> object, adding each individual todo to the page.</p>

<h3>Module (round two)</h3>

<p>Next, let’s update the module to handle the Create and Delete functions:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Create a new todo</span>
</span><span class='line'><span class="nx">$http</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/api/v1/todos&#39;</span><span class="p">,</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">formData</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">success</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">formData</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">todoData</span> <span class="o">=</span> <span class="nx">data</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Error: &#39;</span> <span class="o">+</span> <span class="nx">error</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Delete a todo</span>
</span><span class='line'><span class="nx">$http</span><span class="p">.</span><span class="k">delete</span><span class="p">(</span><span class="s1">&#39;/api/v1/todos/&#39;</span> <span class="o">+</span> <span class="nx">todoID</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">success</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">todoData</span> <span class="o">=</span> <span class="nx">data</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Error: &#39;</span> <span class="o">+</span> <span class="nx">data</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>Now, let’s update our view…</p>

<h3>View (round two)</h3>

<p>Simply update each list item like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;li&gt;&lt;input</span> <span class="na">type=</span><span class="s">&quot;checkbox&quot;</span> <span class="na">ng-click=</span><span class="s">&quot;deleteTodo(todo.id)&quot;</span><span class="nt">&gt;</span><span class="ni">&amp;nbsp;</span>{{ todo.text }}<span class="nt">&lt;/li&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p>This uses the <a href="https://docs.angularjs.org/api/ng/directive/ngClick"><code>ng-click</code></a> directive to call the <code>deleteTodo()</code> function - which we still need to define - that takes a unique <code>id</code> associated with each todo as an argument.</p>

<h3>Module (round three)</h3>

<p>Update the controller:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Delete a todo</span>
</span><span class='line'><span class="nx">$scope</span><span class="p">.</span><span class="nx">deleteTodo</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">todoID</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$http</span><span class="p">.</span><span class="k">delete</span><span class="p">(</span><span class="s1">&#39;/api/v1/todos/&#39;</span> <span class="o">+</span> <span class="nx">todoID</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">success</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">$scope</span><span class="p">.</span><span class="nx">todoData</span> <span class="o">=</span> <span class="nx">data</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'>        <span class="p">})</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Error: &#39;</span> <span class="o">+</span> <span class="nx">data</span><span class="p">);</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>

<p>We simply wrapped the delete functionality in the <code>deleteTodo()</code> function. Test this out. Make sure that when you click a check box the todo is removed.</p>

<h3>View (round three)</h3>

<p>To handle the creation of a new todo, we need to add an HTML form:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;form&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;form-group&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">class=</span><span class="s">&quot;form-control input-lg&quot;</span> <span class="na">placeholder=</span><span class="s">&quot;Add a todo...&quot;</span> <span class="na">ng-model=</span><span class="s">&quot;formData.text&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">class=</span><span class="s">&quot;btn btn-primary btn-lg&quot;</span> <span class="na">ng-click=</span><span class="s">&quot;createTodo()&quot;</span><span class="nt">&gt;</span>Add Todo<span class="nt">&lt;/button&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/form&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;ul</span> <span class="na">ng-repeat=</span><span class="s">&quot;todo in todoData&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li&gt;&lt;input</span> <span class="na">type=</span><span class="s">&quot;checkbox&quot;</span> <span class="na">ng-click=</span><span class="s">&quot;deleteTodo(todo.id)&quot;</span><span class="nt">&gt;</span><span class="ni">&amp;nbsp;</span>{{ todo.text }}<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p>Again, we use <code>ng-click</code> to call a function in the controller.</p>

<h3>Module (round four)</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Create a new todo</span>
</span><span class='line'><span class="nx">$scope</span><span class="p">.</span><span class="nx">createTodo</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">todoID</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$http</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/api/v1/todos&#39;</span><span class="p">,</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">formData</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">success</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">$scope</span><span class="p">.</span><span class="nx">formData</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>            <span class="nx">$scope</span><span class="p">.</span><span class="nx">todoData</span> <span class="o">=</span> <span class="nx">data</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'>        <span class="p">})</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Error: &#39;</span> <span class="o">+</span> <span class="nx">error</span><span class="p">);</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>

<p>Test this out!</p>

<h2>View (round four)</h2>

<p>With the main functionality done, let’s update the front-end to make it look, well, presentable.</p>

<p><strong>HTML</strong>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">ng-app=</span><span class="s">&quot;nodeTodo&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;title&gt;</span>Todo App - with Node + Express + Angular + PostgreSQL<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;viewport&quot;</span> <span class="na">content=</span><span class="s">&quot;width=device-width, initial-scale=1.0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- styles --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&quot;http://netdna.bootstrapcdn.com/bootstrap/3.3.1/css/bootstrap.min.css&quot;</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">media=</span><span class="s">&quot;screen&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&quot;stylesheets/style.css&quot;</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">media=</span><span class="s">&quot;screen&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;body</span> <span class="na">ng-controller=</span><span class="s">&quot;mainController&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;header&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;h1&gt;</span>Todo App<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>        <span class="nt">&lt;hr&gt;</span>
</span><span class='line'>        <span class="nt">&lt;h1</span> <span class="na">class=</span><span class="s">&quot;lead&quot;</span><span class="nt">&gt;</span>Node + Express + Angular + PostgreSQL<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;todo-form&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;form&gt;</span>
</span><span class='line'>          <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;form-group&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">class=</span><span class="s">&quot;form-control input-lg&quot;</span> <span class="na">placeholder=</span><span class="s">&quot;Enter text...&quot;</span> <span class="na">ng-model=</span><span class="s">&quot;formData.text&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>          <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">class=</span><span class="s">&quot;btn btn-primary btn-lg btn-block&quot;</span> <span class="na">ng-click=</span><span class="s">&quot;createTodo()&quot;</span><span class="nt">&gt;</span>Add Todo<span class="nt">&lt;/button&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/form&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>      <span class="nt">&lt;br&gt;</span>
</span><span class='line'>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;todo-list&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;ul</span> <span class="na">ng-repeat=</span><span class="s">&quot;todo in todoData&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;li&gt;&lt;h3&gt;&lt;input</span> <span class="na">class=</span><span class="s">&quot;lead&quot;</span> <span class="na">type=</span><span class="s">&quot;checkbox&quot;</span> <span class="na">ng-click=</span><span class="s">&quot;deleteTodo(todo.id)&quot;</span><span class="nt">&gt;</span><span class="ni">&amp;nbsp;</span>{{ todo.text }}<span class="nt">&lt;/li&gt;&lt;/h3&gt;&lt;hr&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- scripts --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;http://code.jquery.com/jquery-1.11.2.min.js&quot;</span> <span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;http://netdna.bootstrapcdn.com/bootstrap/3.3.1/js/bootstrap.min.js&quot;</span> <span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.3.12/angular.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;javascripts/app.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p><strong>CSS</strong>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">body</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">padding</span><span class="o">:</span> <span class="m">50px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">font</span><span class="o">:</span> <span class="m">14px</span> <span class="s2">&quot;Lucida Grande&quot;</span><span class="o">,</span> <span class="n">Helvetica</span><span class="o">,</span> <span class="n">Arial</span><span class="o">,</span> <span class="k">sans-serif</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nt">a</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">color</span><span class="o">:</span> <span class="m">#00B7FF</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nt">ul</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">list-style-type</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class='line'>  <span class="k">padding-left</span><span class="o">:</span> <span class="m">10px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.container</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">max-width</span><span class="o">:</span> <span class="m">400px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">background-color</span><span class="o">:</span> <span class="m">#eeeeee</span><span class="p">;</span>
</span><span class='line'>  <span class="k">border</span><span class="o">:</span> <span class="m">1px</span> <span class="k">solid</span> <span class="nb">black</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.header</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">text-align</span><span class="o">:</span> <span class="k">center</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>How’s that? Not up to par? Continue working on it on your end.</p>

<h2>Refactoring (for real)</h2>

<p>Now that we added the front-end functionality, let’s update our application’s structure and refactor parts of the code.</p>

<h3>Structure</h3>

<p>Since our application is logically split between the client and server, let’s do the same for our project structure. So, make the following changes to your folder structure:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>├── app.js
</span><span class='line'>├── bin
</span><span class='line'>│   └── www
</span><span class='line'>├── client
</span><span class='line'>│   ├── public
</span><span class='line'>│   │   ├── javascripts
</span><span class='line'>│   │   │   └── app.js
</span><span class='line'>│   │   └── stylesheets
</span><span class='line'>│   │       └── style.css
</span><span class='line'>│   └── views
</span><span class='line'>│       └── index.html
</span><span class='line'>├── config.js
</span><span class='line'>├── package.json
</span><span class='line'>└── server
</span><span class='line'>    ├── models
</span><span class='line'>    │   └── database.js
</span><span class='line'>    └── routes
</span><span class='line'>        └── index.js
</span></code></pre></td></tr></table></div></figure>

<p>Now, we need to make a few updates to the code:</p>

<p><em>server/routes/index.js</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">res</span><span class="p">.</span><span class="nx">sendFile</span><span class="p">(</span><span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="s1">&#39;../&#39;</span><span class="p">,</span> <span class="s1">&#39;../&#39;</span><span class="p">,</span> <span class="s1">&#39;client&#39;</span><span class="p">,</span> <span class="s1">&#39;views&#39;</span><span class="p">,</span> <span class="s1">&#39;index.html&#39;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>

<p><em>app.js</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">routes</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./server/routes/index&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<p><em>app.js</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="kr">static</span><span class="p">(</span><span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="s1">&#39;./client&#39;</span><span class="p">,</span> <span class="s1">&#39;public&#39;</span><span class="p">)));</span>
</span></code></pre></td></tr></table></div></figure>

<h3>Configuration</h3>

<p>Next, let’s move the <code>connectionString</code> variable - which specifies the database URI (<code>process.env.DATABASE_URL || &#39;postgres://localhost:5432/todo&#39;;</code>) - to a configuration file since we are reusing the same same connection throughout our application.</p>

<p>Create a file called <em>config.js</em> in the root directory, and then add the following code to it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">connectionString</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">DATABASE_URL</span> <span class="o">||</span> <span class="s1">&#39;postgres://localhost:5432/todo&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">connectionString</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>

<p>Then update the <code>connectionString</code> variable in both <em>server/models/database.js</em> and <em>server/routes/index.js</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">connectionString</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="s1">&#39;../&#39;</span><span class="p">,</span> <span class="s1">&#39;../&#39;</span><span class="p">,</span> <span class="s1">&#39;config&#39;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>

<p>And make sure to add <code>var path = require(&#39;path&#39;);</code> to the former file as well.</p>

<h3>Utility Function</h3>

<p>Did you notice in our routes that we are reusing the same code in each of the CRUD functions:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// SQL Query &gt; Select Data</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">query</span> <span class="o">=</span> <span class="nx">client</span><span class="p">.</span><span class="nx">query</span><span class="p">(</span><span class="s2">&quot;SELECT * FROM items ORDER BY id ASC&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Stream results back one row at a time</span>
</span><span class='line'><span class="nx">query</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;row&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">row</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">results</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">row</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// After all data is returned, close connection and return results</span>
</span><span class='line'><span class="nx">query</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;end&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">client</span><span class="p">.</span><span class="nx">end</span><span class="p">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">results</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Handle Errors</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>We should abstract that out into a utility function so we&#39;re not duplicating code. Do this on your own, and then post a link to your code in the comments for review.</p>

<h2>Conclusion and next steps</h2>

<p>That&#39;s it! Now, since there&#39;s a number of moving pieces here, please review how each piece fits into the overall process and whether each is part of the client or server-side. Comment below with questions. Grab the code from the <a href="https://github.com/mjhea0/node-postgres-todo">repo</a>.</p>

<p><br><hr><br></p>

<p><strong>Finally, this app is far from finished. What else do we need to do?</strong></p>

<ol>
<li>Handle Permissions via <a href="http://passportjs.org/">passport.js</a></li>
<li>Add a task runner - like <a href="http://gulpjs.com/">Gulp</a></li>
<li>Test with <a href="http://mochajs.org/">Mocha</a> and <a href="http://chaijs.com/">Chai</a></li>
<li>Check test coverage with <a href="https://github.com/gotwarlost/istanbul">Istanbul</a></li>
<li>Add <a href="https://docs.angularjs.org/api/ng/service/$q">promises</a></li>
<li>Use <a href="http://bower.io/">Bower</a> for managing client-side dependencies</li>
<li>Utilize Angular <a href="https://docs.angularjs.org/api/ngRoute/provider/$routeProvider">Routing</a>, <a href="https://docs.angularjs.org/guide/forms">form validation</a>, <a href="https://docs.angularjs.org/guide/services">Services</a>, and <a href="https://docs.angularjs.org/guide/templates">Templates</a></li>
<li>Handle updates/PUT requests</li>
<li>Update the Express <a href="http://expressjs.com/guide/using-template-engines.html">View Engine</a> to HTML</li>
<li>Better manage the database layer by adding an ORM - like <a href="http://sequelizejs.com/">Sequelize</a> - and a means of managing <a href="https://sequelize.readthedocs.org/en/latest/docs/migrations/">migrations</a></li>
</ol>

<p>What else? Comment below.</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Sublime Text for Web Developers]]></title>
    <link href="http://mjhea0.github.com/blog/2015/02/05/sublime-text-for-web-developers/"/>
    
    <updated>2015-02-05T19:07:00-07:00</updated>
    <id>http://mjhea0.github.com/blog/2015/02/05/sublime-text-for-web-developers</id>
    
    <content type="html"><![CDATA[<p><a href="http://www.sublimetext.com/3">Sublime Text 3</a> (ST3) is a powerful editor just as it is. But if you want to step up your game, you need to take advantage of all that ST3 has to offer by learning the keyboard shortcuts and customizing the editor to meet your individual needs&#8230;</p>

<blockquote>
<p><strong>NOTE</strong>: This tutorial is meant for Mac OS X users, utilizing HTML, CSS, and JavaScript/jQuery.</p>
</blockquote>

<p>Be sure to <a href="https://realpython.com/blog/python/setting-up-sublime-text-3-for-full-stack-python-development/#customizing-sublime-text-3">set up</a> the <code>subl</code> command line tool, which can be used to open a single file or an entire project directory of files and folders, before moving on.</p>

<h2>Keyboard Shortcuts</h2>

<p>Goal: Never take your hands off the keyboard!</p>

<ol>
<li><p><strong>Command Palette</strong> (<em>CMD-SHIFT-P</em>) - Accesses the all-powerful <em><a href="http://sublime-text-unofficial-documentation.readthedocs.org/en/latest/reference/command_palette.html">Command Palette</a></em>, where you can run toolbar actions - setting the code syntax, accessing package control, renaming a file, etc..</p>

<p><img src="https://raw.githubusercontent.com/mjhea0/sublime-javascript/master/img/command_palette.png" alt="Command Palette"></p></li>
<li><p><strong>Goto Anything</strong> (<em>CMD-P</em>) - Searches for a file within the current project or a line or definition in the current file. It&#39;s fuzzy so you don&#39;t need to match the name exactly.</p>

<ul>
<li><code>@</code> - Definition - class, method, function</li>
<li><code>:</code> - Line #</li>
</ul></li>
<li><p><strong>Distraction Free Mode</strong> (<em>CMD-CTRL-SHIFT-F</em>) - Eliminates distractions!</p>

<p><img src="https://raw.githubusercontent.com/mjhea0/sublime-javascript/master/img/distraction_free.png" alt="Command Palette"></p></li>
<li><p><strong>Hide/Show the Sidebar</strong> (<em>CMD-K</em>, <em>CMD-B</em>) - Toggles the sidebar.</p></li>
<li><p><strong>Comment Your Code</strong> (<em>CMD-/</em>) - Highlight the code you want to comment out, then comment it out. If you do not highlight anything, this command will comment out the current line.</p></li>
<li><p><strong>Highlight an entire line</strong> (<em>CMD-L</em>)</p></li>
<li><p><strong>Delete an entire line</strong> (<em>CMD-SHIFT-K</em>)</p></li>
<li><p><strong>Multi-Edit</strong> (<em>CMD+D</em>) - Simply select the word you want to edit, and press <em>CMD-D</em> repeatedly until you have selected all the words you want to change/update/etc..</p></li>
</ol>

<p>Grab the cheat sheet in <a href="https://github.com/mjhea0/sublime-javascript/raw/master/sublime_text_keyboard_shortcuts.pdf">PDF</a>.</p>

<h2>Configuration</h2>

<p>You can customize <em>almost</em> anything in ST3 by updating the config settings.</p>

<p>Config settings can be set at the global/default-level or by user, project, package, and/or syntax. Setting files are <a href="http://www.sublimetext.com/docs/3/settings.html">loaded</a> in the following order:</p>

<ul>
<li><code>Packages/Default/Preferences.sublime-settings</code></li>
<li><code>Packages/User/Preferences.sublime-settings</code></li>
<li><code>Packages/&lt;syntax&gt;/&lt;syntax&gt;.sublime-settings</code></li>
<li><code>Packages/User/&lt;syntax&gt;.sublime-settings</code></li>
</ul>

<p><strong>Always apply your custom configuration settings to at the <em>User</em> level, since they will not get overridden when you update Sublime and/or a specific package.</strong></p>

<ol>
<li><strong>Base User Settings</strong>: <em>Sublime Text 3 &gt; Preferences &gt; Settings - User</em></li>
<li><strong>Package User Specific</strong>: <em>Sublime Text 3 &gt; Preferences &gt; Package Settings &gt; PACKAGE NAME &gt; Settings - User</em></li>
<li><strong>Syntax User Settings</strong>: <em>Sublime Text 3 &gt; Preferences &gt; Settings - More &gt; Syntax Specific - User</em></li>
</ol>

<h3>Base User Settings</h3>

<p>Don&#39;t know where to start?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;draw_white_space&quot;</span><span class="p">:</span> <span class="s2">&quot;all&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;rulers&quot;</span><span class="p">:</span> <span class="p">[</span><span class="mi">80</span><span class="p">],</span>
</span><span class='line'>  <span class="nt">&quot;tab_size&quot;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;translate_tabs_to_spaces&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;trim_trailing_white_space_on_save&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;word_wrap&quot;</span><span class="p">:</span> <span class="kc">true</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Add this to <em>Sublime Text 3 &gt; Preferences &gt; Settings - User</em>.</p>

<p><strong>What&#39;s happening?</strong></p>

<ol>
<li>We convert tabs to two spaces. Now when you press tab, it actually indents two spaces. This is perfect for HTML, CSS, and JavaScript. This creates cleaner, easier to read code.</li>
<li>The ruler is a simple reminder to keep your code concise (for readability).</li>
<li>We added white space markers and trimmed any trailing (err, unnecessary) white space on save.</li>
<li>Finally, word wrapping is automatically applied</li>
</ol>

<p>What else can you update? Start with the <strong>theme</strong>.</p>

<p>For example -</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s2">&quot;color_scheme&quot;</span><span class="o">:</span> <span class="s2">&quot;Packages/User/Flatland Dark (SL).tmTheme&quot;</span><span class="p">,</span>
</span></code></pre></td></tr></table></div></figure>

<p>Simply add this to that same file.</p>

<p>You can find and test themes online before applying them <a href="http://colorsublime.com/">here</a>.</p>

<blockquote>
<p>Advanced users should look into customizing <a href="http://sublime-text-unofficial-documentation.readthedocs.org/en/latest/reference/key_bindings.html">key bindings</a>, <a href="http://sublime-text-unofficial-documentation.readthedocs.org/en/latest/extensibility/macros.html">macros</a>, and <a href="http://sublime-text-unofficial-documentation.readthedocs.org/en/latest/extensibility/snippets.html">code snippets</a>.</p>
</blockquote>

<h2>Packages</h2>

<p>Want more features? There&#39;s a ton of extensions used to, well, extend ST3&#39;s functionality written by the community. <em>&quot;There&#39;s a package for that&quot;.</em></p>

<h3>Package Control</h3>

<p><a href="https://packagecontrol.io/">Package Control</a> <em>must</em> be installed manually, then, once installed, you can use it to install other ST3 packages. To install, copy the Python code for found <a href="https://packagecontrol.io/installation">here</a>. Then open your console (<em>CTRL-`</em>), paste the code, press ENTER. Then Reboot ST3.</p>

<p><img src="https://raw.githubusercontent.com/mjhea0/sublime-javascript/master/img/package_control.png" alt="Command Palette"></p>

<p>Now you can easily install packages by entering the <em>Command Palette</em> (remember the keyboard shortcut?).</p>

<ol>
<li>Type &quot;install&quot;. Press ENTER when <em>Package Control: Install Package</em> is highlighted</li>
<li>Search for a package. Boom!</li>
</ol>

<p>Let&#39;s look at some packages&#8230;</p>

<h3>Sublime Linter</h3>

<p><a href="http://www.sublimelinter.com/en/latest/">SublimeLinter</a> is a framework for Sublime Text linters.</p>

<p>After you install the base package, you need to install linters separately via Package Control, which are easily searchable as they adhere to the following naming syntax - <em>SublimeLinter-[linter_name]</em>. You can view all the official linters <a href="https://github.com/SublimeLinter">here</a>.</p>

<p>Start with the following linters:</p>

<ol>
<li><a href="https://packagecontrol.io/packages/SublimeLinter-jshint">SublimeLinter-jshint</a></li>
<li><a href="https://packagecontrol.io/packages/SublimeLinter-csslint">SublimeLinter-csslint</a></li>
<li><a href="https://packagecontrol.io/packages/SublimeLinter-html-tidy">SublimeLinter-html-tidy</a></li>
<li><a href="https://packagecontrol.io/packages/SublimeLinter-json">SublimeLinter-json</a></li>
</ol>

<h3>Sidebar Enhancements</h3>

<p><a href="https://sublime.wbond.net/packages/SideBarEnhancements">Sidebar Enhancements</a> extends the number of menu options in the sidebar, adding file explorer actions - i.e., Copy, Cut, Paste, Delete, Rename. This package also adds the same commands/actions to the Command Palette.</p>

<p><img src="https://raw.githubusercontent.com/mjhea0/sublime-javascript/master/img/sidebar_enhancements.png" alt="Command Palette"></p>

<h3>JsFormat</h3>

<p><a href="https://packagecontrol.io/packages/JsFormat">JsFormat</a> beautifies your JavaScript/jQuery Code!</p>

<p>Press <em>CTRL-ALT-F</em> to turn this mess&#8230;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">peopleFromBoulder</span><span class="p">(</span><span class="nx">arr</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">val</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="nx">val</span><span class="p">.</span><span class="nx">city</span> <span class="o">==</span> <span class="s1">&#39;Boulder&#39;</span><span class="p">;})</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">val</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="nx">val</span><span class="p">.</span><span class="nx">name</span> <span class="o">+</span> <span class="s1">&#39; is from Boulder&#39;</span><span class="p">;});}</span>
</span></code></pre></td></tr></table></div></figure>

<p>&#8230;into&#8230;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">peopleFromBoulder</span><span class="p">(</span><span class="nx">arr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">val</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">val</span><span class="p">.</span><span class="nx">city</span> <span class="o">==</span> <span class="s1">&#39;Boulder&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">})</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">val</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">val</span><span class="p">.</span><span class="nx">name</span> <span class="o">+</span> <span class="s1">&#39; is from Boulder&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<h3>DocBlockr</h3>

<p><a href="https://packagecontrol.io/packages/DocBlockr">DocBlockr</a> creates comment blocks based on the context.</p>

<p>Try it!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">refactorU</span> <span class="p">(</span><span class="nx">student</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">student</span> <span class="o">===</span> <span class="s2">&quot;Zach&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">str</span> <span class="o">=</span> <span class="nx">student</span> <span class="o">+</span> <span class="s2">&quot; is awesome!&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">str</span> <span class="o">=</span> <span class="nx">student</span> <span class="o">+</span> <span class="s2">&quot; is NOT awesome!&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">str</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Now add an opening comment block - <code>/**</code> - and as soon as you press tab, it will create a dummy-documentation-comment automatically.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * [refactorU description]</span>
</span><span class='line'><span class="cm"> * @param  {[type]}</span>
</span><span class='line'><span class="cm"> * @return {[type]}</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">refactorU</span> <span class="p">(</span><span class="nx">student</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">student</span> <span class="o">===</span> <span class="s2">&quot;Zach&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">student</span> <span class="o">+</span> <span class="s2">&quot; is awesome!&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">student</span> <span class="o">+</span> <span class="s2">&quot; is NOT awesome!&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Yay!</p>

<h3>GitGutter</h3>

<p><a href="https://packagecontrol.io/packages/GitGutter">GitGutter</a> displays icons in the &quot;gutter&quot; area (next to the line numbers) indicating whether an individual line has been modified since your last commit.</p>

<p><img src="https://raw.githubusercontent.com/mjhea0/sublime-javascript/master/img/gitgutter.png" alt="GitGutter"></p>

<h3>Emmet</h3>

<p>With <a href="https://packagecontrol.io/packages/Emmet">Emmet</a> you can turn a symbol or code abbreviation into a HTML or CSS code snippet. It&#39;s by <em>far</em> the best plugin for increasing your productivity and efficiency as a web developer.</p>

<p>Try this out: Once installed, start a new HTML file, type a bang, <code>!</code>, and then press tab.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!doctype html&gt;</span>
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">&quot;en&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;UTF-8&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;title&gt;</span>Document<span class="nt">&lt;/title&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p>Boom!</p>

<p>Check the official <a href="http://docs.emmet.io/abbreviations/">docs</a> to see all the expressions/symbols/abbreviations that can be used for generating snippets.</p>

<h2>Conclusion</h2>

<p><em>Go pimp your editor.</em></p>

<blockquote>
<p>Want a package? It&#39;s just Python. Hire <a href="http://mherman.org">me</a>!</p>
</blockquote>

<p>Comment below. Check out the <a href="https://github.com/mjhea0/sublime-javascript">repo</a> for my Sublime dotfiles. Cheers!</p>

<h2>Additional Resources</h2>

<ol>
<li><a href="http://sublimetexttips.com/">Sublime Text Tips Newsletter</a> - awesome tips, tricks</li>
<li><a href="http://docs.sublimetext.info/en/latest/index.html">Community-maintained documentation</a></li>
<li><a href="https://packagecontrol.io/docs">Package Manager documentation</a></li>
<li><a href="http://sublime-text-unofficial-documentation.readthedocs.org/en/latest/reference/reference.html">Unofficial documentation reference</a></li>
<li><a href="https://realpython.com/blog/python/setting-up-sublime-text-3-for-full-stack-python-development/">Setting Up Sublime Text 3 for Full Stack Python Development</a> - my other ST3 post</li>
</ol>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[User Authentication with Passport and Express 4]]></title>
    <link href="http://mjhea0.github.com/blog/2015/01/31/local-authentication-with-passport-and-express-4/"/>
    
    <updated>2015-01-31T07:07:00-07:00</updated>
    <id>http://mjhea0.github.com/blog/2015/01/31/local-authentication-with-passport-and-express-4</id>
    
    <content type="html"><![CDATA[<p>This post demonstrate how to add user authentication to Node/Express with Passport.js.</p>

<blockquote>
<p>If you&#39;re interested in social authentication via Passport, please check out <a href="http://mherman.org/blog/2013/11/10/social-authentication-with-passport-dot-js/">this</a> blog post. Looking for an Express 3 authentication tutorial? Check out this <a href="http://mherman.org/blog/2013/11/11/user-authentication-with-passport-dot-js/">post</a>.</p>
</blockquote>

<p>Before you start, make sure you have <a href="http://nodejs.org/download/">Node</a> installed for your specific operating system. This tutorial also uses the following tools/technologies:</p>

<ul>
<li><a href="https://www.npmjs.com/package/express">Express</a> v4.11.1</li>
<li><a href="https://www.npmjs.com/package/mongoose">Mongoose</a> v3.8.22</li>
<li><a href="https://www.npmjs.com/package/passport">Passport</a> v0.2.1</li>
<li><a href="https://www.npmjs.com/package/passport-local">Passport-local</a>: v1.0.0</li>
<li><a href="https://www.npmjs.com/package/passport-local-mongoose">Passport-local-mongoose</a>: v1.0.0</li>
</ul>

<h2>Project Setup</h2>

<p>Start by installing the Express generator, which we&#39;ll use to generate a basic project boilerplate:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>npm install -g express-generator@4
</span></code></pre></td></tr></table></div></figure>

<blockquote>
<p>The <code>-g</code> flag means that we&#39;re installing this globally, on our entire system.</p>
</blockquote>

<p>Navigate to a convenient directory, like your &quot;Desktop&quot; or &quot;Documents&quot;, then create your app:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>express passport-local-express4
</span></code></pre></td></tr></table></div></figure>

<p>Check out the project structure:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>├── app.js
</span><span class='line'>├── bin
</span><span class='line'>│   └── www
</span><span class='line'>├── package.json
</span><span class='line'>├── public
</span><span class='line'>│   ├── images
</span><span class='line'>│   ├── javascripts
</span><span class='line'>│   └── stylesheets
</span><span class='line'>│       └── style.css
</span><span class='line'>├── routes
</span><span class='line'>│   ├── index.js
</span><span class='line'>│   └── users.js
</span><span class='line'>└── views
</span><span class='line'>    ├── error.jade
</span><span class='line'>    ├── index.jade
</span><span class='line'>    └── layout.jade
</span></code></pre></td></tr></table></div></figure>

<p>This took care of the heavy lifting, adding common files and functions associated with all apps.</p>

<h3>Install/Update Dependencies</h3>

<p>Update the <em>package.json</em> file to reference the correct dependencies:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;passport-local-express4&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;version&quot;</span><span class="p">:</span> <span class="s2">&quot;0.0.0&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;private&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;scripts&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;start&quot;</span><span class="p">:</span> <span class="s2">&quot;node ./bin/www&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;repository&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;git&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;url&quot;</span><span class="p">:</span> <span class="s2">&quot;git@github.com:mjhea0/passport-local-express4.git&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;author&quot;</span><span class="p">:</span> <span class="s2">&quot;Michael Herman &lt;michael@mherman.org&gt;&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;license&quot;</span><span class="p">:</span> <span class="s2">&quot;MIT&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;dependencies&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;body-parser&quot;</span><span class="p">:</span> <span class="s2">&quot;^1.10.2&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;chai&quot;</span><span class="p">:</span> <span class="s2">&quot;~1.8.1&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;cookie-parser&quot;</span><span class="p">:</span> <span class="s2">&quot;^1.3.3&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;express&quot;</span><span class="p">:</span> <span class="s2">&quot;^4.11.1&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;express-session&quot;</span><span class="p">:</span> <span class="s2">&quot;^1.10.1&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;jade&quot;</span><span class="p">:</span> <span class="s2">&quot;^1.9.1&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;mocha&quot;</span><span class="p">:</span> <span class="s2">&quot;~1.14.0&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;mongoose&quot;</span><span class="p">:</span> <span class="s2">&quot;^3.8.22&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;morgan&quot;</span><span class="p">:</span> <span class="s2">&quot;^1.5.1&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;passport&quot;</span><span class="p">:</span> <span class="s2">&quot;^0.2.1&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;passport-local&quot;</span><span class="p">:</span> <span class="s2">&quot;^1.0.0&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;passport-local-mongoose&quot;</span><span class="p">:</span> <span class="s2">&quot;^1.0.0&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;should&quot;</span><span class="p">:</span> <span class="s2">&quot;~2.1.0&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;serve-favicon&quot;</span><span class="p">:</span> <span class="s2">&quot;^2.2.0&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;debug&quot;</span><span class="p">:</span> <span class="s2">&quot;^2.1.1&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Now install the dependencies:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">cd </span>express-local-express4
</span><span class='line'><span class="nv">$ </span>npm install
</span></code></pre></td></tr></table></div></figure>

<h3>Sanity Check</h3>

<p>Let&#39;s test our setup by running the app:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>node ./bin/www
</span></code></pre></td></tr></table></div></figure>

<p>Navigate to <a href="http://localhost:3000/">http://localhost:3000/</a> in your browser and you should see the &quot;Welcome to Express&quot; text staring back.</p>

<h3>Setup MongoDB</h3>

<p>Install:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>npm install -g mongodb
</span></code></pre></td></tr></table></div></figure>

<p>Then, in a new terminal window, start the MongoDB daemon:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo mongod
</span></code></pre></td></tr></table></div></figure>

<h2>Edit <em>app.js</em></h2>

<h3>Update the Requirements</h3>

<p>Add the following requirements:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">mongoose</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;mongoose&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">passport</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;passport&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">LocalStrategy</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;passport-local&#39;</span><span class="p">).</span><span class="nx">Strategy</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>

<h3>Update <em>app.js</em></h3>

<p>Update all of <em>app.js</em> with the following code (check the comments for a brief explanation):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// dependencies</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;path&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">favicon</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;serve-favicon&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">logger</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;morgan&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">cookieParser</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;cookie-parser&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">bodyParser</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;body-parser&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">mongoose</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;mongoose&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">passport</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;passport&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">LocalStrategy</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;passport-local&#39;</span><span class="p">).</span><span class="nx">Strategy</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">routes</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./routes/index&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">users</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./routes/users&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// view engine setup</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;views&#39;</span><span class="p">,</span> <span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="s1">&#39;views&#39;</span><span class="p">));</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;view engine&#39;</span><span class="p">,</span> <span class="s1">&#39;jade&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// uncomment after placing your favicon in /public</span>
</span><span class='line'><span class="c1">//app.use(favicon(__dirname + &#39;/public/favicon.ico&#39;));</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">logger</span><span class="p">(</span><span class="s1">&#39;dev&#39;</span><span class="p">));</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">bodyParser</span><span class="p">.</span><span class="nx">json</span><span class="p">());</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">bodyParser</span><span class="p">.</span><span class="nx">urlencoded</span><span class="p">({</span> <span class="nx">extended</span><span class="o">:</span> <span class="kc">false</span> <span class="p">}));</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">cookieParser</span><span class="p">());</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express-session&#39;</span><span class="p">)({</span>
</span><span class='line'>    <span class="nx">secret</span><span class="o">:</span> <span class="s1">&#39;keyboard cat&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">resave</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">saveUninitialized</span><span class="o">:</span> <span class="kc">false</span>
</span><span class='line'><span class="p">}));</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">passport</span><span class="p">.</span><span class="nx">initialize</span><span class="p">());</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">passport</span><span class="p">.</span><span class="nx">session</span><span class="p">());</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="kr">static</span><span class="p">(</span><span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="s1">&#39;public&#39;</span><span class="p">)));</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="nx">routes</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// passport config</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">Account</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./models/account&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">passport</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="k">new</span> <span class="nx">LocalStrategy</span><span class="p">(</span><span class="nx">Account</span><span class="p">.</span><span class="nx">authenticate</span><span class="p">()));</span>
</span><span class='line'><span class="nx">passport</span><span class="p">.</span><span class="nx">serializeUser</span><span class="p">(</span><span class="nx">Account</span><span class="p">.</span><span class="nx">serializeUser</span><span class="p">());</span>
</span><span class='line'><span class="nx">passport</span><span class="p">.</span><span class="nx">deserializeUser</span><span class="p">(</span><span class="nx">Account</span><span class="p">.</span><span class="nx">deserializeUser</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// mongoose</span>
</span><span class='line'><span class="nx">mongoose</span><span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="s1">&#39;mongodb://localhost/passport_local_mongoose_express4&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// catch 404 and forward to error handler</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">err</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Not Found&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">err</span><span class="p">.</span><span class="nx">status</span> <span class="o">=</span> <span class="mi">404</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">next</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// error handlers</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// development error handler</span>
</span><span class='line'><span class="c1">// will print stacktrace</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;env&#39;</span><span class="p">)</span> <span class="o">===</span> <span class="s1">&#39;development&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nx">status</span> <span class="o">||</span> <span class="mi">500</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">res</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="s1">&#39;error&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">message</span><span class="o">:</span> <span class="nx">err</span><span class="p">.</span><span class="nx">message</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">error</span><span class="o">:</span> <span class="nx">err</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// production error handler</span>
</span><span class='line'><span class="c1">// no stacktraces leaked to user</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nx">status</span> <span class="o">||</span> <span class="mi">500</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="s1">&#39;error&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">message</span><span class="o">:</span> <span class="nx">err</span><span class="p">.</span><span class="nx">message</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">error</span><span class="o">:</span> <span class="p">{}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">app</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>

<h2>Mongoose</h2>

<p>Let&#39;s get the Mongoose up and running. Add a new file called <em>account.js</em> to a new directory called &quot;models&quot; with the following code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">mongoose</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;mongoose&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">Schema</span> <span class="o">=</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">Schema</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">passportLocalMongoose</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;passport-local-mongoose&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">Account</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Schema</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">username</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">password</span><span class="o">:</span> <span class="nb">String</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Account</span><span class="p">.</span><span class="nx">plugin</span><span class="p">(</span><span class="nx">passportLocalMongoose</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">model</span><span class="p">(</span><span class="s1">&#39;Account&#39;</span><span class="p">,</span> <span class="nx">Account</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<p>You may be wondering about password security, specifically salting/hashing the password. Fortunately, the <a href="https://github.com/saintedlama/passport-local-mongoose">passport-local-mongoose</a> package automatically takes care of salting and hashing the password for us. More on this further down.</p>

<h3>Sanity Check</h3>

<p>Again, test the app:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>node ./bin/www
</span></code></pre></td></tr></table></div></figure>

<p>Make sure you still see the same &quot;Welcome to Express&quot; text.</p>

<h2>Add Routes</h2>

<p>Within the &quot;routes&quot; folder, add the following code to the <em>index.js</em> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">passport</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;passport&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">Account</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;../models/account&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">router</span> <span class="o">=</span> <span class="nx">express</span><span class="p">.</span><span class="nx">Router</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="s1">&#39;index&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">user</span> <span class="o">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">user</span> <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/register&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="s1">&#39;register&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/register&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">Account</span><span class="p">.</span><span class="nx">register</span><span class="p">(</span><span class="k">new</span> <span class="nx">Account</span><span class="p">({</span> <span class="nx">username</span> <span class="o">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">username</span> <span class="p">}),</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">password</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">account</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="s1">&#39;register&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">account</span> <span class="o">:</span> <span class="nx">account</span> <span class="p">});</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">passport</span><span class="p">.</span><span class="nx">authenticate</span><span class="p">(</span><span class="s1">&#39;local&#39;</span><span class="p">)(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">res</span><span class="p">.</span><span class="nx">redirect</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/login&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="s1">&#39;login&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">user</span> <span class="o">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">user</span> <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/login&#39;</span><span class="p">,</span> <span class="nx">passport</span><span class="p">.</span><span class="nx">authenticate</span><span class="p">(</span><span class="s1">&#39;local&#39;</span><span class="p">),</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">redirect</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/logout&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">req</span><span class="p">.</span><span class="nx">logout</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">redirect</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/ping&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">200</span><span class="p">).</span><span class="nx">send</span><span class="p">(</span><span class="s2">&quot;pong!&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">router</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>

<h2>Test</h2>

<p>Fire up the server. Navigate to <a href="http://localhost:3000/ping">http://localhost:3000/ping</a>. Make sure you do not get any errors and that you see the word &quot;pong!&quot;.</p>

<h2>Views</h2>

<h3><em>layout.jade</em></h3>

<p>Update:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">doctype</span> <span class="nx">html</span>
</span><span class='line'><span class="nx">html</span>
</span><span class='line'>  <span class="nx">head</span>
</span><span class='line'>    <span class="nx">title</span><span class="o">=</span> <span class="nx">title</span>
</span><span class='line'>    <span class="nx">meta</span><span class="p">(</span><span class="nx">name</span><span class="o">=</span><span class="s1">&#39;viewport&#39;</span><span class="p">,</span> <span class="nx">content</span><span class="o">=</span><span class="s1">&#39;width=device-width, initial-scale=1.0&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">link</span><span class="p">(</span><span class="nx">href</span><span class="o">=</span><span class="s1">&#39;http://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/css/bootstrap.min.css&#39;</span><span class="p">,</span> <span class="nx">rel</span><span class="o">=</span><span class="s1">&#39;stylesheet&#39;</span><span class="p">,</span> <span class="nx">media</span><span class="o">=</span><span class="s1">&#39;screen&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">link</span><span class="p">(</span><span class="nx">rel</span><span class="o">=</span><span class="s1">&#39;stylesheet&#39;</span><span class="p">,</span> <span class="nx">href</span><span class="o">=</span><span class="s1">&#39;/stylesheets/style.css&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">body</span>
</span><span class='line'>    <span class="nx">block</span> <span class="nx">content</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">script</span><span class="p">(</span><span class="nx">src</span><span class="o">=</span><span class="s1">&#39;http://code.jquery.com/jquery.js&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">script</span><span class="p">(</span><span class="nx">src</span><span class="o">=</span><span class="s1">&#39;http://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/js/bootstrap.min.js&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

<h3>index.jade</h3>

<p>Update:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='jade'><span class='line'><span class="nt">extends</span> layout
</span><span class='line'>
</span><span class='line'><span class="nt">block</span> content
</span><span class='line'>  <span class="nt">if</span> (!user)
</span><span class='line'>    <span class="nt">a</span>(<span class="na">href=</span><span class="s">&quot;/login&quot;</span>) Login
</span><span class='line'>    <span class="nt">br</span>
</span><span class='line'>    <span class="nt">a</span>(<span class="na">href=</span><span class="s">&quot;/register&quot;</span>) Register
</span><span class='line'>  <span class="nt">if</span> (user)
</span><span class='line'>    <span class="nt">p</span> You are currently logged in as <span class="si">#{</span><span class="n">user</span><span class="o">.</span><span class="n">username</span><span class="si">}</span>
</span><span class='line'>    <span class="nt">a</span>(<span class="na">href=</span><span class="s">&quot;/logout&quot;</span>) Logout
</span></code></pre></td></tr></table></div></figure>

<h3>login.jade</h3>

<p>Add a new file called <em>login.jade</em> to the views:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='jade'><span class='line'><span class="nt">extends</span> layout
</span><span class='line'>
</span><span class='line'><span class="nt">block</span> content
</span><span class='line'>  <span class="nc">.container</span>
</span><span class='line'>    <span class="nt">h1</span> Login Page
</span><span class='line'>    <span class="nt">p</span><span class="nc">.lead</span> Say something worthwhile here.
</span><span class='line'>    <span class="nt">br</span>
</span><span class='line'>    <span class="nt">form</span>(<span class="na">role=</span><span class="s">&#39;form&#39;</span><span class="err">,</span> <span class="na">action=</span><span class="s">&quot;/login&quot;</span><span class="err">,</span><span class="na">method=</span><span class="s">&quot;post&quot;</span><span class="err">,</span> <span class="na">style=</span><span class="s">&#39;max-width: 300px;&#39;</span>)
</span><span class='line'>      <span class="nc">.form-group</span>
</span><span class='line'>          <span class="nt">input</span><span class="nc">.form-control</span>(<span class="na">type=</span><span class="s">&#39;text&#39;</span><span class="err">,</span> <span class="na">name=</span><span class="s">&quot;username&quot;</span><span class="err">,</span> <span class="na">placeholder=</span><span class="s">&#39;Enter Username&#39;</span>)
</span><span class='line'>      <span class="nc">.form-group</span>
</span><span class='line'>        <span class="nt">input</span><span class="nc">.form-control</span>(<span class="na">type=</span><span class="s">&#39;password&#39;</span><span class="err">,</span> <span class="na">name=</span><span class="s">&quot;password&quot;</span><span class="err">,</span> <span class="na">placeholder=</span><span class="s">&#39;Password&#39;</span>)
</span><span class='line'>      <span class="nt">button</span><span class="nc">.btn.btn-default</span>(<span class="na">type=</span><span class="s">&#39;submit&#39;</span>) Submit
</span><span class='line'>      <span class="err">&amp;</span><span class="nt">nbsp</span>;
</span><span class='line'>      <span class="nt">a</span>(<span class="na">href=</span><span class="s">&#39;/&#39;</span>)
</span><span class='line'>        <span class="nt">button</span><span class="nc">.btn.btn-primary</span>(<span class="na">type=</span><span class="s">&quot;button&quot;</span>) Cancel
</span></code></pre></td></tr></table></div></figure>

<h3>register.jade</h3>

<p>Add another file called <em>register.jade</em> to the views:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">extends</span> <span class="nx">layout</span>
</span><span class='line'>
</span><span class='line'><span class="nx">block</span> <span class="nx">content</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">container</span>
</span><span class='line'>    <span class="nx">h1</span> <span class="nx">Register</span> <span class="nx">Page</span>
</span><span class='line'>    <span class="nx">p</span><span class="p">.</span><span class="nx">lead</span> <span class="nx">Say</span> <span class="nx">something</span> <span class="nx">worthwhile</span> <span class="nx">here</span><span class="p">.</span>
</span><span class='line'>    <span class="nx">br</span>
</span><span class='line'>    <span class="nx">form</span><span class="p">(</span><span class="nx">role</span><span class="o">=</span><span class="s1">&#39;form&#39;</span><span class="p">,</span> <span class="nx">action</span><span class="o">=</span><span class="s2">&quot;/register&quot;</span><span class="p">,</span><span class="nx">method</span><span class="o">=</span><span class="s2">&quot;post&quot;</span><span class="p">,</span> <span class="nx">style</span><span class="o">=</span><span class="s1">&#39;max-width: 300px;&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">form</span><span class="o">-</span><span class="nx">group</span>
</span><span class='line'>          <span class="nx">input</span><span class="p">.</span><span class="nx">form</span><span class="o">-</span><span class="nx">control</span><span class="p">(</span><span class="nx">type</span><span class="o">=</span><span class="s1">&#39;text&#39;</span><span class="p">,</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;username&quot;</span><span class="p">,</span> <span class="nx">placeholder</span><span class="o">=</span><span class="s1">&#39;Enter Username&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">form</span><span class="o">-</span><span class="nx">group</span>
</span><span class='line'>        <span class="nx">input</span><span class="p">.</span><span class="nx">form</span><span class="o">-</span><span class="nx">control</span><span class="p">(</span><span class="nx">type</span><span class="o">=</span><span class="s1">&#39;password&#39;</span><span class="p">,</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;password&quot;</span><span class="p">,</span> <span class="nx">placeholder</span><span class="o">=</span><span class="s1">&#39;Password&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">button</span><span class="p">.</span><span class="nx">btn</span><span class="p">.</span><span class="nx">btn</span><span class="o">-</span><span class="k">default</span><span class="p">(</span><span class="nx">type</span><span class="o">=</span><span class="s1">&#39;submit&#39;</span><span class="p">)</span> <span class="nx">Submit</span>
</span><span class='line'>      <span class="o">&amp;</span><span class="nx">nbsp</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">a</span><span class="p">(</span><span class="nx">href</span><span class="o">=</span><span class="s1">&#39;/&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="nx">button</span><span class="p">.</span><span class="nx">btn</span><span class="p">.</span><span class="nx">btn</span><span class="o">-</span><span class="nx">primary</span><span class="p">(</span><span class="nx">type</span><span class="o">=</span><span class="s2">&quot;button&quot;</span><span class="p">)</span> <span class="nx">Cancel</span>
</span></code></pre></td></tr></table></div></figure>

<h2>Test redux</h2>

<p>Fire up the server and test! Register, and then login.</p>

<p>Remember how I said that we&#39;d look at salting and hashing a password again? Well, let&#39;s check our Mongo database to ensure that it&#39;s working.</p>

<p>When I tested the user registration, I used &quot;michael&quot; for both my username and password.</p>

<p>Let&#39;s see what this looks like in the database:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>mongo
</span><span class='line'>MongoDB shell version: 2.4.6
</span><span class='line'>connecting to: <span class="nb">test</span>
</span><span class='line'>&gt; use passport_local_mongoose_express4
</span><span class='line'>switched to db passport_local_mongoose_express4
</span><span class='line'>&gt; db.accounts.find<span class="o">()</span>
</span><span class='line'><span class="o">{</span> <span class="s2">&quot;salt&quot;</span> : <span class="s2">&quot;9ffd63f2bcce58bf79691cacfaae678f690dd73ef778445bf79f97c41934189b&quot;</span>, <span class="s2">&quot;hash&quot;</span> : <span class="s2">&quot;17eabe62d459acdb4f3d8eaab7369a1e989c6150e231d1e87a7cf1c31dfc7eafc0616732a6db8f08c413dcbec06c95d512cef55503a1fe9a7ed5dc15ecf5cf67c114af5a659c79bb47039082a3af933e1c32dd2519b8be11596a775e1d262fd53437927e0fd948b76e738f342904a598e6c533445351c9b3d629aa118adfbe0646a80539e816c06248e353b1787dbd8c646a2ed018bbf5e58fb6a6cc1f32c6ea61b3e52230cfdf75a9f4b7ba20b3d3ae3b86f5816f5df9c48f9d1bb4a9c42e30bf646c3810d050847c1905e5a95f53c81078090e42ba58799187a61b047376def48fb640a4f48eca4c7f35610eafc2c770e61172b11c7e98c36281983de56414fa95e0708c9a6458a903baaf3818a3e4675b39418b358f51f45aca792e606f692e0a7d3667d111d00d0f521257d3486cbcff250dc7d9859ab80f9d56a3d272fb0ebb2e7dd969c0749361153c6bde62ad50b3d47233424034b959c78225db000cc1416aa0d555016f1b666d2da709e69c5030ee39753597a1d06ec0a4e001e22bff37947c1b993794d21667dc6c65e4116dd5ca216a161aa9026063e0b12e1165ffa5c827a6803df6765766cc55bcca122cd4d9f572353a988f90200ffc4a610d9eca83df01d6f30af78f9ec476fc974bc1d3a5fd2759a56486795bd7d993462a8d2f9b9c42d3197cd7b9855f17eaac4073a4d843d56b5c9a75b86cc1bb8b27ec&quot;</span>, <span class="s2">&quot;username&quot;</span> : <span class="s2">&quot;michael&quot;</span>, <span class="s2">&quot;_id&quot;</span> : ObjectId<span class="o">(</span><span class="s2">&quot;54c7bbbfaf54064909921a36&quot;</span><span class="o">)</span>, <span class="s2">&quot;__v&quot;</span> : 0 <span class="o">}</span>
</span><span class='line'>&gt;
</span></code></pre></td></tr></table></div></figure>

<p>So, you can see that we have a document with five keys:</p>

<ul>
<li><code>username</code> is as we expected - &quot;michael&quot;</li>
<li><code>_id</code> pertains to the unique id associated with that document.</li>
<li><code>__v</code> is the <a href="http://mongoosejs.com/docs/guide.html#versionKey">version #</a> for that specific documents.</li>
<li>Finally, instead of a password key we have both a salt and a hash key. For more on how these are generated, please refer to the <a href="https://github.com/saintedlama/passport-local-mongoose#hash-algorithm">passport-local-mongoose</a> documentation.</li>
</ul>

<h2>Unit/Integration tests</h2>

<p>First, update the <code>scripts</code> object in <em>package.json</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="s2">&quot;scripts&quot;</span><span class="err">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;start&quot;</span><span class="p">:</span> <span class="s2">&quot;node ./bin/www&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;test&quot;</span><span class="p">:</span> <span class="s2">&quot;make test&quot;</span>
</span><span class='line'> <span class="p">}</span><span class="err">,</span>
</span></code></pre></td></tr></table></div></figure>

<p>Now add a Makefile to the root and include the following code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">test:</span>
</span><span class='line'>    <span class="err">@./node_modules/.bin/mocha</span>
</span><span class='line'>
</span><span class='line'><span class="err">.PHONY:</span> <span class="err">test</span>
</span></code></pre></td></tr></table></div></figure>

<blockquote>
<p>Take note of the spacing on the second line. This <strong>must</strong> be a tab or you will see an error.</p>
</blockquote>

<p>Create a new folder called &quot;test&quot;, and then run <code>make test</code> from the command line. If all is well, you should see - <code>0 passing (1ms)</code>. Now we just need to add some tests&#8230;</p>

<h3>Add tests</h3>

<p>Add a new file called <em>test.user.js</em> to the &quot;test folder:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">should</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;should&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">mongoose</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;mongoose&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">Account</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;../models/account.js&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">db</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;Account&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">before</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">db</span> <span class="o">=</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="s1">&#39;mongodb://localhost/test&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">done</span><span class="p">();</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">after</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">mongoose</span><span class="p">.</span><span class="nx">connection</span><span class="p">.</span><span class="nx">close</span><span class="p">();</span>
</span><span class='line'>        <span class="nx">done</span><span class="p">();</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">beforeEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">account</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Account</span><span class="p">({</span>
</span><span class='line'>            <span class="nx">username</span><span class="o">:</span> <span class="s1">&#39;12345&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">password</span><span class="o">:</span> <span class="s1">&#39;testy&#39;</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">account</span><span class="p">.</span><span class="nx">save</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;error&#39;</span> <span class="o">+</span> <span class="nx">error</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
</span><span class='line'>            <span class="k">else</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;no error&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">done</span><span class="p">();</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;find a user by username&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">Account</span><span class="p">.</span><span class="nx">findOne</span><span class="p">({</span> <span class="nx">username</span><span class="o">:</span> <span class="s1">&#39;12345&#39;</span> <span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">account</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">account</span><span class="p">.</span><span class="nx">username</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">eql</span><span class="p">(</span><span class="s1">&#39;12345&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;   username: &quot;</span><span class="p">,</span> <span class="nx">account</span><span class="p">.</span><span class="nx">username</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">done</span><span class="p">();</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">afterEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">Account</span><span class="p">.</span><span class="nx">remove</span><span class="p">({},</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">done</span><span class="p">();</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>     <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>Now run <code>make tests</code>. You should see that it passed - <code>1 passing (43ms)</code>.</p>

<h2>Error handling</h2>

<p>Right now we have some poorly handled errors that are confusing to the end user. For example, try to register a name that already exists, or login with a username that doesn&#39;t exist. This can and <em>should</em> be handled better.</p>

<h3>Registration</h3>

<p>First, update the <code>/register</code> route so an error is thrown, which gets sent to Jade template, if a user tries to register a username that already exists:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/register&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">Account</span><span class="p">.</span><span class="nx">register</span><span class="p">(</span><span class="k">new</span> <span class="nx">Account</span><span class="p">({</span> <span class="nx">username</span> <span class="o">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">username</span> <span class="p">}),</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">password</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">account</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="s2">&quot;register&quot;</span><span class="p">,</span> <span class="p">{</span><span class="nx">info</span><span class="o">:</span> <span class="s2">&quot;Sorry. That username already exists. Try again.&quot;</span><span class="p">});</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">passport</span><span class="p">.</span><span class="nx">authenticate</span><span class="p">(</span><span class="s1">&#39;local&#39;</span><span class="p">)(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">res</span><span class="p">.</span><span class="nx">redirect</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>Then add the following code to the bottom of the &quot;register.jade&quot; template:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='jade'><span class='line'><span class="nt">br</span>
</span><span class='line'><span class="nt">h4</span><span class="p">=</span> <span class="n">info</span>
</span></code></pre></td></tr></table></div></figure>

<p>Test this out.</p>

<p>Next, if you try to login with a username and password combo that does not exist, the user is redirected to a page with just the word &quot;Unauthorized&quot; on it. This is confusing and unhelpful. See if you can fix this on your own. Cheers!</p>

<h2>Conclusion</h2>

<p>That&#39;s it. Grab the code from the <a href="https://github.com/mjhea0/passport-local-express4">repository</a>. Cheers!</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Node, Express, and MongoDB - a primer]]></title>
    <link href="http://mjhea0.github.com/blog/2014/12/31/node-and-mongoose-a-primer/"/>
    
    <updated>2014-12-31T02:28:00-07:00</updated>
    <id>http://mjhea0.github.com/blog/2014/12/31/node-and-mongoose-a-primer</id>
    
    <content type="html"><![CDATA[<p>Welcome. Using Node, Express, and Mongoose, let&#39;s create an interactive form.</p>

<blockquote>
<p>Before you start, make sure you have <a href="http://nodejs.org/download/">Node</a> installed for your specific operating system. This tutorial also uses <a href="http://expressjs.com/">Express</a> v4.9.0 and <a href="http://mongoosejs.com/">Mongoose</a> v3.8.21.</p>
</blockquote>

<h2>Project Setup</h2>

<p>Start by installing the Express generator, which will be used to create a basic project for us:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>npm install -g express-generator@4
</span></code></pre></td></tr></table></div></figure>

<blockquote>
<p>The <code>-g</code> flag means that we&#39;re installing this on our entire system.</p>
</blockquote>

<p>Navigate to a convenient directory, like your &quot;Desktop&quot; or &quot;Documents&quot;, then create your app:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>express node-mongoose-form
</span></code></pre></td></tr></table></div></figure>

<p>Check out the project structure:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>├── app.js
</span><span class='line'>├── bin
</span><span class='line'>│   └── www
</span><span class='line'>├── package.json
</span><span class='line'>├── public
</span><span class='line'>│   ├── images
</span><span class='line'>│   ├── javascripts
</span><span class='line'>│   └── stylesheets
</span><span class='line'>│       └── style.css
</span><span class='line'>├── routes
</span><span class='line'>│   ├── index.js
</span><span class='line'>│   └── users.js
</span><span class='line'>└── views
</span><span class='line'>    ├── error.jade
</span><span class='line'>    ├── index.jade
</span><span class='line'>    └── layout.jade
</span></code></pre></td></tr></table></div></figure>

<p>Don&#39;t worry about the files and folders for now. Just know that we have created a boilerplate that could be used for a number of Node applications. This took care of the heavy lifting, adding common files and functions associated with all apps.</p>

<p>Notice the <em>package.json</em> file. This stores your project&#39;s dependencies, which we still need to install:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">cd </span>node-mongoose-form
</span><span class='line'><span class="nv">$ </span>npm install
</span></code></pre></td></tr></table></div></figure>

<p>Now let&#39;s install one last dependency:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>npm install mongoose --save
</span></code></pre></td></tr></table></div></figure>

<blockquote>
<p>The <code>--save</code> flag adds the dependencies and their versions to the <em>package.json</em> file. Take a look.</p>
</blockquote>

<h2>Sanity check</h2>

<p>Let&#39;s test our setup by running the app:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>npm start
</span></code></pre></td></tr></table></div></figure>

<p>Navigate to <a href="http://localhost:3000/">http://localhost:3000/</a> in your browser and you should see the &quot;Welcome to Express&quot; text.</p>

<h3>Supervisor</h3>

<p>I highly recommend setting up <a href="https://github.com/isaacs/node-supervisor">Supervisor</a> so that you can run your app and watch for code changes. Check out the above link to learn more.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>npm install supervisor -g
</span></code></pre></td></tr></table></div></figure>

<p>Kill the server by pressing CTRL-C.</p>

<p>Once installed, let&#39;s update the <em>package.json</em> file to utilize Supervisor to run our program.</p>

<p>Simply change this-</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s2">&quot;scripts&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;start&quot;</span><span class="o">:</span> <span class="s2">&quot;node ./bin/www&quot;</span>
</span><span class='line'><span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>

<p>To this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s2">&quot;scripts&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;start&quot;</span><span class="o">:</span> <span class="s2">&quot;supervisor ./bin/www&quot;</span>
</span><span class='line'><span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>

<p>Let&#39;s test again:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>npm start
</span></code></pre></td></tr></table></div></figure>

<p>In your terminal you should see:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Watching directory <span class="s1">&#39;node-mongoose-form&#39;</span> <span class="k">for </span>changes.
</span></code></pre></td></tr></table></div></figure>

<p>If you see that, you know it&#39;s working right. Essentially, Supervisor is watching that directory for code changes, and if they do occur, then it will refresh your app for you so you don&#39;t have to constantly kill the server then start it back up. It saves a lot of time and keystrokes.</p>

<p>Awesome. With the setup out of the way, let&#39;s get our hands dirty and actually build something!</p>

<h2>Routes</h2>

<p>Grab your favorite text editor, and then open the main file, <em>app.js</em>, which houses all of the business logic. Take a look at the routes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="nx">routes</span><span class="p">);</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="s1">&#39;/users&#39;</span><span class="p">,</span> <span class="nx">users</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<p>Understanding how routes work as well as how to trace all the files associated with an individual route is an important skill to learn. You&#39;ll be able to approach most applications and understand how they work just by starting with the routes.</p>

<p>Let&#39;s look at this route:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="s1">&#39;/users&#39;</span><span class="p">,</span> <span class="nx">users</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>Here, we know that this route is associated with the <code>/users</code> endpoint. What&#39;s an endpoint? Simply navigate to <a href="http://localhost:3000/users">http://localhost:3000/users</a>.</p>

<p>So the end user navigates to that endpoint and expects <em>something</em> to happen. That could mean some HTML is rendered or perhaps JSON is returned. That&#39;s not important at this point. For now, let&#39;s look at how Node handles that logic for &quot;handling routes&quot;.</p>

<p>Also, within that route, you can see the variable <code>users</code>. Where is this file this file? It&#39;s at the top, and it loads in another file within our app:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">users</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./routes/users&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<p>Open that file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">router</span> <span class="o">=</span> <span class="nx">express</span><span class="p">.</span><span class="nx">Router</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* GET users listing. */</span>
</span><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;respond with a resource&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">router</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>

<p>What&#39;s happening here? We won&#39;t touch everything but essentially when that endpoint is hit it responds by sending text in the form of a response to the end user - &quot;respond with a resource&quot;. Now, of course you don&#39;t always have to send text. You could respond with a template or view like a Jade file that gets rendered into HTML. We&#39;ll look at how this works in just a minute when we add our own routes.</p>

<p><strong>Make sure you understand everything in this section before moving on. This is very important</strong>.</p>

<h3>Add a new route</h3>

<p>Let&#39;s now add a new route that renders an HTML form to the end user.</p>

<p>Start by adding the route handler in the <em>app.js</em> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="s1">&#39;/form&#39;</span><span class="p">,</span> <span class="nx">form</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<blockquote>
<p>Remember this simply means <code>app.use(&#39;/ENDPOINT&#39;, VARIABLE_NAME);</code>,</p>
</blockquote>

<p>Use the <code>form</code> variable to require a JS file within our routes folder.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">form</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./routes/form&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<p>Take a look in the terminal. You should see an error, indicating Node can&#39;t find that &#39;./routes/form&#39; module. We need to create it!</p>

<p>Create that JS file/module by saving an empty file called <em>form.js</em> to the &quot;routes&quot; directory. Add the following code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">router</span> <span class="o">=</span> <span class="nx">express</span><span class="p">.</span><span class="nx">Router</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* GET form. */</span>
</span><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;My funky form&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">router</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>

<blockquote>
<p>Remember what this code <code>res.send(&#39;My funky form&#39;);</code> should do? If not, review the previous section.</p>
</blockquote>

<p>Navigate to <a href="http://localhost:3000/form">http://localhost:3000/form</a>. You should see the text &quot;&#39;My funky form&quot; on the page. Sweet.</p>

<h2>Jade</h2>

<p>Jade is a templating language, which compiles down to HTML. It makes it easy to separate logic from markup.</p>

<p>Take a quick look at the <em>layout.jade</em> and <em>index.jade</em> files within the &quot;views&quot; folder. There&#39;s a relationship between those two files. It&#39;s called inheritance. We define the base structure in the <em>layout</em> file, which contains common structure that can be reused in multiple places.</p>

<p>Do you see the <code>block</code> keyword?</p>

<p>What really happens when the <em>index</em> file is rendered is that it first inherits the base template because of the <code>extends</code> keywords. So, the <em>layout</em> template then gets rendered, which eventually pulls in the child template, overwriting the <code>block</code> keyword with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>h1= title
</span><span class='line'>  p Welcome to #{title}
</span></code></pre></td></tr></table></div></figure>

<p>Hope that makes sense. If not, check out <a href="http://www.learnjade.com/tour/template-inheritance/">this</a> resource for more info.</p>

<h3>Setup <em>form.jade</em></h3>

<p>Create a new file called &quot;form.jade&quot; in the &quot;views&quot; directory, and then add the following code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>extends layout
</span><span class='line'>
</span><span class='line'>block content
</span><span class='line'>  h1= title
</span><span class='line'>  p Welcome to #{title}
</span></code></pre></td></tr></table></div></figure>

<p>The same thing is happening here with inheritance. If you&#39;re unfamiliar with Jade syntax, <code>title</code> is essentially a variable, which we can pass in from <code>./routes/form.js</code>.</p>

<p>Update <code>./routes/form.js</code> by changing-</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;My funky form&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<p>To:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">res</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="s1">&#39;form&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;My funky form&#39;</span> <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>This just says, &quot;When a user hits the <code>/form</code> endpoint, render the <em>form.jade</em> file and pass in <code>My funky form</code> as the title.&quot;</p>

<blockquote>
<p>Keep in mind that all Jade files are converted to HTML. Browsers can&#39;t read the Jade syntax, so it must be in HTML by the time the end user sees it.</p>
</blockquote>

<p>Ready to test? Simple refresh <a href="http://localhost:3000/form">http://localhost:3000/form</a>.</p>

<p>Did it work? If yes, move on. If not, go back through this section and review. Look in your terminal as well to see the error(s). If you&#39;re having problems, don&#39;t beat yourself up. It&#39;s all part of learning!</p>

<h3>Update <em>form.jade</em></h3>

<p>So, let&#39;s update the Jade syntax to load a form.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>extends layout
</span><span class='line'>
</span><span class='line'>block content
</span><span class='line'>  //- passed into layout.jade when form.jade is rendered
</span><span class='line'>  block content
</span><span class='line'>    h1= title
</span><span class='line'>    form(method=&quot;post&quot; action=&quot;/create&quot;)
</span><span class='line'>      label(for=&quot;comment&quot;) Got something to say:
</span><span class='line'>      input(type=&quot;text&quot;, name=&quot;comment&quot;, value=comment)
</span><span class='line'>      input(type=&quot;submit&quot;, value=&quot;Save&quot;)
</span></code></pre></td></tr></table></div></figure>

<p>I&#39;m not going to touch on all the Jade syntax, but essentially, we have just a basic HTML form to submit comments.</p>

<p>Refresh your browser. Do you see the form? Try clicking save. What happens? Well, you just tried to send a POST request to the <code>/create</code> endpoint, which does not exist. Let&#39;s set it up.</p>

<h2>Add route handler for <code>/create</code></h2>

<p>Open <em>app.js</em> and add a new route:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="s1">&#39;/create&#39;</span><span class="p">,</span> <span class="nx">form</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<blockquote>
<p>Notice how we&#39;re using the same <code>form</code> variable. What does this mean?</p>
</blockquote>

<p>Open <em>form.js</em> to add the logic for this new route:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">router</span> <span class="o">=</span> <span class="nx">express</span><span class="p">.</span><span class="nx">Router</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* GET form. */</span>
</span><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="s1">&#39;form&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;My funky form&#39;</span> <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* POST form. */</span>
</span><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">comment</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">redirect</span><span class="p">(</span><span class="s1">&#39;form&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">router</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>

<p>1Test this out again. Now, when you submit the form, we have the <code>/create</code> endpoint setup, which then grabs the text from the input box via <code>req.body.comment</code>. Make sure the text is consoled to your terminal.</p>

<p>Okay. So, we are handling the routes, rendering the right template, let&#39;s now setup Mongoose to save the data from our form.</p>

<h2>Setup Mongoose</h2>

<p><a href="http://mongoosejs.com/">Mongoose</a> is awesome. Start with defining the Schema, which then maps to a collection in Mongo. It utilizes OOP.</p>

<p>Create a file called <em>database.js</em> in your app&#39;s root directory, then add the following code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">mongoose</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;mongoose&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">Schema</span>   <span class="o">=</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">Schema</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">Comment</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Schema</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">title</span> <span class="o">:</span> <span class="nb">String</span><span class="p">,</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">mongoose</span><span class="p">.</span><span class="nx">model</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">,</span> <span class="nx">Comment</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">mongoose</span><span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="s1">&#39;mongodb://localhost/node-comment&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<p>Here, we required/included the Mongoose library along with a reference to the <code>Schema()</code> method. As said, you always start with defining the schema, then we linked it to collection called &quot;comments&quot;. Finally, we opened a connection to an instance of our local MongoDB.</p>

<blockquote>
<p>If you don&#39;t have the MongoDB server running. Do so now. Open a new terminal window, and run the command <code>sudo mongod</code>.</p>
</blockquote>

<p>Next, open <em>app.js</em> and require the Mongoose config at the very top of the file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// mongoose config</span>
</span><span class='line'><span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./database&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<p>With Mongoose setup, we need to update <em>form.js</em> to create (via POST) and read (via GET) data from the Mongo collection.</p>

<h2>Handling form GET requests</h2>

<p>Open <em>form.js</em>. Require Mongoose as well as the <code>comments</code> model, which we already created:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">mongoose</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;mongoose&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">Comment</span> <span class="o">=</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">model</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<p>Now, update the function handling GET requests:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="cm">/* GET form. */</span>
</span><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">Comment</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">comments</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">comments</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span>
</span><span class='line'>      <span class="s1">&#39;form&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="p">{</span><span class="nx">title</span> <span class="o">:</span> <span class="s1">&#39;My funky form&#39;</span><span class="p">,</span> <span class="nx">comments</span> <span class="o">:</span> <span class="nx">comments</span><span class="p">}</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p><code>Comment.find()</code> grabs all comments from the Mongo collection, which we assign to the variable <code>comments</code>. We can now use that variable in our Jade file.</p>

<h2>Update <em>form.jade</em> to display comments</h2>

<p>Let&#39;s add a loop to iterate through the comments and then display the <code>title</code> key from the collection.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>extends layout
</span><span class='line'>
</span><span class='line'>block content
</span><span class='line'>  //- passed into layout.jade when form.jade is rendered
</span><span class='line'>  block content
</span><span class='line'>    h1= title
</span><span class='line'>    form(method=&quot;post&quot; action=&quot;/create&quot;)
</span><span class='line'>      label(for=&quot;comment&quot;) Got something to say:
</span><span class='line'>      input(type=&quot;text&quot;, name=&quot;comment&quot;, value=comment)
</span><span class='line'>      input(type=&quot;submit&quot;, value=&quot;Save&quot;)
</span><span class='line'>    br
</span><span class='line'>    - for comment in comments
</span><span class='line'>      p= comment.title
</span></code></pre></td></tr></table></div></figure>

<blockquote>
<p>Do you remember where we set the <code>title</code> key? Check out the database schema in <em>database.js</em>.</p>
</blockquote>

<p>Before this will actually work - e.g., display comments - we first need to add the logic to insert data into the Mongo collection.</p>

<h2>Handling form POST requests</h2>

<p>Back in <em>form.js</em>, update the function handling POST requests:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="cm">/* POST form. */</span>
</span><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">new</span> <span class="nx">Comment</span><span class="p">({</span><span class="nx">title</span> <span class="o">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">comment</span><span class="p">})</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">save</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">comment</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">comment</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">redirect</span><span class="p">(</span><span class="s1">&#39;form&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>The simply saves a new comment, which again is grabbed from the form via <code>req.body.comment</code>.</p>

<h2>Sanity Check</h2>

<p>Refresh you app. Add some comments. If you&#39;ve done everything correctly, the comments should be displayed beneath the form.</p>

<h2>Conclusion</h2>

<p>That&#39;s it. Grab the code from the <a href="https://github.com/mjhea0/node-form-refresh">repository</a>. Cheers!</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Kickstarting Angular with Gulp and Browserify, Part 2 - Browserify]]></title>
    <link href="http://mjhea0.github.com/blog/2014/08/15/kickstarting-angular-with-gulp-and-browserify-part-2/"/>
    
    <updated>2014-08-15T09:56:00-06:00</updated>
    <id>http://mjhea0.github.com/blog/2014/08/15/kickstarting-angular-with-gulp-and-browserify-part-2</id>
    
    <content type="html"><![CDATA[<p>Hello. Welcome to the second half. <a href="http://mherman.org/blog/2014/08/14/kickstarting-angular-with-gulp">Last time</a>, we built a nice Angular starter project, utilizing Gulp and Bower. Let&#39;s take this a step further and add the power of <a href="http://browserify.org/">Browserify</a> into the mix. Before you read any further, check out the <a href="https://github.com/substack/browserify-handbook#introduction">Introduction</a> to the <a href="https://github.com/substack/browserify-handbook">Browserify Handbook</a> to learn about the problems that Browserify solves.</p>

<blockquote>
<p>Just want the code? Get it <a href="https://github.com/mjhea0/angular-gulp-browserify-seed">here</a>.</p>
</blockquote>

<h2>Install Dependencies</h2>

<p>Let&#39;s get Browserify installed&#8230;</p>

<h3>First, install Browserify globally</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>npm install -g browserify
</span></code></pre></td></tr></table></div></figure>

<h3>Then install the Gulp dependencies locally</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>npm install gulp-browserify gulp-concat --save
</span></code></pre></td></tr></table></div></figure>

<p>The <a href="https://github.com/deepak1556/gulp-browserify">former</a> dependency allows you to run Browserify from Gulp, while the <a href="https://github.com/wearefractal/gulp-concat">latter</a> concatenates all the Bowerserify dependencies into a single JS file.</p>

<h2>Update the Gulpfile</h2>

<h3>Update the requirements</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">browserify</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp-browserify&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">concat</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp-concat&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<h3>Add the following tasks</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;browserify&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">([</span><span class="s1">&#39;app/js/main.js&#39;</span><span class="p">])</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">browserify</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">insertGlobals</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">debug</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'>  <span class="p">}))</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">concat</span><span class="p">(</span><span class="s1">&#39;bundled.js&#39;</span><span class="p">))</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="s1">&#39;./app/js&#39;</span><span class="p">))</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<h3>Now update the default task</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// default task</span>
</span><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;default&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="p">[</span><span class="s1">&#39;lint&#39;</span><span class="p">,</span> <span class="s1">&#39;browserify&#39;</span><span class="p">,</span> <span class="s1">&#39;connect&#39;</span><span class="p">]</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<h2>Update the HTML</h2>

<p>Change the included JS file in <em>index.html</em>.</p>

<p>From:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;./js/main.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p>To:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;./js/bundled.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<h3>Test</h3>

<p>To recap:</p>

<ol>
<li>We added Browserify</li>
<li>Updated the build process so that a single JS file named <em>bundled.js</em> is created</li>
<li>Updated <em>index.html</em> to include that new JS file</li>
</ol>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>gulp
</span></code></pre></td></tr></table></div></figure>

<p>Navigate to <a href="http://localhost:8888/">http://localhost:8888/</a> and you should still see:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Angular-Gulp-Browserify-Starter
</span><span class='line'>
</span><span class='line'>Testing...
</span></code></pre></td></tr></table></div></figure>

<p>Notice the <em>bundled.js</em> file. Again, this is generated by <code>concat(&#39;bundled.js&#39;)</code>. If you kill the server, then try to run it again, you&#39;ll get an error. Essentially, the <em>bundled.js</em> file needs to be removed before each run. So update the <code>clean</code> task:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>gulp.task<span class="o">(</span><span class="s1">&#39;clean&#39;</span>, <span class="k">function</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    gulp.src<span class="o">(</span><span class="s1">&#39;./dist/*&#39;</span><span class="o">)</span>
</span><span class='line'>      .pipe<span class="o">(</span>clean<span class="o">({</span>force: <span class="nb">true</span><span class="o">}))</span>;
</span><span class='line'>    gulp.src<span class="o">(</span><span class="s1">&#39;./app/js/bundled.js&#39;</span><span class="o">)</span>
</span><span class='line'>      .pipe<span class="o">(</span>clean<span class="o">({</span>force: <span class="nb">true</span><span class="o">}))</span>;
</span><span class='line'><span class="o">})</span>;
</span></code></pre></td></tr></table></div></figure>

<h2>Browserify</h2>

<p>Remember all those Bower components in the <em>index.js</em> file? Let&#39;s clean up that mess by requiring our app&#39;s dependencies with Browserify.</p>

<h3>Update the HTML (again)</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">ng-app=</span><span class="s">&quot;SampleApp&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head</span> <span class="na">lang=</span><span class="s">&quot;en&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;viewport&quot;</span> <span class="na">content=</span><span class="s">&quot;width=device-width, initial-scale=1.0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;description&quot;</span> <span class="na">content=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;author&quot;</span> <span class="na">content=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;title&gt;</span>Angular-Gulp-Browserify-Starter<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- styles --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;bower_components/bootstrap/dist/css/bootstrap.css&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;bower_components/fontawesome/css/font-awesome.css&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;bower_components/animate.css/animate.css&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;css/main.css&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;h1&gt;</span>Angular-Gulp-Browserify-Starter<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>      <span class="c">&lt;!-- views --&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">ng-view</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- scripts --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;bower_components/jquery/dist/jquery.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;bower_components/bootstrap/dist/js/bootstrap.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;./js/bundled.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p>Now, we need to use Browserify to require the following depencies in our app:</p>

<ol>
<li><em>angular.js</em></li>
<li><em>angular-route.js</em></li>
<li><em>angular-animate.js</em></li>
</ol>

<blockquote>
<p>Why don&#39;t we replace all of our Bower components? It&#39;s good to use both Bower and Browserify in case NPM does not have a certain dependency that Bower may have. The point of this example is to show you how to use both.</p>
</blockquote>

<h3>Install Requirements</h3>

<p>Go ahead and install the requirements we need via NPM:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>npm install angular angular-route angular-animate --save
</span></code></pre></td></tr></table></div></figure>

<h3>Update JS</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="s1">&#39;use strict&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;angular&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;angular-route&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;angular-animate&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;SampleApp&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;ngRoute&#39;</span><span class="p">,</span> <span class="s1">&#39;ngAnimate&#39;</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">.</span><span class="nx">config</span><span class="p">([</span>
</span><span class='line'>    <span class="s1">&#39;$locationProvider&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;$routeProvider&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="kd">function</span><span class="p">(</span><span class="nx">$locationProvider</span><span class="p">,</span> <span class="nx">$routeProvider</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$locationProvider</span><span class="p">.</span><span class="nx">hashPrefix</span><span class="p">(</span><span class="s1">&#39;!&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="c1">// routes</span>
</span><span class='line'>      <span class="nx">$routeProvider</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="s2">&quot;/&quot;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">templateUrl</span><span class="o">:</span> <span class="s2">&quot;./partials/partial1.html&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">controller</span><span class="o">:</span> <span class="s2">&quot;MainController&quot;</span>
</span><span class='line'>        <span class="p">})</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">otherwise</span><span class="p">({</span>
</span><span class='line'>           <span class="nx">redirectTo</span><span class="o">:</span> <span class="s1">&#39;/&#39;</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">]);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//Load controller</span>
</span><span class='line'>  <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;SampleApp&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;MainController&#39;</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>    <span class="s1">&#39;$scope&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$scope</span><span class="p">.</span><span class="nx">test</span> <span class="o">=</span> <span class="s2">&quot;Testing...&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="p">}());</span>
</span></code></pre></td></tr></table></div></figure>

<p>Now we can include various modules the &quot;Node-way&quot; using <code>require()</code> calls, giving you access to nearly 90,000 <a href="https://www.npmjs.org/">modules</a>.</p>

<h3>Controller</h3>

<p>Let&#39;s abstract out the controller to a file of its own.</p>

<p>First, update <em>main.js</em> again:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="s1">&#39;use strict&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;angular&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;angular-route&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;angular-animate&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">mainCtrl</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./controllers/mainctrl&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;SampleApp&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;ngRoute&#39;</span><span class="p">,</span> <span class="s1">&#39;ngAnimate&#39;</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">.</span><span class="nx">config</span><span class="p">([</span>
</span><span class='line'>    <span class="s1">&#39;$locationProvider&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;$routeProvider&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="kd">function</span><span class="p">(</span><span class="nx">$locationProvider</span><span class="p">,</span> <span class="nx">$routeProvider</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$locationProvider</span><span class="p">.</span><span class="nx">hashPrefix</span><span class="p">(</span><span class="s1">&#39;!&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="c1">// routes</span>
</span><span class='line'>      <span class="nx">$routeProvider</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="s2">&quot;/&quot;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">templateUrl</span><span class="o">:</span> <span class="s2">&quot;./partials/partial1.html&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">controller</span><span class="o">:</span> <span class="s2">&quot;MainController&quot;</span>
</span><span class='line'>        <span class="p">})</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">otherwise</span><span class="p">({</span>
</span><span class='line'>           <span class="nx">redirectTo</span><span class="o">:</span> <span class="s1">&#39;/&#39;</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">])</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//Load controller</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;MainController&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;$scope&#39;</span><span class="p">,</span> <span class="nx">mainCtrl</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="p">}());</span>
</span></code></pre></td></tr></table></div></figure>

<p>Now create a new folder called &quot;controllers&quot; within &quot;app/js&quot;. In the new folder add a new file called <em>mainctrl.js</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">test</span> <span class="o">=</span> <span class="s2">&quot;Testing...&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;required!&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>

<p>This syntax should look familiar if you&#39;ve worked with Node before. We use <code>exports</code> to expose the function, which we then have access to in <em>main.js</em> since it&#39;s part of the requirements.</p>

<h3>Test Again</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>gulp clean
</span><span class='line'><span class="nv">$ </span>gulp
</span></code></pre></td></tr></table></div></figure>

<p>Navigate to <a href="http://localhost:8888/">http://localhost:8888/</a> to make sure everything still works.</p>

<h2>Update the Build</h2>

<p>Now that we have the <code>default</code> task working, let&#39;s update the build process so we can create a deployable build.</p>

<h3>Update the Gulpfile</h3>

<p>Add the following task to the <em>gulpfile</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;browserifyDist&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">([</span><span class="s1">&#39;app/js/main.js&#39;</span><span class="p">])</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">browserify</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">insertGlobals</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">debug</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'>  <span class="p">}))</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">concat</span><span class="p">(</span><span class="s1">&#39;bundled.js&#39;</span><span class="p">))</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="s1">&#39;./dist/js&#39;</span><span class="p">))</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>This task simply updates where the <em>bundled.js</em> is stored after creation.</p>

<p>Finally, update the <code>build</code> task itself adding in the above task:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// build task</span>
</span><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;build&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="p">[</span><span class="s1">&#39;lint&#39;</span><span class="p">,</span> <span class="s1">&#39;minify-css&#39;</span><span class="p">,</span> <span class="s1">&#39;browserifyDist&#39;</span><span class="p">,</span> <span class="s1">&#39;copy-html-files&#39;</span><span class="p">,</span> <span class="s1">&#39;copy-bower-components&#39;</span><span class="p">,</span> <span class="s1">&#39;connectDist&#39;</span><span class="p">]</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<h3>Create a Build</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>gulp build
</span></code></pre></td></tr></table></div></figure>

<p>Check out the live app at <a href="http://localhost:9999/#!/">http://localhost:9999/</a>. Deploy your app, if you&#39;d like.</p>

<h3>Conclusion</h3>

<p>Let&#39;s recap. Over the past two posts, we&#39;ve created a sample app that can be used as a seed for all of your Angular projects. Want to use this in your own projects?</p>

<ol>
<li>Clone the <a href="https://github.com/mjhea0/angular-gulp-browserify-seed">repo</a></li>
<li>Install the global requirements: <code>npm install -g gulp bower browserify</code></li>
<li>Install the local requirements: <code>npm install</code></li>
<li>Install the Bower components: <code>bower install</code></li>
<li>Run locally: <code>gulp</code></li>
<li>Create a build: <code>gulp build</code></li>
</ol>

<p>I encourage you to add your favorite libraries and modules, which is easy to do. Looking for a client side dependency? Be sure to check <a href="https://www.npmjs.org/">NPM</a> first before relying on Bower so you can take advantage of the simple <code>require</code> calls, via Browserify, which reduces code clutter and enables you to write modular, re-usable code.</p>

<p><strong>As always, I&#39;d love to hear your feedback. How are you using Browserify in your projects? Comment below.</strong></p>

<p>Thanks for reading.</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Kickstarting Angular with Gulp and Browserify, Part 1 - Gulp and Bower]]></title>
    <link href="http://mjhea0.github.com/blog/2014/08/14/kickstarting-angular-with-gulp/"/>
    
    <updated>2014-08-14T08:17:00-06:00</updated>
    <id>http://mjhea0.github.com/blog/2014/08/14/kickstarting-angular-with-gulp</id>
    
    <content type="html"><![CDATA[<p>Let&#39;s develop an Angular boilerplate. Why? Despite the plethora of Angular seeds/generators/templates/boilerplates/starters/etc. on Github, none of them will ever do <em>exactly</em> what you want unless you build your own, piece by piece. By designing your own, you will better understand each component as well as how each fits into the greater project. Stop fighting against a boilerplate that just doesn&#39;t fit your needs and start from scratch. Keep it simple, as you learn the process.</p>

<p><strong>In this first part, we&#39;ll start with Angular and Gulp, getting a working project setup. Next <a href="http://mherman.org/blog/2014/08/15/kickstarting-angular-with-gulp-and-browserify-part-2/#.U-4co4BdUZ0">time</a> we&#39;ll add Browserify into the mix.</strong></p>

<blockquote>
<p>This tutorial assumes you have Node.js installed and have working knowledge of NPM and Angular. Just want the code? Get it <a href="https://github.com/mjhea0/angular-gulp-browserify-seed">here</a>.</p>
</blockquote>

<h2>Project Setup</h2>

<h3>Install Dependencies</h3>

<h4>Setup a project folder and create a <em>package.json</em> file:</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>mkdir project_name <span class="o">&amp;&amp;</span> <span class="nb">cd </span>project_name
</span><span class='line'><span class="nv">$ </span>npm init
</span></code></pre></td></tr></table></div></figure>

<p>The <code>npm init</code> command helps you create your project&#39;s base configuration through an interactive prompt. Be sure to update the &#39;entry point&#39; to &#39;gulpfile.js&#39;. You can just accept the defaults on the remaining prompts.</p>

<p>Do the same for Bower:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>bower init
</span></code></pre></td></tr></table></div></figure>

<p>Accept all the defaults. After the file is created update the <code>ignore</code> list:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s2">&quot;ignore&quot;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>  <span class="s2">&quot;**/.*&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;node_modules&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;app/bower_components&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;test&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;tests&quot;</span>
</span><span class='line'><span class="p">],</span>
</span></code></pre></td></tr></table></div></figure>

<h4>Install global dependencies:</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>npm install -g gulp bower
</span></code></pre></td></tr></table></div></figure>

<h4>Bower install directory</h4>

<p>You can specify where you want the dependencies (commonly known as bower components) installed to by adding a <em>.bowerrc</em> file and adding the following code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;directory&quot;</span><span class="o">:</span> <span class="s2">&quot;/app/bower_components&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<h4>Install local dependencies:</h4>

<p><em>NPM</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>npm install gulp bower gulp-clean gulp-jshint gulp-uglify gulp-minify-css gulp-connect --save
</span></code></pre></td></tr></table></div></figure>

<p><em>Bower</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$bower</span> install angular angular-animate angular-route jquery animate.css bootstrap fontawesome --save
</span></code></pre></td></tr></table></div></figure>

<blockquote>
<p>The <code>--save</code> flag adds the dependencies to the <em>package.json</em> and <em>bower.json</em> files, respectively.</p>
</blockquote>

<p>We&#39;ll address each of these dependencies shortly. For now, be sure you understand the project&#39;s core dependencies:</p>

<ul>
<li><strong><a href="http://gulpjs.com/">Gulp</a></strong> is a Javascript task runner, used to automate repetitive tasks (i.e., minifying, linting, testing, building, compiling) to simplify the build process.</li>
<li><strong><a href="http://bower.io/">Bower</a></strong> manages front-end dependencies.</li>
</ul>

<h3>Folder Structure</h3>

<p>Let&#39;s setup a base folder structure:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>.
</span><span class='line'>├── app
</span><span class='line'>│   ├── bower_components
</span><span class='line'>│   ├── css
</span><span class='line'>│   │    └── main.css
</span><span class='line'>│   ├── img
</span><span class='line'>│   ├── index.html
</span><span class='line'>│   ├── partials
</span><span class='line'>│   │    ├── partial1.html
</span><span class='line'>│   │    └── partial2.html
</span><span class='line'>│   └── js
</span><span class='line'>│   │    └── main.js
</span><span class='line'>├── .bowerrc
</span><span class='line'>├── .gitignore
</span><span class='line'>├── bower.json
</span><span class='line'>├── gulpfile.js
</span><span class='line'>├── node_modules
</span><span class='line'>└── package.json
</span></code></pre></td></tr></table></div></figure>

<p>Add the files and folders not already included. This structure is based on the popular <a href="https://github.com/angular/angular-seed">Angular Seed</a> boilerplate, developed by the Angular team.</p>

<h3>Gulp</h3>

<p>To start, we just need the following code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// gulp</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">gulp</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// plugins</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">connect</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp-connect&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;connect&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">connect</span><span class="p">.</span><span class="nx">server</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">root</span><span class="o">:</span> <span class="s1">&#39;app/&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">port</span><span class="o">:</span> <span class="mi">8888</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>This allows us to serve our future Angular app on a development server running on port 8888.</p>

<h3>Test</h3>

<p>Let&#39;s test it out. Add the word &#39;hi&#39; to the <em>index.html</em> file, then run the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>gulp connect
</span></code></pre></td></tr></table></div></figure>

<p>Navigate to <a href="http://localhost:8888/">http://localhost:8888/</a> and you should see &#39;hi&#39; staring back at you. Let&#39;s build a quick sample app. Keep the server running&#8230;</p>

<h2>Develop a Sample App</h2>

<h3><em>index.html</em></h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">ng-app=</span><span class="s">&quot;SampleApp&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head</span> <span class="na">lang=</span><span class="s">&quot;en&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;viewport&quot;</span> <span class="na">content=</span><span class="s">&quot;width=device-width, initial-scale=1.0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;description&quot;</span> <span class="na">content=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;author&quot;</span> <span class="na">content=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;title&gt;</span>Angular-Gulp-Browserify-Starter<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- styles --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;bower_components/bootstrap/dist/css/bootstrap.css&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;bower_components/fontawesome/css/font-awesome.css&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;bower_components/animate.css/animate.css&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;css/main.css&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;h1&gt;</span>Angular-Gulp-Browserify-Starter<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>      <span class="c">&lt;!-- views --&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">ng-view</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- scripts --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;bower_components/jquery/dist/jquery.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;bower_components/angular/angular.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;bower_components/angular-route/angular-route.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;bower_components/angular-animate/angular-animate.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;bower_components/bootstrap/dist/js/bootstrap.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;js/main.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p>This should look familiar. The <code>ng-app</code> directive initiates an Angular app while <code>ng-view</code> sets the stage for routing.</p>

<h3><em>main.js</em></h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="s1">&#39;use strict&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;SampleApp&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;ngRoute&#39;</span><span class="p">,</span> <span class="s1">&#39;ngAnimate&#39;</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">.</span><span class="nx">config</span><span class="p">([</span>
</span><span class='line'>    <span class="s1">&#39;$locationProvider&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;$routeProvider&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="kd">function</span><span class="p">(</span><span class="nx">$locationProvider</span><span class="p">,</span> <span class="nx">$routeProvider</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$locationProvider</span><span class="p">.</span><span class="nx">hashPrefix</span><span class="p">(</span><span class="s1">&#39;!&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="c1">// routes</span>
</span><span class='line'>      <span class="nx">$routeProvider</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="s2">&quot;/&quot;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">templateUrl</span><span class="o">:</span> <span class="s2">&quot;./partials/partial1.html&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">controller</span><span class="o">:</span> <span class="s2">&quot;MainController&quot;</span>
</span><span class='line'>        <span class="p">})</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">otherwise</span><span class="p">({</span>
</span><span class='line'>           <span class="nx">redirectTo</span><span class="o">:</span> <span class="s1">&#39;/&#39;</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">]);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//Load controller</span>
</span><span class='line'>  <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;SampleApp&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;MainController&#39;</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>    <span class="s1">&#39;$scope&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$scope</span><span class="p">.</span><span class="nx">test</span> <span class="o">=</span> <span class="s2">&quot;Testing...&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="p">}());</span>
</span></code></pre></td></tr></table></div></figure>

<p>Again, this should be relatively straightforward. We setup the basic Angular code to establish a route handler along with a controller that passes the variable <code>test</code> to the template.</p>

<h3><em>partial1.html</em></h3>

<p>Now let&#39;s add the partial template:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;p&gt;</span>{{ test }}<span class="nt">&lt;/p&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<h3>Test</h3>

<p>Back in your browser, refresh the page. You should see the text:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>Angular-Gulp-Browserify-Starter
</span><span class='line'>
</span><span class='line'>Testing...
</span></code></pre></td></tr></table></div></figure>

<h2>Create the Build</h2>

<p>Now that our app is working locally, let&#39;s modify our <em>gulpfile.js</em> to generate a deployable build. Kill the server.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// gulp</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">gulp</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// plugins</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">connect</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp-connect&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">jshint</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp-jshint&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">uglify</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp-uglify&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">minifyCSS</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp-minify-css&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">clean</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp-clean&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// tasks</span>
</span><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;lint&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">([</span><span class="s1">&#39;./app/**/*.js&#39;</span><span class="p">,</span> <span class="s1">&#39;!./app/bower_components/**&#39;</span><span class="p">])</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">jshint</span><span class="p">())</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">jshint</span><span class="p">.</span><span class="nx">reporter</span><span class="p">(</span><span class="s1">&#39;default&#39;</span><span class="p">))</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">jshint</span><span class="p">.</span><span class="nx">reporter</span><span class="p">(</span><span class="s1">&#39;fail&#39;</span><span class="p">));</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;clean&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="s1">&#39;./dist/*&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">clean</span><span class="p">({</span><span class="nx">force</span><span class="o">:</span> <span class="kc">true</span><span class="p">}));</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;minify-css&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">opts</span> <span class="o">=</span> <span class="p">{</span><span class="nx">comments</span><span class="o">:</span><span class="kc">true</span><span class="p">,</span><span class="nx">spare</span><span class="o">:</span><span class="kc">true</span><span class="p">};</span>
</span><span class='line'>  <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">([</span><span class="s1">&#39;./app/**/*.css&#39;</span><span class="p">,</span> <span class="s1">&#39;!./app/bower_components/**&#39;</span><span class="p">])</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">minifyCSS</span><span class="p">(</span><span class="nx">opts</span><span class="p">))</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="s1">&#39;./dist/&#39;</span><span class="p">))</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;minify-js&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">([</span><span class="s1">&#39;./app/**/*.js&#39;</span><span class="p">,</span> <span class="s1">&#39;!./app/bower_components/**&#39;</span><span class="p">])</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">uglify</span><span class="p">({</span>
</span><span class='line'>      <span class="c1">// inSourceMap:</span>
</span><span class='line'>      <span class="c1">// outSourceMap: &quot;app.js.map&quot;</span>
</span><span class='line'>    <span class="p">}))</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="s1">&#39;./dist/&#39;</span><span class="p">))</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;copy-bower-components&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="s1">&#39;./app/bower_components/**&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="s1">&#39;dist/bower_components&#39;</span><span class="p">));</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;copy-html-files&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="s1">&#39;./app/**/*.html&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="s1">&#39;dist/&#39;</span><span class="p">));</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;connect&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">connect</span><span class="p">.</span><span class="nx">server</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">root</span><span class="o">:</span> <span class="s1">&#39;app/&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">port</span><span class="o">:</span> <span class="mi">8888</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;connectDist&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">connect</span><span class="p">.</span><span class="nx">server</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">root</span><span class="o">:</span> <span class="s1">&#39;dist/&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">port</span><span class="o">:</span> <span class="mi">9999</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// default task</span>
</span><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;default&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="p">[</span><span class="s1">&#39;lint&#39;</span><span class="p">,</span> <span class="s1">&#39;connect&#39;</span><span class="p">]</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'><span class="c1">// build task</span>
</span><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;build&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="p">[</span><span class="s1">&#39;lint&#39;</span><span class="p">,</span> <span class="s1">&#39;minify-css&#39;</span><span class="p">,</span> <span class="s1">&#39;minify-js&#39;</span><span class="p">,</span> <span class="s1">&#39;copy-html-files&#39;</span><span class="p">,</span> <span class="s1">&#39;copy-bower-components&#39;</span><span class="p">,</span> <span class="s1">&#39;connectDist&#39;</span><span class="p">]</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<p><strong>What&#39;s happening here?</strong></p>

<ol>
<li><a href="https://github.com/spenceralger/gulp-jshint">gulp-jshint</a> checks for code quality in the JS files. If there are any issues the build fails and all errors output to the console.</li>
<li><a href="https://github.com/peter-vilja/gulp-clean">gulp-clean</a> removes the entire build folder so that we start fresh every time we generate a new build.</li>
<li><a href="https://github.com/terinjokes/gulp-uglify">gulp-uglify</a> and <a href="https://github.com/jonathanepollack/gulp-minify-css">gulp-minify-css</a> minify JS and CSS, respectively.</li>
</ol>

<h3>Build commands</h3>

<p><strong>Default</strong></p>

<p>The default task, <code>gulp</code>, is a compound task that runs both the <code>lint</code> and <code>connect</code> tasks. Again, this just serves the files in the &quot;app&quot; folder on <a href="http://localhost:8888/">http://localhost:8888/</a>.</p>

<p><strong>Build</strong></p>

<p>The build task creates a new directory called &quot;dist&quot;, runs the linter, minifies the CSS and JS files, and copies all the HTML files and Bower Components. You can then see what the final build looks like on <a href="http://localhost:9999/">http://localhost:9999/</a> before deployment. You should also run the <code>clean</code> task before you generate a build.</p>

<p>Test this out:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>gulp clean build
</span></code></pre></td></tr></table></div></figure>

<h2>Conclusion</h2>

<p>Well, hopefully you now have a better understanding of how Gulp can greatly simply the build process, handling a number of repetitive tasks. Next time we&#39;ll clean up some of the mess that the Bower components leave behind by adding Browserify into the mix and detail a nice workflow that you can use for all your Angular projects.</p>

<p>Leave questions and comments below. Cheers!</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Primer on AngularJS Services]]></title>
    <link href="http://mjhea0.github.com/blog/2014/06/12/primer-on-angularjs-service-types/"/>
    
    <updated>2014-06-12T07:39:00-06:00</updated>
    <id>http://mjhea0.github.com/blog/2014/06/12/primer-on-angularjs-service-types</id>
    
    <content type="html"><![CDATA[<h2>What&#39;s a service &#8230;</h2>

<p>Much to my surprise, the Angular <a href="https://docs.angularjs.org/guide/services">documentation</a> provides a great definition of a service:</p>

<blockquote>
<p>Angular services are substitutable objects that are wired together using dependency injection (DI). You can use services to organize and share code across your app.</p>

<p>Angular services are:</p>

<ol>
<li>Lazily instantiated – Angular only instantiates a service when an application component depends on it.</li>
<li>Singletons – Each component dependent on a service gets a reference to the single instance generated by the service factory.</li>
</ol>

<p>Angular offers several useful services (like $http), but for most applications you&#39;ll also want to create your own.</p>
</blockquote>

<p>Services are powerful in that they help keep your code DRY by encapsulating functionality. From an architecture standpoint alone, services help separate out concerns, ensuring that each object is responsible for a single piece of functionality. For example, it&#39;s common for beginners to put <em>all</em> of their app&#39;s functionality into the controller. This is fine for smaller apps, but just know that it&#39;s not a good practice and your controller will balloon quickly as your app scales.</p>

<p>Get in the habit early on to separate concerns. If your controller is handling more than just defining the scope or initial state of your app, connecting your models and views, then it&#39;s are <em>probably</em> doing too much.</p>

<p>We are all (err, I am) guilty of this. Let&#39;s look at a very simple app &#8230;</p>

<h4>HTML:</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!doctype html&gt;</span>
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">&quot;en&quot;</span> <span class="na">ng-app=</span><span class="s">&#39;myApp&#39;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;UTF-8&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;title&gt;</span>Angular Boilerplate<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>  <span class="c">&lt;!-- styles --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&quot;http://netdna.bootstrapcdn.com/bootswatch/3.1.1/yeti/bootstrap.min.css&quot;</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">media=</span><span class="s">&quot;screen&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&quot;main.css&quot;</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">media=</span><span class="s">&quot;screen&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">ng-controller=</span><span class="s">&quot;myController&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;h1&gt;</span>Enter Quantity:<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;number&quot;</span> <span class="na">ng-model=</span><span class="s">&quot;quantity&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
</span><span class='line'>        <span class="nt">&lt;h2&gt;</span>Total Cost: {{calculate(quantity) | currency}}<span class="nt">&lt;/h2&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- scripts --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;https://ajax.googleapis.com/ajax/libs/angularjs/1.2.16/angular.min.js&quot;</span> <span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;http://code.jquery.com/jquery-1.11.0.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;http://netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;main.js&quot;</span> <span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<h4>Javascript:</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;myApp&#39;</span><span class="p">,</span> <span class="p">[])</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;myController&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">quantity</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">calculate</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">number</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">number</span> <span class="o">*</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<blockquote>
<p>You can grab the code from <a href="https://github.com/mjhea0/thinkful-mentor/tree/master/angular/fundamentals/services">this</a> repo or from <a href="http://jsfiddle.net/mjhea0/fS4P6/">JSFiddle</a>.</p>
</blockquote>

<p>So, this just takes an input value (integer or floating point) and multiplies it by 10 in the <code>calculate()</code> function, which then updates the DOM. Not only is the controller defining scope - but it also calculates the total. Despite this being a small app, too much is happening in the controller. We should separate out the calculate <code>function()</code> into a separate service.</p>

<h2>Creating a custom service</h2>

<p>By moving the business logic out of the controller, abstracting much of the code, our controller becomes leaner. <em>It&#39;s a good practice to write fat services and lean controllers</em>.</p>

<p>To do this, we are will use a service type called a factory, which is the most common type.</p>

<blockquote>
<p>This is a good time to stop and learn the major service types - constants, values, services, providers, and decorators. Check out <a href="http://angular-tips.com/blog/2013/08/understanding-service-types/">this</a> excellent article for more on the various service types and how and when to use them. <strong>All are slightly different, but, in general, all are dependency injected modules of functionality</strong>.</p>
</blockquote>

<p>Within the same JS file add the following code beneath the controller:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Service</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">factory</span><span class="p">(</span><span class="s1">&#39;calculateService&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">calculate</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">number</span><span class="p">){</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">number</span> <span class="o">*</span> <span class="mi">10</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>This code creates a service called <code>calculateService</code>. You may be wondering why we have to use the <code>factory()</code> method for this instead of just a regular function. It&#39;s simple: That method registers the service with Angular; and with Angular aware of its existence, it can be dependency injected into the controller, giving us access to the defined functions - e.g, <code>calculate()</code> within the controller. We can now use this in multiple places within our application, allowing for easy code reuse.</p>

<p>So, we have simply abstracted the logic of taking the user inputted number and multiplying it by 10.</p>

<p>Now update the controller:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;myController&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">calculateService</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">quantity</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
</span><span class='line'>   <span class="nx">$scope</span><span class="p">.</span><span class="nx">calculate</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">number</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">calculateService</span><span class="p">.</span><span class="nx">calculate</span><span class="p">(</span><span class="nx">number</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>And you&#39;re app should be working. Test it out. <a href="http://jsfiddle.net/mjhea0/Q9b23/">JSFiddle</a></p>

<h2>Conclusion</h2>

<p>Hopefully, you now have a better sense as to -</p>

<ul>
<li>What a service is,</li>
<li>Why you should use them, and</li>
<li>How to use them.</li>
</ul>

<p>Want some practice? Create separate services for each piece of functionality in <a href="https://github.com/mjhea0/thinkful-mentor/tree/master/angular/projects/waitstaff-calc/waitstaff-flask">this</a> app&#39;s controller. Remember: The controller is responsible for defining scope, all else should be moved out of the controller altogether.</p>

<p>If you need help, start by creating a service that handles the actual API calls. Perhaps use a service name of <code>getData</code> then set up functions for the different HTTP requests - i.e., <code>readData()</code> for a GET request and <code>writeData()</code> for a POST. Then when you use dependency injection to add this service to your controller, you can simply use the following syntax for accessing the <code>readData()</code> function in the controller:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">getData</span><span class="p">.</span><span class="nx">readData</span><span class="p">(</span><span class="nx">some_argument</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>Presumably you would pass in an argument supplied by the user. Now you can access that function from the controller without knowing anything about the actual service except for how you use it. The controller is cleaner because you abstracted out all the messy code for making API calls.</p>

<p>Good luck!</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Adding a Captcha to Sinatra to Minimize Spam]]></title>
    <link href="http://mjhea0.github.com/blog/2014/05/04/adding-a-captcha-to-sinatra-to-minimize-spam/"/>
    
    <updated>2014-05-04T18:43:00-06:00</updated>
    <id>http://mjhea0.github.com/blog/2014/05/04/adding-a-captcha-to-sinatra-to-minimize-spam</id>
    
    <content type="html"><![CDATA[<p>Spam is irritating.</p>

<p>It&#39;s been especially irritating on a <a href="http://sinatra-sings.herokuapp.com/">blog</a> I created for a Sinatra <a href="http://mherman.org/blog/2013/06/08/designing-with-class-sinatra-plus-postgresql-plus-heroku">tutorial</a> hosted on Heroku where the database was filling up so quickly I had to run a <a href="https://github.com/mjhea0/sinatra-blog/blob/master/reset.rb">script</a> to delete all rows once a week. Ugh.</p>

<p>So, let’s add a <a href="https://github.com/bmizerany/sinatra-captcha">captcha</a> to our blog in just five simple steps that will take less than five minutes element in order to help prevent so much spam.</p>

<h2>Steps</h2>

<h3>1. Add the following gem to your <em>Gemfile</em>:</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;sinatra-captcha&#39;</span>
</span></code></pre></td></tr></table></div></figure>

<h3>2. Update your gems and their dependencies:</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">bundle</span> <span class="n">install</span>
</span></code></pre></td></tr></table></div></figure>

<h3>3. Update <em>app.rb</em>:</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;sinatra/captcha&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">post</span> <span class="s2">&quot;/posts&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">halt</span><span class="p">(</span><span class="mi">401</span><span class="p">,</span> <span class="s2">&quot;invalid captcha&quot;</span><span class="p">)</span> <span class="k">unless</span> <span class="n">captcha_pass?</span>
</span><span class='line'>  <span class="vi">@post</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:post</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="vi">@post</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>    <span class="n">redirect</span> <span class="s2">&quot;posts/</span><span class="si">#{</span><span class="vi">@post</span><span class="o">.</span><span class="n">id</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="ss">:notice</span> <span class="o">=&gt;</span> <span class="s1">&#39;Congrats! Love the new post. (This message will disapear in 4 seconds.)&#39;</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">redirect</span> <span class="s2">&quot;posts/create&quot;</span><span class="p">,</span> <span class="ss">:error</span> <span class="o">=&gt;</span> <span class="s1">&#39;Something went wrong. Try again. (This message will disapear in 4 seconds.)&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>

<h3>4. Update the form in the <em>create.erb</em> view:</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">form</span> <span class="n">action</span><span class="o">=</span><span class="s2">&quot;/posts&quot;</span> <span class="nb">method</span><span class="o">=</span><span class="s2">&quot;post&quot;</span><span class="n">role</span><span class="o">=</span><span class="s2">&quot;form&quot;</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;form-group&quot;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">label</span> <span class="k">for</span><span class="o">=</span><span class="s2">&quot;post_title&quot;</span><span class="o">&gt;</span><span class="no">Title</span><span class="p">:</span><span class="o">&lt;</span><span class="sr">/label&gt;</span>
</span><span class='line'><span class="sr">  &lt;br&gt;</span>
</span><span class='line'><span class="sr">  &lt;input id=&quot;post_title&quot; class=&quot;form-control&quot; name=&quot;post[title]&quot; type=&quot;text&quot; value=&quot;&lt;%= @post.title %&gt;&quot; style=&quot;width=90%&quot;/</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/div&gt;</span>
</span><span class='line'><span class="sr">&lt;div class=&quot;form-group&quot;&gt;</span>
</span><span class='line'><span class="sr">  &lt;label for=&quot;post_body&quot;&gt;Body:&lt;/</span><span class="n">label</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">br</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">textarea</span> <span class="nb">id</span><span class="o">=</span><span class="s2">&quot;post_body&quot;</span> <span class="nb">name</span><span class="o">=</span><span class="s2">&quot;post[body]&quot;</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;form-control&quot;</span> <span class="n">rows</span><span class="o">=</span><span class="s2">&quot;10&quot;</span><span class="o">&gt;&lt;</span><span class="sx">%= @post.body %&gt;&lt;/textarea&gt;</span>
</span><span class='line'><span class="sx">  &lt;br&gt;</span>
</span><span class='line'><span class="sx">  &lt;div&gt;&lt;%=</span> <span class="n">captcha_image_tag</span> <span class="sx">%&gt;&lt;/div&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">br</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">label</span><span class="o">&gt;</span><span class="no">Captcha</span><span class="p">:</span><span class="o">&lt;</span><span class="sr">/label&gt;</span>
</span><span class='line'><span class="sr">  &lt;%= captcha_answer_tag %&gt;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">div</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">button</span> <span class="n">type</span><span class="o">=</span><span class="s2">&quot;submit&quot;</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;btn btn-success&quot;</span><span class="o">&gt;</span><span class="no">Submit</span><span class="o">&lt;</span><span class="sr">/button&gt;</span>
</span><span class='line'><span class="sr">&lt;br&gt;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">form</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<h3>5. Preview locally before updating Heroku:</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">ruby</span> <span class="n">app</span><span class="o">.</span><span class="n">rb</span>
</span></code></pre></td></tr></table></div></figure>

<p>Navigate to <a href="http://localhost:4567/posts/create">http://localhost:4567/posts/create</a> and you should see:</p>

<p><img src="https://raw.githubusercontent.com/mjhea0/sinatra-blog/master/sinatra_blog_captcha.png" alt="sinatra_blog_captcha"></p>

<h2>Conclusion</h2>

<p>From now on to post a new post, visitors have to complete the word verification. Keep in mind that this won&#39;t completely halt all spam - but it will greatly reduce it.</p>

<p><strong>Links:</strong></p>

<ul>
<li>My app: <a href="http://sinatra-sings.herokuapp.com/">http://sinatra-sings.herokuapp.com/</a></li>
<li>Git Repo: <a href="https://github.com/mjhea0/sinatra-blog">https://github.com/mjhea0/sinatra-blog</a></li>
<li>Previous tutorial: <a href="http://mherman.org/blog/2013/06/08/designing-with-class-sinatra-plus-postgresql-plus-heroku/#.U2bp4K1dWYU">Designing With Class: Sinatra + PostgreSQL + Heroku</a></li>
</ul>

<p>Cheers!</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Handling AJAX Calls With Node.js and Express (part 5)]]></title>
    <link href="http://mjhea0.github.com/blog/2014/04/15/handling-ajax-calls-with-node-dot-js-and-express-part-5/"/>
    
    <updated>2014-04-15T20:34:00-06:00</updated>
    <id>http://mjhea0.github.com/blog/2014/04/15/handling-ajax-calls-with-node-dot-js-and-express-part-5</id>
    
    <content type="html"><![CDATA[<p>Articles in the series:</p>

<ul>
<li>Part 1: <a href="http://mherman.org/blog/2013/10/20/handling-ajax-calls-with-node-dot-js-and-express-scraping-craigslist/">Scraping Craigslist</a></li>
<li>Part 2: <a href="http://mherman.org/blog/2013/11/01/handling-ajax-calls-with-node-dot-js-and-express-part-2/">Adding Handlebars</a></li>
<li>Part 3: <a href="http://mherman.org/blog/2013/12/21/handling-ajax-calls-with-node-dot-js-and-express-part-3/">User Authentication with Passport and MongoDB</a></li>
<li>Part 4: <a href="http://mherman.org/blog/2014/04/15/handling-ajax-calls-with-node-dot-js-and-express-part-4/">Refactoring, Adding styles</a></li>
<li>Part 5: <a href="http://mherman.org/blog/2014/04/15/handling-ajax-calls-with-node-dot-js-and-express-part-5">Saving Jobs</a> <strong>&lt;&lt; CURRENT</strong></li>
</ul>

<p>Last <a href="http://mherman.org/blog/2014/04/15/handling-ajax-calls-with-node-dot-js-and-express-part-4/">time</a> we refactored our code to make it more modular as well as added some styles. This time we&#39;ll add our next feature: <em>The ability to save jobs so that users can apply to them later.</em></p>

<h2>User Workflow</h2>

<p>From an end user&#39;s perspective, after logging in and then searching for jobs, one can simply click a button next to each job to save the job to a new Mongo collection. That job is then removed from the list of jobs retrieved from the search. Let&#39;s start with that.</p>

<h3>What do we need to do?</h3>

<ol>
<li>Add a &quot;save&quot; button next to each job.</li>
<li>Develop the necessary code to &quot;grab&quot; the job when the button is clicked, sending it to the server side.</li>
<li>Create a new collection in the database.</li>
<li>Insert the data in the newly created Mongo collection.</li>
<li>Use jQuery to remove the job from the DOM and alert the user that job has been added.</li>
</ol>

<p>Let&#39;s get started.</p>

<h2>Add a save button</h2>

<p>Start by adding the &quot;save&quot; button to the Handlebars template:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">id=</span><span class="s">&quot;search-results&quot;</span> <span class="na">type=</span><span class="s">&quot;text/x-handlebars-template&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="p">{{</span><span class="err">#</span><span class="nx">each</span> <span class="nx">resultsArray</span><span class="p">}}</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;button&quot;</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;btn btn-primary btn-xs save-btn&quot;</span><span class="o">&gt;</span><span class="nx">Save</span><span class="o">&lt;</span><span class="err">/button&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">a</span> <span class="nx">href</span><span class="o">=</span><span class="p">{{</span><span class="nx">about</span><span class="p">}}</span><span class="o">&gt;</span><span class="p">{{</span><span class="nx">title</span><span class="p">}}</span><span class="o">&lt;</span><span class="err">/a&gt;&lt;br&gt;{{desc}}&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/li&gt;</span>
</span><span class='line'>    <span class="p">{{</span><span class="err">/each}}</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">br</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="err">/ul&gt;</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p>Moving right along &#8230;</p>

<h2>Client Side Javascript</h2>

<p>Next, let&#39;s add an event handler to <em>main.js</em> that captures the button when clicked:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.save-btn&#39;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;whee!&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>Your file should now look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">source</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#search-results&quot;</span><span class="p">).</span><span class="nx">html</span><span class="p">();</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">dataTemplate</span> <span class="o">=</span> <span class="nx">Handlebars</span><span class="p">.</span><span class="nx">compile</span><span class="p">(</span><span class="nx">source</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">$results</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#results&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#search&#39;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;keyup&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">keyCode</span> <span class="o">===</span> <span class="mi">13</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">parameters</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">search</span><span class="o">:</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">val</span><span class="p">()</span> <span class="p">};</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/searching&#39;</span><span class="p">,</span> <span class="nx">parameters</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">){</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">data</span> <span class="k">instanceof</span> <span class="nb">Array</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">$results</span><span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="nx">dataTemplate</span><span class="p">({</span><span class="nx">resultsArray</span><span class="o">:</span><span class="nx">data</span><span class="p">}));</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">$results</span><span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.save-btn&#39;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;whee!&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>Do a quick sanity check. Fire up the server. Login. Search for some jobs. You should see the &quot;save&quot; button next to each job. Open up your Javascript console so you can see the console log when it fires. Now try to click a button.</p>

<p>Nothing. Right? What&#39;s going on? We have the right selector. The event is a click. It should be working.</p>

<p>The problem is fairly simple: On the initial loading of the DOM, those selectors - <code>.save-btn</code> - are not present. In fact, they only become present after we append all the jobs to the DOM. Since the selectors are not present to begin with though, our event handler in its current state won&#39;t find them. Fortunately, this is an easy fix.</p>

<p>We can simply attach a listener to a parent element, then once the event is fired, it will search for the child selector, <code>.save-btn</code>. It will obviously only find that selector once it exists in the DOM.</p>

<p>This is called event delegation. If interested, check <a href="https://learn.jquery.com/events/event-delegation/">this</a> article out for more info.</p>

<p>Update the code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#results&#39;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="s1">&#39;.save-btn&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;whee!&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>So, the listener is set to the <code>#results</code> selector, which when fired (by the button click), searches the DOM for the child selector, <code>.save-btn</code>. Test it out. It should work.</p>

<p><img src="https://raw.githubusercontent.com/mjhea0/node-express-ajax-craigslist/master/img/delegated-events.png" alt="delegated-events"></p>

<p>Next, instead of just outputting the text &quot;whee!&quot;, we need to grab the job title and URL by replacing the current console log with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">jobTitle</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">next</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">).</span><span class="nx">text</span><span class="p">()</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">jobURL</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">next</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;href&#39;</span><span class="p">)</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">jobTitle</span><span class="p">,</span> <span class="nx">jobURL</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>Notice the <code>this</code> keyword? It&#39;s extremely powerful yet it can be difficult to use. In this case, it refers to the DOM element that the event handler is triggered on.</p>

<p>Don&#39;t believe me? Test it out: update the <code>console.log()</code> to <code>console.log($(this))</code>. Test it out.</p>

<p>To learn more about <code>this</code>, check out the jQuery <a href="https://learn.jquery.com/javascript-101/this-keyword/">docs</a> and Javascript <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this">docs</a>.</p>

<p>Now what happens when you click the save button?</p>

<p><img src="https://raw.githubusercontent.com/mjhea0/node-express-ajax-craigslist/master/img/this-keyword.png" alt="this-keyword"></p>

<p>Finally, we need to pass the data to the server.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">parameters</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">title</span><span class="o">:</span> <span class="nx">jobTitle</span><span class="p">,</span> <span class="nx">url</span><span class="o">:</span> <span class="nx">jobURL</span> <span class="p">};</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">parameters</span><span class="p">)</span>
</span><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span> <span class="s1">&#39;/save&#39;</span><span class="p">,</span> <span class="nx">parameters</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;whee!&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>You should remember how to do this, and understand what&#39;s happening here. If not, review <a href="http://mherman.org/blog/2013/10/20/handling-ajax-calls-with-node-dot-js-and-express-scraping-craigslist/#.U1AdiuZdWYU">Part 1</a> of this series.</p>

<h2>Server Side Javascript</h2>

<p>On the server side, we need to setup a <code>/save</code> route. Again, if you have questions on this, check out <a href="http://mherman.org/blog/2013/10/20/handling-ajax-calls-with-node-dot-js-and-express-scraping-craigslist/#.U1AdiuZdWYU">Part 1</a>.</p>

<p>Update <code>app.js</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/save&#39;</span><span class="p">,</span> <span class="nx">ensureAuthenticated</span><span class="p">,</span> <span class="nx">routes</span><span class="p">.</span><span class="nx">save</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>Now update the routes file, <code>index.js</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">save</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">title</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">title</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">url</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">title</span><span class="p">,</span> <span class="nx">url</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>

<p>Test this out. You should see:</p>

<p><img src="https://raw.githubusercontent.com/mjhea0/node-express-ajax-craigslist/master/img/back-end.png" alt="backend"></p>

<h2>Update Mongo</h2>

<p>Now that we have the data in our possession, let&#39;s add it to the database.</p>

<h3>Add a new schema</h3>

<p>Create a new file in the &quot;models&quot; directory called <em>job.js</em>, then add the following code to the file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">mongoose</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;mongoose&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">config</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;../config&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">config</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// create a job model</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">userSchema</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">Schema</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">title</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">url</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">model</span><span class="p">(</span><span class="s1">&#39;Job&#39;</span><span class="p">,</span> <span class="nx">jobSchema</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<h3>Insert Data</h3>

<p>With the schema set up, we can now add our data to the Mongo collection. Within your routes, add the following code to the <code>/save</code> route:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">save</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">title</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">title</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">url</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">title</span><span class="p">,</span> <span class="nx">url</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">newJob</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">job</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">newJob</span><span class="p">.</span><span class="nx">title</span> <span class="o">=</span> <span class="nx">title</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">newJob</span><span class="p">.</span><span class="nx">url</span> <span class="o">=</span> <span class="nx">url</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">newJob</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">newJob</span><span class="p">.</span><span class="nx">save</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">){</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nx">err</span><span class="p">){</span>
</span><span class='line'>      <span class="k">throw</span> <span class="nx">err</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;New job, &quot;</span> <span class="o">+</span> <span class="nx">newJob</span><span class="p">.</span><span class="nx">title</span> <span class="o">+</span> <span class="s2">&quot;, was added to mongo&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>

<p>Here, we are simply creating a new record assigned to the variable <code>newJob</code>, then adding the appropriate data, and finally saving the job to our job collection within Mongo.</p>

<p>Make sure to require the config and Mongoose schema files:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">config</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;../config&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">job</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;../models/job&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<p>Test it out!</p>

<p><img src="https://raw.githubusercontent.com/mjhea0/node-express-ajax-craigslist/master/img/save_job_to_mongo.png" alt="save_job_to_mongo"></p>

<p>Now check out the results in Mongo:</p>

<p><img src="https://raw.githubusercontent.com/mjhea0/node-express-ajax-craigslist/master/img/saved_job_mongo.png" alt="saved_job_mongo"></p>

<p>Before moving on, let&#39;s add a line of code to search the Mongo collection to see if a job exists, then within a conditional we can setup logic for only adding a job if it doesn&#39;t already exist in the collection:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">save</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">title</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">title</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">url</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">title</span><span class="p">,</span> <span class="nx">url</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">newJob</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">job</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">job</span><span class="p">.</span><span class="nx">findOne</span><span class="p">({</span><span class="s1">&#39;title&#39;</span><span class="o">:</span> <span class="nx">title</span><span class="p">},</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">job</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">job</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Job already in database.&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">newJob</span><span class="p">.</span><span class="nx">title</span> <span class="o">=</span> <span class="nx">title</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">newJob</span><span class="p">.</span><span class="nx">url</span> <span class="o">=</span> <span class="nx">url</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">newJob</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">newJob</span><span class="p">.</span><span class="nx">save</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">){</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nx">err</span><span class="p">){</span>
</span><span class='line'>          <span class="k">throw</span> <span class="nx">err</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;New job, &quot;</span> <span class="o">+</span> <span class="nx">newJob</span><span class="p">.</span><span class="nx">title</span> <span class="o">+</span> <span class="s2">&quot;, was added to mongo&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>

<p>So, we search the database for the job - <code>job.findOne({&#39;title&#39;: title}</code> - then if it&#39;s found we output a message to the console - <code>console.log(&#39;Job already in database.&#39;);</code>. And if it&#39;s not found, we obviously add the data to the database. We should alert the user if a job is already in the database in a more direct way than just a message to the console. After all, how many users browse the Internet with their console open? We&#39;ll address that in a bit. Right now, let&#39;s finish with Mongo first.</p>

<h3>One to Many Relationship</h3>

<p>We need set up a one to many relationship (one user, many jobs) using <a href="http://docs.mongodb.org/manual/tutorial/model-referenced-one-to-many-relationships-between-documents/">document references</a> within Mongo to associate a job to a user. This takes literally two lines of code.</p>

<p>Update the jobs schema:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">user</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;../models/user&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">jobSchema</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">Schema</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">title</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">url</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">user</span><span class="o">:</span> <span class="p">{</span><span class="nx">type</span><span class="o">:</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">Schema</span><span class="p">.</span><span class="nx">Types</span><span class="p">.</span><span class="nx">ObjectId</span><span class="p">,</span> <span class="nx">ref</span><span class="o">:</span> <span class="nx">user</span><span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>Then updated <em>index.js</em> so that when you add a job it includes the currently logged in user:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">newJob</span><span class="p">.</span><span class="nx">title</span> <span class="o">=</span> <span class="nx">title</span><span class="p">;</span>
</span><span class='line'><span class="nx">newJob</span><span class="p">.</span><span class="nx">url</span> <span class="o">=</span> <span class="nx">url</span><span class="p">;</span>
</span><span class='line'><span class="nx">newJob</span><span class="p">.</span><span class="nx">user</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">_id</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">newJob</span><span class="p">);</span>
</span><span class='line'><span class="nx">newJob</span><span class="p">.</span><span class="nx">save</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">){</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">err</span><span class="p">){</span>
</span><span class='line'>    <span class="k">throw</span> <span class="nx">err</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Test this out, then check out the object in Mongo:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span> <span class="s2">&quot;user&quot;</span> <span class="o">:</span> <span class="nx">ObjectId</span><span class="p">(</span><span class="s2">&quot;534cb94fd4b72d7618000001&quot;</span><span class="p">),</span> <span class="s2">&quot;url&quot;</span> <span class="o">:</span> <span class="s2">&quot;http://sfbay.craigslist.org/sfc/eng/4423216760.html&quot;</span><span class="p">,</span> <span class="s2">&quot;title&quot;</span> <span class="o">:</span> <span class="s2">&quot;Principal Web Engineer&quot;</span><span class="p">,</span> <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="nx">ObjectId</span><span class="p">(</span><span class="s2">&quot;5351f3a1cc6813119e000001&quot;</span><span class="p">),</span> <span class="s2">&quot;__v&quot;</span> <span class="o">:</span> <span class="mi">0</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>The object now includes the user id.</p>

<h2>Client Side Javascript Redux</h2>

<p>Okay. Back on the client side, we need to do three things before we&#39;re finally done:</p>

<ol>
<li>Remove the job the user saved</li>
<li>Display messages from the server side, indicating whether the job was added to the database or not</li>
<li>Display all saved jobs to the user</li>
</ol>

<h3>Remove job from the DOM</h3>

<p>Add the following line of code to <em>main.js</em> right before we send the data to the server side:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">parent</span><span class="p">().</span><span class="nx">remove</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>

<p>Updated code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#results&#39;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="s1">&#39;.save-btn&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">jobTitle</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">next</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">).</span><span class="nx">text</span><span class="p">()</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">jobURL</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">next</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;href&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">parameters</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">title</span><span class="o">:</span> <span class="nx">jobTitle</span><span class="p">,</span> <span class="nx">url</span><span class="o">:</span> <span class="nx">jobURL</span> <span class="p">};</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">parameters</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">parent</span><span class="p">().</span><span class="nx">remove</span><span class="p">()</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span> <span class="s1">&#39;/save&#39;</span><span class="p">,</span> <span class="nx">parameters</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;test&#39;</span><span class="p">,</span><span class="nx">data</span><span class="p">)</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<h3>Display Messages</h3>

<p>First, within <em>index.js</em> update the following two lines of code.</p>

<p>From:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Job already in database.&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;New job, &quot;</span> <span class="o">+</span> <span class="nx">newJob</span><span class="p">.</span><span class="nx">title</span> <span class="o">+</span> <span class="s2">&quot;, was added to mongo&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<p>To:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;Job already in database.&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s2">&quot;New job, &quot;</span> <span class="o">+</span> <span class="nx">newJob</span><span class="p">.</span><span class="nx">title</span> <span class="o">+</span> <span class="s2">&quot;, was added to mongo&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<p>Updated function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">save</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">title</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">title</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">url</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">title</span><span class="p">,</span> <span class="nx">url</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">newJob</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">job</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">job</span><span class="p">.</span><span class="nx">findOne</span><span class="p">({</span><span class="s1">&#39;title&#39;</span><span class="o">:</span> <span class="nx">title</span><span class="p">},</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">job</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">job</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;Job already in database.&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">newJob</span><span class="p">.</span><span class="nx">title</span> <span class="o">=</span> <span class="nx">title</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">newJob</span><span class="p">.</span><span class="nx">url</span> <span class="o">=</span> <span class="nx">url</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">newJob</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">newJob</span><span class="p">.</span><span class="nx">save</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">){</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nx">err</span><span class="p">){</span>
</span><span class='line'>          <span class="k">throw</span> <span class="nx">err</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s2">&quot;New job, &quot;</span> <span class="o">+</span> <span class="nx">newJob</span><span class="p">.</span><span class="nx">title</span> <span class="o">+</span> <span class="s2">&quot;, was added to mongo&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>

<p>The <code>res.send()</code> method is used to send a response back to the client side. You can read more <a href="http://expressjs.com/4x/api.html#res.send">here</a>. Now, we need to capture that reponse and append the actual message to the DOM.</p>

<p>First, add a new element, <code>p#alert</code>, to <em>search.jade</em> where you want the message to go:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>extends layout
</span><span class='line'>
</span><span class='line'>block content
</span><span class='line'>    h1 Search SF Jobs
</span><span class='line'>    .lead Welcome, #{user}
</span><span class='line'>    form(METHOD=&quot;LINK&quot;, ACTION=&quot;logout&quot;)
</span><span class='line'>        input(type=&quot;submit&quot;, value=&quot;Logout&quot;, class=&#39;btn btn-sm btn-primary&#39;)
</span><span class='line'>    br
</span><span class='line'>    br
</span><span class='line'>    p#alert
</span><span class='line'>    input#search(type=&quot;search&quot;, placeholder=&quot;search...&quot;)
</span><span class='line'>    br
</span><span class='line'>    br
</span><span class='line'>    ul#results
</span><span class='line'>    include template.html
</span><span class='line'>
</span><span class='line'>    script(src=&quot;//cdnjs.cloudflare.com/ajax/libs/jquery/2.0.3/jquery.min.js&quot;)
</span><span class='line'>    script(src=&quot;//cdnjs.cloudflare.com/ajax/libs/handlebars.js/1.0.0/handlebars.min.js&quot;)
</span><span class='line'>    script(src=&quot;/javascripts/main.js&quot;)
</span></code></pre></td></tr></table></div></figure>

<p>Next update <em>main.js</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span> <span class="s1">&#39;/save&#39;</span><span class="p">,</span> <span class="nx">parameters</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#alert&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p><code>$(&#39;#alert&#39;).html(data)</code> adds the message to the DOM between the <code>&lt;p&gt;</code> tags that have the id &quot;results&quot;.</p>

<p>Check it out live.</p>

<h3>Display saved jobs</h3>

<p>This is actually a fairly large task, so we&#39;ll tackle this in the next part, along with re-organizing the entire search page and adding some more styles.</p>

<p>You can grab the code <a href="https://github.com/mjhea0/node-express-ajax-craigslist">here</a>.</p>

<p>See you next time!</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Handling AJAX Calls With Node.js and Express (part 4)]]></title>
    <link href="http://mjhea0.github.com/blog/2014/04/15/handling-ajax-calls-with-node-dot-js-and-express-part-4/"/>
    
    <updated>2014-04-15T15:27:00-06:00</updated>
    <id>http://mjhea0.github.com/blog/2014/04/15/handling-ajax-calls-with-node-dot-js-and-express-part-4</id>
    
    <content type="html"><![CDATA[<p>Articles in the series:</p>

<ul>
<li>Part 1: <a href="http://mherman.org/blog/2013/10/20/handling-ajax-calls-with-node-dot-js-and-express-scraping-craigslist/">Scraping Craigslist</a></li>
<li>Part 2: <a href="http://mherman.org/blog/2013/11/01/handling-ajax-calls-with-node-dot-js-and-express-part-2/">Adding Handlebars</a></li>
<li>Part 3: <a href="http://mherman.org/blog/2013/12/21/handling-ajax-calls-with-node-dot-js-and-express-part-3/">User Authentication with Passport and MongoDB</a></li>
<li>Part 4: <a href="http://mherman.org/blog/2014/04/15/handling-ajax-calls-with-node-dot-js-and-express-part-4/">Refactoring, Adding styles</a> <strong>&lt;&lt; CURRENT</strong></li>
<li>Part 5: <a href="http://mherman.org/blog/2014/04/15/handling-ajax-calls-with-node-dot-js-and-express-part-5">Saving Jobs</a></li>
</ul>

<p>If you&#39;ve been following along with this series, you should have a basic application for searching and scraping Craigslist for jobs in San Francisco. The end goal is to have an application that users can login to, then search for jobs. From there the end user can either apply for jobs or save jobs they may be interested in.</p>

<p>Before adding any additional functionality, we need to refactor the code a bit by moving some code out of <em>app.js</em> and into separate modules so that the entire app is more modular.</p>

<h2>Configuration</h2>

<p>First, move the config settings into a separate file, outside the main project. It&#39;s always a good idea to separate configuration from actual code so that other users who wish to use your project can easily make it their own by quickly adding their own configuration.</p>

<p>Create a <em>config.js</em> file and add the following code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">google</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">returnURL</span><span class="o">:</span> <span class="s1">&#39;http://127.0.0.1:3000/auth/google/callback&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">realm</span><span class="o">:</span> <span class="s1">&#39;http://127.0.0.1:3000&#39;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">mongoUrl</span><span class="o">:</span> <span class="s1">&#39;mongodb://localhost/craigslist&#39;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>

<p>Then make sure to include the file as part of <em>app.js</em>&#39;s dependencies:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">config</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./config&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<p>Finally, update these two areas within <em>app.js</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// connect to the database</span>
</span><span class='line'><span class="nx">mongoose</span><span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="nx">config</span><span class="p">.</span><span class="nx">mongoUrl</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<p>And:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">passport</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="k">new</span> <span class="nx">GoogleStrategy</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">returnURL</span><span class="o">:</span> <span class="nx">config</span><span class="p">.</span><span class="nx">google</span><span class="p">.</span><span class="nx">returnURL</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">realm</span><span class="o">:</span> <span class="nx">config</span><span class="p">.</span><span class="nx">google</span><span class="p">.</span><span class="nx">realm</span>
</span><span class='line'><span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>

<h2>User Model</h2>

<p>Next, update the user schema for mongoose.</p>

<p>Create a new folder called &quot;models&quot; and add a file called <em>user.js</em> to hold the user schema:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">mongoose</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;mongoose&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">config</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;../config&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">config</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// create a user model</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">userSchema</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">Schema</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">name</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">email</span><span class="o">:</span> <span class="p">{</span><span class="nx">type</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span> <span class="nx">lowercase</span><span class="o">:</span> <span class="kc">true</span> <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">model</span><span class="p">(</span><span class="s1">&#39;User&#39;</span><span class="p">,</span> <span class="nx">userSchema</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<p>Add this to the dependencies:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">user</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./models/user&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<p>Then update <em>app.js</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// passport settings</span>
</span><span class='line'><span class="nx">passport</span><span class="p">.</span><span class="nx">serializeUser</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">user</span><span class="p">,</span> <span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;serializeUser: &#39;</span> <span class="o">+</span> <span class="nx">user</span><span class="p">.</span><span class="nx">id</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">done</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">user</span><span class="p">.</span><span class="nx">id</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="nx">passport</span><span class="p">.</span><span class="nx">deserializeUser</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">id</span><span class="p">,</span> <span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">user</span><span class="p">.</span><span class="nx">findOne</span><span class="p">({</span><span class="nx">_id</span> <span class="o">:</span> <span class="nx">id</span><span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">user</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">err</span><span class="p">)</span> <span class="nx">done</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">user</span><span class="p">);</span>
</span><span class='line'>    <span class="k">else</span> <span class="nx">done</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="kc">null</span><span class="p">)</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">passport</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="k">new</span> <span class="nx">GoogleStrategy</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">returnURL</span><span class="o">:</span> <span class="nx">config</span><span class="p">.</span><span class="nx">google</span><span class="p">.</span><span class="nx">returnURL</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">realm</span><span class="o">:</span> <span class="nx">config</span><span class="p">.</span><span class="nx">google</span><span class="p">.</span><span class="nx">realm</span>
</span><span class='line'><span class="p">},</span>
</span><span class='line'>  <span class="kd">function</span><span class="p">(</span><span class="nx">identifier</span><span class="p">,</span> <span class="nx">profile</span><span class="p">,</span> <span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">profile</span><span class="p">.</span><span class="nx">emails</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">value</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">process</span><span class="p">.</span><span class="nx">nextTick</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">query</span> <span class="o">=</span> <span class="nx">user</span><span class="p">.</span><span class="nx">findOne</span><span class="p">({</span><span class="s1">&#39;email&#39;</span><span class="o">:</span> <span class="nx">profile</span><span class="p">.</span><span class="nx">emails</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">value</span><span class="p">});</span>
</span><span class='line'>      <span class="nx">query</span><span class="p">.</span><span class="nx">exec</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">oldUser</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nx">oldUser</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Found registered user: &quot;</span> <span class="o">+</span> <span class="nx">oldUser</span><span class="p">.</span><span class="nx">name</span> <span class="o">+</span> <span class="s2">&quot; is logged in!&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">done</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">oldUser</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">newUser</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">user</span><span class="p">();</span>
</span><span class='line'>          <span class="nx">newUser</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">profile</span><span class="p">.</span><span class="nx">displayName</span><span class="p">;</span>
</span><span class='line'>          <span class="nx">newUser</span><span class="p">.</span><span class="nx">email</span> <span class="o">=</span> <span class="nx">profile</span><span class="p">.</span><span class="nx">emails</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">value</span><span class="p">;</span>
</span><span class='line'>          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">newUser</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">newUser</span><span class="p">.</span><span class="nx">save</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">){</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="nx">err</span><span class="p">){</span>
</span><span class='line'>              <span class="k">throw</span> <span class="nx">err</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;New user, &quot;</span> <span class="o">+</span> <span class="nx">newUser</span><span class="p">.</span><span class="nx">name</span> <span class="o">+</span> <span class="s2">&quot;, was created&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">done</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">newUser</span><span class="p">);</span>
</span><span class='line'>          <span class="p">});</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>

<p>The Passport code searches the database to see if a user already exists before creating a new one - which is no different from last time. However, see if you can dig a bit deeper and see the subtle differences.</p>

<h2>Routes</h2>

<p>Next, move the main routing into a separate module by adding the following code to <em>routes/index.js</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">request</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;request&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">index</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="s1">&#39;index&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">user</span><span class="o">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">user</span> <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">search</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="s1">&#39;search&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">user</span><span class="o">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">name</span> <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">searching</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span>
</span><span class='line'>  <span class="c1">// input value from search</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">val</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">search</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">// url used to search yql</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="s2">&quot;http://query.yahooapis.com/v1/public/yql?q=select%20*%20from%20craigslist.search&quot;</span> <span class="o">+</span>
</span><span class='line'>  <span class="s2">&quot;%20where%20location%3D%22sfbay%22%20and%20type%3D%22jjj%22%20and%20query%3D%22&quot;</span> <span class="o">+</span> <span class="nx">val</span> <span class="o">+</span> <span class="s2">&quot;%22&amp;format=&quot;</span> <span class="o">+</span>
</span><span class='line'>  <span class="s2">&quot;json&amp;diagnostics=true&amp;env=store%3A%2F%2Fdatatables.org%2Falltableswithkeys&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">requests</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">requests</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// request module is used to process the yql url and return the results in JSON format</span>
</span><span class='line'>  <span class="nx">request</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">resp</span><span class="p">,</span> <span class="nx">body</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">resultsArray</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>    <span class="nx">body</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">body</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// console.log(body.query.results.RDF.item)</span>
</span><span class='line'>    <span class="c1">// logic used to compare search results with the input from user</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">body</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">results</span><span class="p">.</span><span class="nx">RDF</span><span class="p">.</span><span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">results</span> <span class="o">=</span> <span class="s2">&quot;No results found. Try again.&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">callback</span><span class="p">(</span><span class="nx">results</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">results</span> <span class="o">=</span> <span class="nx">body</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">results</span><span class="p">.</span><span class="nx">RDF</span><span class="p">.</span><span class="nx">item</span><span class="p">;</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">results</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">resultsArray</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span>
</span><span class='line'>          <span class="p">{</span><span class="nx">title</span><span class="o">:</span><span class="nx">results</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">title</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nx">about</span><span class="o">:</span><span class="nx">results</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="s2">&quot;about&quot;</span><span class="p">],</span> <span class="nx">desc</span><span class="o">:</span><span class="nx">results</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="s2">&quot;description&quot;</span><span class="p">]}</span>
</span><span class='line'>        <span class="p">);</span>
</span><span class='line'>      <span class="p">};</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="c1">// pass back the results to client side</span>
</span><span class='line'>    <span class="nx">callback</span><span class="p">(</span><span class="nx">resultsArray</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>

<p>Again, add the dependency: <code>var routes = require(&#39;./routes&#39;);</code></p>

<p>The routes section in <em>app.js</em> should now look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// user routes</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="nx">routes</span><span class="p">.</span><span class="nx">index</span><span class="p">);</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/search&#39;</span><span class="p">,</span> <span class="nx">ensureAuthenticated</span><span class="p">,</span> <span class="nx">routes</span><span class="p">.</span><span class="nx">search</span><span class="p">);</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/searching&#39;</span><span class="p">,</span> <span class="nx">ensureAuthenticated</span><span class="p">,</span> <span class="nx">routes</span><span class="p">.</span><span class="nx">searching</span><span class="p">);</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/logout&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">req</span><span class="p">.</span><span class="nx">logOut</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">redirect</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// auth routes</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/auth/google&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">passport</span><span class="p">.</span><span class="nx">authenticate</span><span class="p">(</span><span class="s1">&#39;google&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/auth/google/callback&#39;</span><span class="p">,</span>
</span><span class='line'><span class="nx">passport</span><span class="p">.</span><span class="nx">authenticate</span><span class="p">(</span><span class="s1">&#39;google&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">failureRedirect</span><span class="o">:</span> <span class="s1">&#39;/&#39;</span> <span class="p">}),</span>
</span><span class='line'>  <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">redirect</span><span class="p">(</span><span class="s1">&#39;/search&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// test authentication</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">ensureAuthenticated</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">isAuthenticated</span><span class="p">())</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">next</span><span class="p">();</span> <span class="p">}</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">redirect</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<h2>Passport</h2>

<p>Now, move the main authentication code to a separate file.</p>

<p>Create a new file called <em>authentication.js</em> and add the following code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// authentication</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">passport</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;passport&#39;</span><span class="p">)</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">GoogleStrategy</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;passport-google&#39;</span><span class="p">).</span><span class="nx">Strategy</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">config</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./config&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">user</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./models/user&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// passport settings</span>
</span><span class='line'><span class="nx">passport</span><span class="p">.</span><span class="nx">serializeUser</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">user</span><span class="p">,</span> <span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;serializeUser: &#39;</span> <span class="o">+</span> <span class="nx">user</span><span class="p">.</span><span class="nx">id</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">done</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">user</span><span class="p">.</span><span class="nx">id</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="nx">passport</span><span class="p">.</span><span class="nx">deserializeUser</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">id</span><span class="p">,</span> <span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">user</span><span class="p">.</span><span class="nx">findOne</span><span class="p">({</span><span class="nx">_id</span> <span class="o">:</span> <span class="nx">id</span><span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">user</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">err</span><span class="p">)</span> <span class="nx">done</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">user</span><span class="p">);</span>
</span><span class='line'>    <span class="k">else</span> <span class="nx">done</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="kc">null</span><span class="p">)</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">passport</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="k">new</span> <span class="nx">GoogleStrategy</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">returnURL</span><span class="o">:</span> <span class="nx">config</span><span class="p">.</span><span class="nx">google</span><span class="p">.</span><span class="nx">returnURL</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">realm</span><span class="o">:</span> <span class="nx">config</span><span class="p">.</span><span class="nx">google</span><span class="p">.</span><span class="nx">realm</span>
</span><span class='line'><span class="p">},</span>
</span><span class='line'>  <span class="kd">function</span><span class="p">(</span><span class="nx">identifier</span><span class="p">,</span> <span class="nx">profile</span><span class="p">,</span> <span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">profile</span><span class="p">.</span><span class="nx">emails</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">value</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">process</span><span class="p">.</span><span class="nx">nextTick</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">query</span> <span class="o">=</span> <span class="nx">user</span><span class="p">.</span><span class="nx">findOne</span><span class="p">({</span><span class="s1">&#39;email&#39;</span><span class="o">:</span> <span class="nx">profile</span><span class="p">.</span><span class="nx">emails</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">value</span><span class="p">});</span>
</span><span class='line'>      <span class="nx">query</span><span class="p">.</span><span class="nx">exec</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">oldUser</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nx">oldUser</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Found registered user: &quot;</span> <span class="o">+</span> <span class="nx">oldUser</span><span class="p">.</span><span class="nx">name</span> <span class="o">+</span> <span class="s2">&quot; is logged in!&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">done</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">oldUser</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">newUser</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">user</span><span class="p">();</span>
</span><span class='line'>          <span class="nx">newUser</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">profile</span><span class="p">.</span><span class="nx">displayName</span><span class="p">;</span>
</span><span class='line'>          <span class="nx">newUser</span><span class="p">.</span><span class="nx">email</span> <span class="o">=</span> <span class="nx">profile</span><span class="p">.</span><span class="nx">emails</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">value</span><span class="p">;</span>
</span><span class='line'>          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">newUser</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">newUser</span><span class="p">.</span><span class="nx">save</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">){</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="nx">err</span><span class="p">){</span>
</span><span class='line'>              <span class="k">throw</span> <span class="nx">err</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;New user, &quot;</span> <span class="o">+</span> <span class="nx">newUser</span><span class="p">.</span><span class="nx">name</span> <span class="o">+</span> <span class="s2">&quot;, was created&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">done</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">newUser</span><span class="p">);</span>
</span><span class='line'>          <span class="p">});</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">passport</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>

<p>Then back in <em>app.js</em>, make sure to import that module back in by adding it as a dependency:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">passport</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./authentication&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<p>Fire up the server, and test your app out. If it all went well, everything should still work properly.</p>

<p>Finally, let&#39;s update the styles.</p>

<h2>Styles</h2>

<p>First, add in a <a href="http://getbootstrap.com/">Bootstrap</a> stylesheet to the <em>layout.jade</em> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>link(rel=&#39;stylesheet&#39;, href=&#39;//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css&#39;)
</span></code></pre></td></tr></table></div></figure>

<h3>index.jade</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>extends layout
</span><span class='line'>
</span><span class='line'>block content
</span><span class='line'>    h1 Search Login
</span><span class='line'>    .lead Please login to search
</span><span class='line'>    br
</span><span class='line'>    form(METHOD=&quot;LINK&quot;, ACTION=&quot;/auth/google&quot;)
</span><span class='line'>        input(type=&quot;submit&quot;, value=&quot;Login with Google&quot;, class=&#39;btn btn-large btn-primary&#39;)
</span><span class='line'>
</span><span class='line'>    script(src=&quot;//cdnjs.cloudflare.com/ajax/libs/jquery/2.0.3/jquery.min.js&quot;)
</span><span class='line'>    script(src=&quot;//cdnjs.cloudflare.com/ajax/libs/handlebars.js/1.0.0/handlebars.min.js&quot;)
</span><span class='line'>    script(src=&quot;/javascripts/main.js&quot;)
</span></code></pre></td></tr></table></div></figure>

<h3>search.jade</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>extends layout
</span><span class='line'>
</span><span class='line'>block content
</span><span class='line'>    h1 Search SF Jobs
</span><span class='line'>    .lead Welcome, #{user}
</span><span class='line'>    form(METHOD=&quot;LINK&quot;, ACTION=&quot;logout&quot;)
</span><span class='line'>        input(type=&quot;submit&quot;, value=&quot;Logout&quot;, class=&#39;btn btn-sm btn-primary&#39;)
</span><span class='line'>    br
</span><span class='line'>    br
</span><span class='line'>    input#search(type=&quot;search&quot;, placeholder=&quot;search...&quot;)
</span><span class='line'>    br
</span><span class='line'>    br
</span><span class='line'>    ul#results
</span><span class='line'>    include template.html
</span><span class='line'>
</span><span class='line'>    script(src=&quot;//cdnjs.cloudflare.com/ajax/libs/jquery/2.0.3/jquery.min.js&quot;)
</span><span class='line'>    script(src=&quot;//cdnjs.cloudflare.com/ajax/libs/handlebars.js/1.0.0/handlebars.min.js&quot;)
</span><span class='line'>    script(src=&quot;/javascripts/main.js&quot;)
</span></code></pre></td></tr></table></div></figure>

<p>Wait? How did we capture the user&#39;s name? Go back and look at the <code>/searching</code> route.</p>

<p>Looks a little better. :)</p>

<p><img src="https://raw.githubusercontent.com/mjhea0/node-express-ajax-craigslist/master/img/part4.png" alt="part-4"></p>

<p>Alright, next time we&#39;ll expand the app&#39;s functionality to allow users to save jobs they may be interested in applying to at a later date. Until then, check out the latest code <a href="https://github.com/mjhea0/node-express-ajax-craigslist">here</a>. Cheers!</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Node Twitter Sentiment - Part 2]]></title>
    <link href="http://mjhea0.github.com/blog/2014/03/18/node-twitter-sentiment-part-2/"/>
    
    <updated>2014-03-18T11:55:00-06:00</updated>
    <id>http://mjhea0.github.com/blog/2014/03/18/node-twitter-sentiment-part-2</id>
    
    <content type="html"><![CDATA[<p>This is for the <a href="http://www.meetup.com/Node-js-Denver-Boulder/">Node-js-Denver-Boulder</a> Meetup &lt;3 Cheers!</p>

<blockquote>
<p>Miss part 1? Check it out <a href="http://mherman.org/blog/2014/02/19/node-twitter-sentiment/">here</a>.</p>
</blockquote>

<p>Let&#39;s begin &#8230;</p>

<p>Before adding additional functionality to the <a href="https://github.com/mjhea0/node-twitter-sentiment">Node Twitter Sentiment Analysis</a> application, we need to refactor the code. Frankly, there are some mistakes that were made on purpose to highlight an issue that many new developers overlook when first working with Node.</p>

<p>Remember this function from <em>index.js</em> in the routes folder:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">search</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// grab the request from the client</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">choices</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">choices</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// grab the current date</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">today</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">();</span>
</span><span class='line'>  <span class="c1">// establish the twitter config (grab your keys at dev.twitter.com)</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">twitter</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">twit</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">consumer_key</span><span class="o">:</span> <span class="nx">config</span><span class="p">.</span><span class="nx">consumer_key</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">consumer_secret</span><span class="o">:</span> <span class="nx">config</span><span class="p">.</span><span class="nx">consumer_secret</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">access_token</span><span class="o">:</span> <span class="nx">config</span><span class="p">.</span><span class="nx">access_token</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">access_token_secret</span><span class="o">:</span> <span class="nx">config</span><span class="p">.</span><span class="nx">access_token_secret</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="c1">// set highest score</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">highestScore</span> <span class="o">=</span> <span class="o">-</span><span class="kc">Infinity</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">// set highest choice</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">highestChoice</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">// create new array</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>  <span class="c1">// set score</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">score</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;----------&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// iterate through the choices array from the request</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">choices</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// add choice to new array</span>
</span><span class='line'>    <span class="nx">array</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">choices</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span>
</span><span class='line'>    <span class="c1">// grad 20 tweets from today</span>
</span><span class='line'>    <span class="nx">twitter</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;search/tweets&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">q</span><span class="o">:</span> <span class="s1">&#39;&#39;</span> <span class="o">+</span> <span class="nx">choices</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">+</span> <span class="s1">&#39; since:&#39;</span> <span class="o">+</span> <span class="nx">today</span><span class="p">.</span><span class="nx">getFullYear</span><span class="p">()</span> <span class="o">+</span> <span class="s1">&#39;-&#39;</span> <span class="o">+</span>
</span><span class='line'>      <span class="p">(</span><span class="nx">today</span><span class="p">.</span><span class="nx">getMonth</span><span class="p">()</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;-&#39;</span> <span class="o">+</span> <span class="nx">today</span><span class="p">.</span><span class="nx">getDate</span><span class="p">(),</span> <span class="nx">count</span><span class="o">:</span><span class="mi">20</span><span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// perform sentiment analysis (see below)</span>
</span><span class='line'>        <span class="nx">score</span> <span class="o">=</span> <span class="nx">performAnalysis</span><span class="p">(</span><span class="nx">data</span><span class="p">[</span><span class="s1">&#39;statuses&#39;</span><span class="p">]);</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;score:&quot;</span><span class="p">,</span> <span class="nx">score</span><span class="p">)</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;choice:&quot;</span><span class="p">,</span> <span class="nx">choices</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span>
</span><span class='line'>        <span class="c1">//  determine winner</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nx">score</span> <span class="o">&gt;</span> <span class="nx">highestScore</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">highestScore</span> <span class="o">=</span> <span class="nx">score</span><span class="p">;</span>
</span><span class='line'>          <span class="nx">highestChoice</span> <span class="o">=</span> <span class="nx">choices</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;winner:&quot;</span><span class="p">,</span><span class="nx">choices</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">})(</span><span class="nx">i</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">// send response back to the server side; why the need for the timeout?</span>
</span><span class='line'>  <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span><span class="s1">&#39;score&#39;</span><span class="o">:</span> <span class="nx">highestScore</span><span class="p">,</span> <span class="s1">&#39;choice&#39;</span><span class="o">:</span> <span class="nx">highestChoice</span><span class="p">}))</span> <span class="p">},</span> <span class="mi">5000</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>

<p>Essentially we&#39;re grabbing the user inputted data, pulling tweets based on the inputs, and then calculating the sentiment of those tweets. The timeout is necessary because of how Node <a href="http://stackoverflow.com/questions/7931537/whats-the-difference-between-asynchronous-non-blocking-event-base-architectu/9489547#9489547">works</a>. Because Node is asynchronous, functions do not block other functions from running. Without the 5 second time-out, the next function will append the results to the DOM without waiting for the function to finish running. Essentially, nothing is appended. Make sense?</p>

<p>Put another way, when functions run that are blocking, they wait there for the result to come back before another function fires. Node, on the other hand, will continue executing the code that comes after it (because it&#39;s functions are non-blocking(, then jump back when the result is available.</p>

<p>So, why won&#39;t a timeout work then?</p>

<p>Again, the code has a function that sends the results in 5 seconds, regardless as to the execution state of the call to twitter. What happens though, if we run the program without a network connection? Or if Twitter is down? Or if we pulled in 10,000 tweets instead of 20?</p>

<p>It&#39;s still going to return results after 5 seconds. This is not what we want, obviously. So, how do we fix it? There&#39;s a number of different methods, none of which fully solve it in an elegant manner. In this post, we&#39;ll look at:</p>

<table width="800">
<colgroup>
<col style="text-align:left;"/>
<col style="text-align:left;"/>
<col style="text-align:left;"/>
</colgroup>

<thead>
<tr>
    <th style="text-align:center;">Method</th>
    <th style="text-align:center;">URL</th>
    <th style="text-align:center;">Library</th>
</tr>
</thead>

<tbody>
<tr>
    <td style="text-align:left;">Async</td>
    <td style="text-align:left;"><a href="https://github.com/Nodejs-Colorado/node-twitter-sentiment-async">node-twitter-sentiment-async</a></td>
    <td style="text-align:left;"><a href="https://github.com/caolan/async">https://github.com/caolan/async</a></td>
</tr>
<tr>
    <td style="text-align:left;">Promises</td>
    <td style="text-align:left;"><a href="https://github.com/Nodejs-Colorado/node-twitter-sentiment-promises">node-twitter-sentiment-promises</a></td></td>
    <td style="text-align:left;"><a href="https://github.com/kriskowal/q">https://github.com/kriskowal/q</a></td>
</tr>
<tr>
    <td style="text-align:left;">Generators</td>
    <td style="text-align:center;">n/a</td>
    <td style="text-align:center;">n/a</td>
</tr>
<tr>
    <td style="text-align:left;">IcedCoffeeScript</td>
    <td style="text-align:center;">n/a</td>
    <td style="text-align:left;"><a href="https://github.com/maxtaco/coffee-script">https://github.com/maxtaco/coffee-script</a></td>
</tr>
</tbody>
</table>

<h2>Async</h2>

<p><strong>Thanks to <a href="http://www.meetup.com/Node-js-Denver-Boulder/members/8358230/">Manish Vachharajani</a> for developing the code for this example.</strong></p>

<p>One solution is to use the <a href="https://github.com/caolan/async">Async</a>. This is often the go-to solution, since the syntax is simple, it&#39;s totally straightforward, and it uses call backs. In fact, in order to use Async, you must follow the convention of providing the callback as the last argument of the Async function. Thus, for users used to callbacks, this is an extremely easy solution.</p>

<h3>Basics</h3>

<p>Start by installing the package:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>npm install async
</span></code></pre></td></tr></table></div></figure>

<p>In our code we will be using the <code>map()</code> helper method, which takes an array, a filter function, and a callback. The filter function is an async function that takes a callback.</p>

<p>Simple example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">async</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;async&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">names</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&quot;michael&quot;</span><span class="p">,</span><span class="s2">&quot;richard&quot;</span><span class="p">,</span><span class="s2">&quot;john&quot;</span><span class="p">,</span><span class="s2">&quot;jennifer&quot;</span><span class="p">,</span><span class="s2">&quot;ben&quot;</span><span class="p">,</span><span class="s2">&quot;julie&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="nx">async</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">names</span><span class="p">,</span> <span class="nx">getInfo</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Finished: &#39;</span> <span class="o">+</span> <span class="nx">result</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Error: &#39;</span> <span class="o">+</span> <span class="nx">err</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">getInfo</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">name</span><span class="p">.</span><span class="nx">toUpperCase</span><span class="p">());</span>
</span><span class='line'><span class="p">},</span> <span class="mi">1000</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Test it out <a href="http://runnable.com/UyXKBzE8BKUZRnR5/node-async-map-example-for-node-js">here</a>.</p>

<p>Basically, we have an array of names, in lower case, which we are converting to uppercase, then outputting via a <code>console.log</code>. Let&#39;s say that another function depended on the results of <code>getInfo</code>, if <code>getInfo</code> was long-running, then the other function could fire before <code>getInfo</code> returned the results. Thus, the need to suspend the function until the results are returned.</p>

<h3>Update Node-Twitter-Sentiment</h3>

<p>We just need to update the <em>index.js</em> file in the &quot;routes&quot; folder:<br>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span><br>
<span class='line-number'>2</span><br>
<span class='line-number'>3</span><br>
<span class='line-number'>4</span><br>
<span class='line-number'>5</span><br>
<span class='line-number'>6</span><br>
<span class='line-number'>7</span><br>
<span class='line-number'>8</span><br>
<span class='line-number'>9</span><br>
<span class='line-number'>10</span><br>
<span class='line-number'>11</span><br>
<span class='line-number'>12</span><br>
<span class='line-number'>13</span><br>
<span class='line-number'>14</span><br>
<span class='line-number'>15</span><br>
<span class='line-number'>16</span><br>
<span class='line-number'>17</span><br>
<span class='line-number'>18</span><br>
<span class='line-number'>19</span><br>
<span class='line-number'>20</span><br>
<span class='line-number'>21</span><br>
<span class='line-number'>22</span><br>
<span class='line-number'>23</span><br>
<span class='line-number'>24</span><br>
<span class='line-number'>25</span><br>
<span class='line-number'>26</span><br>
<span class='line-number'>27</span><br>
<span class='line-number'>28</span><br>
<span class='line-number'>29</span><br>
<span class='line-number'>30</span><br>
<span class='line-number'>31</span><br>
<span class='line-number'>32</span><br>
<span class='line-number'>33</span><br>
<span class='line-number'>34</span><br>
<span class='line-number'>35</span><br>
<span class='line-number'>36</span><br>
<span class='line-number'>37</span><br>
<span class='line-number'>38</span><br>
<span class='line-number'>39</span><br>
<span class='line-number'>40</span><br>
<span class='line-number'>41</span><br>
<span class='line-number'>42</span><br>
<span class='line-number'>43</span><br>
<span class='line-number'>44</span><br>
<span class='line-number'>45</span><br>
<span class='line-number'>46</span><br>
<span class='line-number'>47</span><br>
<span class='line-number'>48</span><br>
<span class='line-number'>49</span><br>
<span class='line-number'>50</span><br>
<span class='line-number'>51</span><br>
<span class='line-number'>52</span><br>
<span class='line-number'>53</span><br>
<span class='line-number'>54</span><br>
<span class='line-number'>55</span><br>
<span class='line-number'>56</span><br>
<span class='line-number'>57</span><br>
<span class='line-number'>58</span><br>
<span class='line-number'>59</span><br>
<span class='line-number'>60</span><br>
<span class='line-number'>61</span><br>
<span class='line-number'>62</span><br>
<span class='line-number'>63</span><br>
<span class='line-number'>64</span><br>
<span class='line-number'>65</span><br>
<span class='line-number'>66</span><br>
<span class='line-number'>67</span><br>
<span class='line-number'>68</span><br>
<span class='line-number'>69</span><br>
<span class='line-number'>70</span><br>
<span class='line-number'>71</span><br>
<span class='line-number'>72</span><br>
<span class='line-number'>73</span><br>
<span class='line-number'>74</span><br>
<span class='line-number'>75</span><br>
<span class='line-number'>76</span><br>
<span class='line-number'>77</span><br>
<span class='line-number'>78</span><br>
<span class='line-number'>79</span><br>
<span class='line-number'>80</span><br>
<span class='line-number'>81</span><br>
<span class='line-number'>82</span><br>
<span class='line-number'>83</span><br>
<span class='line-number'>84</span><br>
<span class='line-number'>85</span><br>
<span class='line-number'>86</span><br>
<span class='line-number'>87</span><br>
<span class='line-number'>88</span><br>
<span class='line-number'>89</span><br>
<span class='line-number'>90</span><br>
<span class='line-number'>91</span><br>
<span class='line-number'>92</span><br>
<span class='line-number'>93</span><br>
<span class='line-number'>94</span><br>
<span class='line-number'>95</span><br>
<span class='line-number'>96</span><br>
<span class='line-number'>97</span><br>
<span class='line-number'>98</span><br>
<span class='line-number'>99</span><br>
<span class='line-number'>100</span><br>
<span class='line-number'>101</span><br>
<span class='line-number'>102</span><br>
<span class='line-number'>103</span><br>
<span class='line-number'>104</span><br>
<span class='line-number'>105</span><br>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s2">&quot;use strict&quot;</span><span class="p">;</span><br>
</span><span class='line'><br>
</span><span class='line'><span class="kd">var</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;path&quot;</span><span class="p">);</span><br>
</span><span class='line'><span class="kd">var</span> <span class="nx">twit</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;twit&#39;</span><span class="p">);</span><br>
</span><span class='line'><span class="kd">var</span> <span class="nx">sentimental</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;Sentimental&#39;</span><span class="p">);</span><br>
</span><span class='line'><span class="kd">var</span> <span class="nx">config</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;../config&quot;</span><span class="p">);</span><br>
</span><span class='line'><span class="kd">var</span> <span class="nx">async</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;async&#39;</span><span class="p">);</span><br>
</span><span class='line'><br>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">index</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span><br>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="s1">&#39;index&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">title</span><span class="o">:</span> <span class="s2">&quot;Twit-Decision&quot;</span><span class="p">});</span><br>
</span><span class='line'><span class="p">};</span><br>
</span><span class='line'><br>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">ping</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span><br>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s2">&quot;pong!&quot;</span><span class="p">,</span> <span class="mi">200</span><span class="p">);</span><br>
</span><span class='line'><span class="p">};</span><br>
</span><span class='line'><br>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">search</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span><br>
</span><span class='line'>  <span class="c1">// grab the request from the client</span><br>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">choices</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">choices</span><span class="p">);</span><br>
</span><span class='line'>  <span class="c1">// grab the current date</span><br>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">today</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">();</span><br>
</span><span class='line'>  <span class="c1">// establish the twitter config (grab your keys at dev.twitter.com)</span><br>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">twitter</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">twit</span><span class="p">({</span><br>
</span><span class='line'>    <span class="nx">consumer<em>key</span><span class="o">:</span> <span class="nx">config</span><span class="p">.</span><span class="nx">consumer</em>key</span><span class="p">,</span><br>
</span><span class='line'>    <span class="nx">consumer<em>secret</span><span class="o">:</span> <span class="nx">config</span><span class="p">.</span><span class="nx">consumer</em>secret</span><span class="p">,</span><br>
</span><span class='line'>    <span class="nx">access<em>token</span><span class="o">:</span> <span class="nx">config</span><span class="p">.</span><span class="nx">access</em>token</span><span class="p">,</span><br>
</span><span class='line'>    <span class="nx">access<em>token</em>secret</span><span class="o">:</span> <span class="nx">config</span><span class="p">.</span><span class="nx">access<em>token</em>secret</span><br>
</span><span class='line'>  <span class="p">});</span><br>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;----------&quot;</span><span class="p">)</span><br>
</span><span class='line'><br>
</span><span class='line'>  <span class="c1">// grade 20 tweets from today with keyword choice and call callback</span><br>
</span><span class='line'>  <span class="c1">// when done</span><br>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">getAndScoreTweets</span><span class="p">(</span><span class="nx">choice</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span><br>
</span><span class='line'>    <span class="nx">twitter</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;search/tweets&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">q</span><span class="o">:</span> <span class="s1">&#39;&#39;</span> <span class="o">+</span> <span class="nx">choice</span> <span class="o">+</span> <span class="s1">&#39; since:&#39;</span> <span class="o">+</span> <span class="nx">today</span><span class="p">.</span><span class="nx">getFullYear</span><span class="p">()</span> <span class="o">+</span> <span class="s1">&#39;-&#39;</span> <span class="o">+</span><br>
</span><span class='line'>      <span class="p">(</span><span class="nx">today</span><span class="p">.</span><span class="nx">getMonth</span><span class="p">()</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;-&#39;</span> <span class="o">+</span> <span class="nx">today</span><span class="p">.</span><span class="nx">getDate</span><span class="p">(),</span> <span class="nx">count</span><span class="o">:</span><span class="mi">20</span><span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span><br>
</span><span class='line'>        <span class="c1">// perform sentiment analysis (see below)</span><br>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span><br>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span><br>
</span><span class='line'>        <span class="nx">callback</span><span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nx">message</span><span class="p">,</span> <span class="kc">undefined</span><span class="p">);</span><br>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span><br>
</span><span class='line'>      <span class="p">}</span><br>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">score</span> <span class="o">=</span> <span class="nx">performAnalysis</span><span class="p">(</span><span class="nx">data</span><span class="p">[</span><span class="s1">&#39;statuses&#39;</span><span class="p">]);</span><br>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;score:&quot;</span><span class="p">,</span> <span class="nx">score</span><span class="p">)</span><br>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;choice:&quot;</span><span class="p">,</span> <span class="nx">choice</span><span class="p">)</span><br>
</span><span class='line'>      <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">score</span><span class="p">);</span><br>
</span><span class='line'>    <span class="p">});</span><br>
</span><span class='line'>  <span class="p">}</span><br>
</span><span class='line'>  <span class="c1">//Grade tweets for each choice in parallel and compute winner when</span><br>
</span><span class='line'>  <span class="c1">//all scores are collected</span><br>
</span><span class='line'>  <span class="nx">async</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">choices</span><span class="p">,</span> <span class="nx">getAndScoreTweets</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">scores</span><span class="p">)</span> <span class="p">{</span><br>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span><br>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Unable to score all tweets&quot;</span><span class="p">);</span><br>
</span><span class='line'>      <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">err</span><span class="p">));</span><br>
</span><span class='line'>    <span class="p">}</span><br>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">highestChoice</span> <span class="o">=</span> <span class="nx">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><br>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">highestScore</span> <span class="o">=</span> <span class="nx">scores</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">prev</span><span class="p">,</span> <span class="nx">cur</span><span class="p">,</span> <span class="nx">index</span><span class="p">)</span> <span class="p">{</span><br>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nx">prev</span> <span class="o">&lt;</span> <span class="nx">cur</span><span class="p">)</span> <span class="p">{</span><br>
</span><span class='line'>        <span class="nx">highestChoice</span> <span class="o">=</span> <span class="nx">choices</span><span class="p">[</span><span class="nx">index</span><span class="p">];</span><br>
</span><span class='line'>        <span class="k">return</span> <span class="nx">cur</span><span class="p">;</span><br>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span><br>
</span><span class='line'>        <span class="k">return</span> <span class="nx">prev</span><span class="p">;</span><br>
</span><span class='line'>      <span class="p">}</span><br>
</span><span class='line'>    <span class="p">});</span><br>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span><span class="s1">&#39;score&#39;</span><span class="o">:</span> <span class="nx">highestScore</span><span class="p">,</span> <span class="s1">&#39;choice&#39;</span><span class="o">:</span> <span class="nx">highestChoice</span><span class="p">}));</span><br>
</span><span class='line'>  <span class="p">});</span><br>
</span><span class='line'><span class="p">}</span><br>
</span><span class='line'><br>
</span><span class='line'><span class="kd">function</span> <span class="nx">performAnalysis</span><span class="p">(</span><span class="nx">tweetSet</span><span class="p">)</span> <span class="p">{</span><br>
</span><span class='line'>  <span class="c1">//set a results variable</span><br>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">results</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><br>
</span><span class='line'>  <span class="c1">// iterate through the tweets, pulling the text, retweet count, and favorite count</span><br>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">tweetSet</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span><br>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">tweet</span> <span class="o">=</span> <span class="nx">tweetSet</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="s1">&#39;text&#39;</span><span class="p">];</span><br>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">retweets</span> <span class="o">=</span> <span class="nx">tweetSet</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="s1">&#39;retweet_count&#39;</span><span class="p">];</span><br>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">favorites</span> <span class="o">=</span> <span class="nx">tweetSet</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="s1">&#39;favorite_count&#39;</span><span class="p">];</span><br>
</span><span class='line'>    <span class="c1">// remove the hashtag from the tweet text</span><br>
</span><span class='line'>    <span class="nx">tweet</span> <span class="o">=</span> <span class="nx">tweet</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="s1">&#39;#&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">);</span><br>
</span><span class='line'>    <span class="c1">// perform sentiment on the text</span><br>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">score</span> <span class="o">=</span> <span class="nx">sentimental</span><span class="p">.</span><span class="nx">analyze</span><span class="p">(</span><span class="nx">tweet</span><span class="p">)[</span><span class="s1">&#39;score&#39;</span><span class="p">];</span><br>
</span><span class='line'>    <span class="c1">// calculate score</span><br>
</span><span class='line'>    <span class="nx">results</span> <span class="o">+=</span> <span class="nx">score</span><span class="p">;</span><br>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nx">score</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">){</span><br>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nx">retweets</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span><br>
</span><span class='line'>        <span class="nx">results</span> <span class="o">+=</span> <span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">retweets</span><span class="p">)</span><span class="o">/</span><span class="nb">Math</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">2</span><span class="p">));</span><br>
</span><span class='line'>      <span class="p">}</span><br>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nx">favorites</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span><br>
</span><span class='line'>        <span class="nx">results</span> <span class="o">+=</span> <span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">favorites</span><span class="p">)</span><span class="o">/</span><span class="nb">Math</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">2</span><span class="p">));</span><br>
</span><span class='line'>      <span class="p">}</span><br>
</span><span class='line'>    <span class="p">}</span><br>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">score</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">){</span><br>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nx">retweets</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span><br>
</span><span class='line'>        <span class="nx">results</span> <span class="o">-=</span> <span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">retweets</span><span class="p">)</span><span class="o">/</span><span class="nb">Math</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">2</span><span class="p">));</span><br>
</span><span class='line'>      <span class="p">}</span><br>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nx">favorites</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span><br>
</span><span class='line'>        <span class="nx">results</span> <span class="o">-=</span> <span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">favorites</span><span class="p">)</span><span class="o">/</span><span class="nb">Math</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">2</span><span class="p">));</span><br>
</span><span class='line'>      <span class="p">}</span><br>
</span><span class='line'>    <span class="p">}</span><br>
</span><span class='line'>    <span class="k">else</span> <span class="p">{</span><br>
</span><span class='line'>      <span class="nx">results</span> <span class="o">+=</span> <span class="mi">0</span><span class="p">;</span><br>
</span><span class='line'>    <span class="p">}</span><br>
</span><span class='line'>  <span class="p">}</span><br>
</span><span class='line'>  <span class="c1">// return score</span><br>
</span><span class='line'>  <span class="nx">results</span> <span class="o">=</span> <span class="nx">results</span> <span class="o">/</span> <span class="nx">tweetSet</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><br>
</span><span class='line'>  <span class="k">return</span> <span class="nx">results</span><br>
</span><span class='line'><span class="p">}</span><br>
</span></code></pre></td></tr></table></div></figure></p>

<h4>What&#39;s going on?</h4>

<p>Let&#39;s look at the specific changes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// grade 20 tweets from today with keyword choice and call callback</span>
</span><span class='line'><span class="c1">// when done</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">getAndScoreTweets</span><span class="p">(</span><span class="nx">choice</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">twitter</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;search/tweets&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">q</span><span class="o">:</span> <span class="s1">&#39;&#39;</span> <span class="o">+</span> <span class="nx">choice</span> <span class="o">+</span> <span class="s1">&#39; since:&#39;</span> <span class="o">+</span> <span class="nx">today</span><span class="p">.</span><span class="nx">getFullYear</span><span class="p">()</span> <span class="o">+</span> <span class="s1">&#39;-&#39;</span> <span class="o">+</span>
</span><span class='line'>    <span class="p">(</span><span class="nx">today</span><span class="p">.</span><span class="nx">getMonth</span><span class="p">()</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;-&#39;</span> <span class="o">+</span> <span class="nx">today</span><span class="p">.</span><span class="nx">getDate</span><span class="p">(),</span> <span class="nx">count</span><span class="o">:</span><span class="mi">20</span><span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// perform sentiment analysis (see below)</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">callback</span><span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nx">message</span><span class="p">,</span> <span class="kc">undefined</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">score</span> <span class="o">=</span> <span class="nx">performAnalysis</span><span class="p">(</span><span class="nx">data</span><span class="p">[</span><span class="s1">&#39;statuses&#39;</span><span class="p">]);</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;score:&quot;</span><span class="p">,</span> <span class="nx">score</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;choice:&quot;</span><span class="p">,</span> <span class="nx">choice</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">score</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//Grade tweets for each choice in parallel and compute winner when</span>
</span><span class='line'><span class="c1">//all scores are collected</span>
</span><span class='line'><span class="nx">async</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">choices</span><span class="p">,</span> <span class="nx">getAndScoreTweets</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">scores</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Unable to score all tweets&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">err</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">highestChoice</span> <span class="o">=</span> <span class="nx">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">highestScore</span> <span class="o">=</span> <span class="nx">scores</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">prev</span><span class="p">,</span> <span class="nx">cur</span><span class="p">,</span> <span class="nx">index</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nx">prev</span> <span class="o">&lt;</span> <span class="nx">cur</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">highestChoice</span> <span class="o">=</span> <span class="nx">choices</span><span class="p">[</span><span class="nx">index</span><span class="p">];</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">cur</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">prev</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span><span class="s1">&#39;score&#39;</span><span class="o">:</span> <span class="nx">highestScore</span><span class="p">,</span> <span class="s1">&#39;choice&#39;</span><span class="o">:</span> <span class="nx">highestChoice</span><span class="p">}));</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>We pass in the <code>choices</code> array, the <code>getAndScoreTweets()</code> function (which handles the calculating of sentiment), then the results are serialized and sent back to the client. <code>async.map()</code> suspends the <code>getAndScoreTweets()</code> function until it&#39;s done running. Thus, the results are not sent back to the client until Sentiment is done.</p>

<p>Further, <code>async.map()</code> allows you to do a long delay operation on each array element because of the fact that the mapped function must call &quot;callback&quot; - which happens in the <code>getInfo()</code> function.</p>

<p>Simple, right?</p>

<p>Check out the final code here: <a href="https://github.com/mjhea0/node-twitter-sentiment-async">https://github.com/mjhea0/node-twitter-sentiment-async</a></p>

<h2>Promises</h2>

<p><strong>Thanks to <a href="http://www.meetup.com/Node-js-Denver-Boulder/members/23013171/">Richard Lucas</a> for developing the code and writing the following explanation.</strong></p>

<p>Promises are not the easiest JavaScript concept to wrap your head around, so do not feel bad if this concept takes time to understand.  It certainly has taken a lot of time for myself, and I still get caught up and confused in using some of the methods.  In this example, I tried to just use a simple (and hopefully easy to understand) pattern of deferreds using the Q promise library.  You may also have experience with jQuery deferreds via the <code>$.Deferred</code> object.  They are very similar.</p>

<h3>What are promises (from the Q <a href="https://github.com/kriskowal/q">documentation</a>)</h3>

<blockquote>
<p>If a function cannot return a value or throw an exception without blocking, it can return a promise instead. A promise is an object that represents the return value or the thrown exception that the function may eventually provide. A promise can also be used as a proxy for a remote object to overcome latency.</p>
</blockquote>

<h3>Here are some great resources for learning more about promises</h3>

<ol>
<li><a href="http://promises-aplus.github.io/promises-spec/">Promises A+ Spec</a></li>
<li><a href="http://documentup.com/kriskowal/q/">Q Library</a></li>
<li><a href="http://www.promisejs.org/">Promisesjs.org - Great introduction</a></li>
<li><a href="http://nodeschool.io/#promiseitwonthurt">Promises by Nodeschool.io</a></li>
<li><a href="http://mattgreer.org/articles/promises-in-wicked-detail/?utm_source=javascriptweekly&amp;utm_medium=email">Javascript Promises in Wicked Detail</a></li>
<li><a href="http://strongloop.com/strongblog/promises-in-node-js-with-q-an-alternative-to-callbacks/">Promises in Node.js</a></li>
<li><a href="https://github.com/bellbind/using-promise-q/">Using Promises with Q</a></li>
<li><a href="http://shop.oreilly.com/product/0636920030508.do">Using jQuery Deferreds - Book from O&#39;Reilly</a></li>
</ol>

<h3>Pattern used</h3>

<p>Here the deferred pattern was used, which goes something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">promise</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">deferred</span> <span class="o">=</span> <span class="nx">Q</span><span class="p">.</span><span class="nx">defer</span><span class="p">();</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">deferred</span><span class="p">.</span><span class="nx">reject</span><span class="p">(</span><span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="nx">err</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">deferred</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">deferred</span><span class="p">.</span><span class="nx">promise</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>You then go on to using the <code>then</code> and <code>done</code> methods:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">promise</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">doSomething</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'><span class="p">}).</span><span class="nx">done</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">finishSomething</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<h3>How they were implemented</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">searchTweets</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">choice</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">deferred</span> <span class="o">=</span> <span class="nx">Q</span><span class="p">.</span><span class="nx">defer</span><span class="p">(),</span> <span class="c1">// declare the deferred</span>
</span><span class='line'>     <span class="p">...</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">twitter</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;search/tweets&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nx">q</span><span class="o">:</span> <span class="s1">&#39;&#39;</span> <span class="o">+</span> <span class="nx">choice</span> <span class="o">+</span> <span class="s1">&#39; since:&#39;</span> <span class="o">+</span> <span class="nx">dateString</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">count</span><span class="o">:</span> <span class="mi">20</span>
</span><span class='line'>  <span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">deferred</span><span class="p">.</span><span class="nx">reject</span><span class="p">(</span><span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="nx">err</span><span class="p">));</span> <span class="c1">//reject it in the callback</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">...</span>
</span><span class='line'>        <span class="nx">choiceData</span><span class="p">[</span><span class="s1">&#39;choice&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">choice</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">choiceData</span><span class="p">[</span><span class="s1">&#39;score&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">score</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">deferred</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">choiceData</span><span class="p">);</span> <span class="c1">//resolve it in the callback</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">deferred</span><span class="p">.</span><span class="nx">promise</span><span class="p">;</span> <span class="c1">//return the promise object</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>

<p>The search function.  Note the promise chain:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">search</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">choices</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">choices</span><span class="p">),</span>
</span><span class='line'>      <span class="nx">choiceArray</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">promise</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">choices</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">deferred</span> <span class="o">=</span> <span class="nx">Q</span><span class="p">.</span><span class="nx">defer</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">choices</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">choice</span><span class="p">,</span> <span class="nx">index</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">searchTweets</span><span class="p">(</span><span class="nx">choice</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">fail</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
</span><span class='line'>        <span class="p">})</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">done</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">choiceArray</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="nx">choiceArray</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="nx">choices</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">deferred</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">choiceArray</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">deferred</span><span class="p">.</span><span class="nx">promise</span><span class="p">;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">promise</span><span class="p">(</span><span class="nx">choices</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">scoreCompare</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}).</span><span class="nx">done</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;final_result&#39;</span><span class="p">,</span> <span class="nx">result</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>

<p>Have Fun!</p>

<h2>Generators</h2>

<p>Generators are the new kid on the block, but they look the most promising. Essentially, they make it easy to suspend/pause a function then resume it with the <code>yield</code> function.</p>

<blockquote>
<p>Make sure you are using a browser that supports ES6: <a href="http://kangax.github.io/es5-compat-table/es6/#Generators_(yield">http://kangax.github.io/es5-compat-table/es6/#Generators_(yield)</a>). I personally use <a href="https://www.google.com/intl/en/chrome/browser/canary.html">Chrome Canary</a>, with experimental Javasctipt enabled: &quot;chrome://flags/#enable-javascript-harmony&quot;.</p>
</blockquote>

<p>&#8230; also &#8230;</p>

<blockquote>
<p>As of Node v0.11.3, you must use the <code>--harmony_generators</code> flag for running applications that contain generator examples in order to enable ES6 experimental features - e.g., <code>node --harmony_generators app.js</code>.</p>
</blockquote>

<p>Let&#39;s look at a quick example.</p>

<h3>Example</h3>

<p>Open the Javascript console, then enter this generator function:<br>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span><br>
<span class='line-number'>2</span><br>
<span class='line-number'>3</span><br>
<span class='line-number'>4</span><br>
<span class='line-number'>5</span><br>
<span class='line-number'>6</span><br>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span><span class="o">*</span> <span class="nx">naturalNumbers</span><span class="p">(){</span><br>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">n</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span><br>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="kc">true</span><span class="p">){</span><br>
</span><span class='line'>    <span class="nx">yield</span> <span class="nx">n</span><span class="o">++</span><span class="p">;</span><br>
</span><span class='line'>  <span class="p">}</span><br>
</span><span class='line'><span class="p">}</span><br>
</span></code></pre></td></tr></table></div></figure></p>

<p>Next, you can call the function with this line:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">numbers</span> <span class="o">=</span> <span class="nx">naturalNumbers</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>

<p>Finally, you can generate an object with the returned values by calling <code>numbers.next()</code></p>

<p><img src="https://raw.github.com/mjhea0/node-twitter-sentiment/master/es6-generators.png" alt="es6-generators"></p>

<p>So, how do we add this to our Sentiment project? I&#39;m not sure. :)</p>

<h2>IcedCoffeeScript</h2>

<h3>Example</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">et = </span><span class="nx">require</span> <span class="s">&#39;errTo&#39;</span>
</span><span class='line'><span class="p">{</span><span class="nx">get</span><span class="p">}</span> <span class="o">=</span> <span class="nx">require</span> <span class="s">&#39;request&#39;</span>
</span><span class='line'><span class="nv">fn = </span><span class="nf">(done) -&gt;</span>
</span><span class='line'>  <span class="nx">await</span> <span class="nx">get</span> <span class="s">&#39;http://foo.com&#39;</span><span class="p">,</span> <span class="nx">et</span> <span class="nx">done</span><span class="p">,</span> <span class="nx">defer</span> <span class="nx">resp</span><span class="p">,</span> <span class="nx">body</span>
</span><span class='line'>  <span class="nx">await</span> <span class="nx">get</span> <span class="s">&#39;http://bar.com&#39;</span><span class="p">,</span> <span class="nx">et</span> <span class="nx">done</span><span class="p">,</span> <span class="nx">defer</span> <span class="nx">resp</span><span class="p">,</span> <span class="nx">body</span>
</span><span class='line'>  <span class="nx">do</span> <span class="nx">done</span>
</span><span class='line'><span class="nx">await</span> <span class="nx">fn</span> <span class="nx">defer</span> <span class="nx">err</span>
</span><span class='line'><span class="k">throw</span> <span class="nx">err</span> <span class="k">if</span> <span class="nx">err</span>
</span></code></pre></td></tr></table></div></figure>

<p>So, how do we ad this to our Sentiment project? I&#39;m not sure. :)</p>

<h2>Data Binding</h2>

<blockquote>
<p>This isn&#39;t a method of handling the non-blocking function issue, but it instead shows how easily update the front end. We are using Async again to address the function issue. Check out the code <a href="https://github.com/Nodejs-Colorado/node-twitter-sentiment-databinding">here</a>.</p>
</blockquote>

<p><strong>Thanks to <a href="http://www.meetup.com/Node-js-Denver-Boulder/members/103374712/">Aaron Vandrey</a> for developing the code and writing the following explanation.</strong></p>

<p>Although there are a number of front-end MV* frameworks that could be used, we chose the <a href="https://github.com/knockout/knockout">KnockoutJS</a> data binding library for simplicity. KnockoutJS uses &quot;observables&quot; to enable two-way data binding from the View (HTML) back to the View-model (JavaScript).</p>

<p>From [10 things to know about KnockoutJS on day one])http://www.knockmeout.net/2011/06/10-things-to-know-about-knockoutjs-on.html)&quot;:</p>

<blockquote>
<p>Observables are functions. The actual value and subscribers to the observable are cached internally by the function. You set an observable’s value by passing the new value as the only argument to the function and you read the value by passing no arguments.</p>
</blockquote>

<p>We can use these functions to read the values from the form directly, hide and expose DIVs and change text on the screen.</p>

<p>From the KnockoutJS data-binding <a href="http://knockoutjs.com/documentation/binding-syntax.html">page</a>:</p>

<blockquote>
<p>Knockout’s declarative binding system provides a concise and powerful way to link data to the UI. It’s generally easy and obvious to bind to simple data properties or to use a single binding.<br>
…<br>
A binding consists of two items, the binding name and value, separated by a colon.</p>
</blockquote>

<h3>Server Side Code</h3>

<h4>Views</h4>

<p>Combining the functions in our <em>main.js</em> (more on this later), on the client side, with Knockout’s declarative data-binding syntax, we can set up the Jade template in the manner shown below.</p>

<p>In the original Jade template there are placeholder DIVs set up that we then use jQuery to interact with - to display the error messages and results. We also used jQuery to update the styles applied to the DIVs. Since we are using data binding in this example, we will go ahead and set up the DIVs for errors and results and have their HTML and styles in the DOM at all times. Then using the &quot;visible&quot; data binding on the DIVs we can hide and expose them as needed. In the example below we have a couple of data-bind attributes that KnockoutJS will use to handle the two-way communication from the View to the ViewModel and vise-versa.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>.form-container
</span><span class='line'>  form(action=&#39;&#39;, method=&#39;post&#39;, data-bind=&#39;submit: formSubmit&#39;)
</span><span class='line'>    input#choice1.choice(type=&#39;text&#39;, placeholder=&#39;Choice #1...&#39;, name=&#39;choice1&#39;, data-bind=&#39;value: inputOne&#39;)
</span><span class='line'>    input#choice2.choice(type=&#39;text&#39;, placeholder=&#39;Choice #2...&#39;, name=&#39;choice2&#39;, data-bind=&#39;value: inputTwo&#39;)
</span><span class='line'>    input#decision.btn.btn-success.btn-lg(type=&#39;submit&#39;, value=&#39;Submit&#39; data-bind=&#39;enable: !hasResults()&#39;)
</span><span class='line'>.decision-container
</span><span class='line'>  p(class=&#39;alert alert-danger&#39; data-bind=&#39;visible: error, text: error&#39;)
</span><span class='line'>  div(class=&#39;progress progress-striped active&#39; data-bind=&#39;visible: isProcessing()&#39;)
</span><span class='line'>    div(class=&#39;progress-bar progress-bar-primary&#39; role=&#39;progressbar&#39; aria-valuenow=&#39;100&#39; aria-valuemin=&#39;0&#39; aria-valuemax=&#39;100&#39; style=&#39;width: 100%&#39;)
</span><span class='line'>      span(class=&#39;sr-only&#39;)
</span><span class='line'>  div(class=&#39;panel panel-lg panel-success&#39; data-bind=&#39;visible: hasResults()&#39;)
</span><span class='line'>    div(class=&#39;panel-heading&#39;)
</span><span class='line'>      h3(class=&#39;panel-title&#39;) Decision Results
</span><span class='line'>    div(class=&#39;panel-body&#39;)
</span><span class='line'>      p(class=&#39;decision-text&#39;, data-bind=&#39;html: results&#39;)
</span><span class='line'>      div(class=&#39;text-center&#39;)
</span><span class='line'>        input#decision.btn.btn-success.btn-sm.text-center(type=&#39;button&#39;, value=&#39;Again?&#39; data-bind=&#39;click: tryAgain&#39;)
</span></code></pre></td></tr></table></div></figure>

<p>In the highlighted text we can see just a few of the many <a href="http://knockoutjs.com/documentation/introduction.html">data-binding</a> possibilities.</p>

<p>The <code>submit</code> binding will handle both the &quot;click&quot; event of the submit button as well as a user hitting the &quot;enter&quot; key. In the background KnockoutJS will also perform a &quot;preventDefault&quot; so that the form does not attempt to submit the form to the server.</p>

<p>The <code>value</code> binding will update the ViewModel with the values entered into the text boxes. A form submit is not needed to consume these values, though in this case we are using a form submit. Alternatively we could use KnockoutJS to <code>subscribe</code> to the change event for these form values and begin our processing when our inputs passed validation.</p>

<p>The <code>text</code> binding will both display values in the View propagated from the ViewModel, as well and send values from the View back to the ViewModel.</p>

<p>The <code>enable</code> binding will disable the submit button when the ViewModel reports back to the View that it has results back from the Twitter Sentiment Analysis.</p>

<h3>Client Side Code</h3>

<h4>Client Side Javascript (<em>main.js</em>)</h4>

<p>The biggest difference to <em>/public/javascripts/main.js</em> is to create a ViewModel, and at the ViewModels closure, call KnockoutJS’s <code>applyBindings</code> method to enable all the two-way data binding goodness.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">ViewModel</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="err">…</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">ko</span><span class="p">.</span><span class="nx">applyBindings</span><span class="p">(</span><span class="k">new</span> <span class="nx">ViewModel</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure>

<p>In order to grab the two choices from the form we write a small method that will take use the KnockoutJS observable’s ‘no parameter’ signature to return the values.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">self</span><span class="p">.</span><span class="nx">formSubmit</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="c1">// some error handling</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">self</span><span class="p">.</span><span class="nx">inputOne</span><span class="p">()</span> <span class="o">||</span> <span class="o">!</span><span class="nx">self</span><span class="p">.</span><span class="nx">inputTwo</span><span class="p">()){</span>
</span><span class='line'>        <span class="nx">self</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">getError</span><span class="p">(</span><span class="s1">&#39;requiredInputsError&#39;</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">self</span><span class="p">.</span><span class="nx">inputOne</span><span class="p">()</span> <span class="o">===</span> <span class="nx">self</span><span class="p">.</span><span class="nx">inputTwo</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">self</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">getError</span><span class="p">(</span><span class="s1">&#39;sameInputError&#39;</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">choices</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">self</span><span class="p">.</span><span class="nx">inputOne</span><span class="p">());</span>
</span><span class='line'>        <span class="nx">choices</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">self</span><span class="p">.</span><span class="nx">inputTwo</span><span class="p">());</span>
</span><span class='line'>        <span class="nx">getDecision</span><span class="p">();</span>
</span><span class='line'>        <span class="nx">self</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">self</span><span class="p">.</span><span class="nx">isProcessing</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>

<p>The error handling will remain the same, however in the data-binding example we set the value of our <code>error()</code> observable. The act of setting the value of the error observable causes it to change from being a &quot;falsey&quot; value to being a &quot;truthy&quot; value, which cause the <code>visible</code> data binding to also change from <code>visible = false</code> to <code>visible = true</code>. This changes the visibility of the DIV formatted for error reporting as well as set the text of the specific error we encountered.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">p</span><span class="p">(</span><span class="kr">class</span><span class="o">=</span><span class="s1">&#39;alert alert-danger&#39;</span> <span class="nx">data</span><span class="o">-</span><span class="nx">bind</span><span class="o">=</span><span class="s1">&#39;visible: error, text: error&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>If no errors are encountered on subsequent submissions we can set up the array we need in the call to Twitter. We also blank out the <code>error()</code> observable that will hide the error reporting DIV and also set the <code>isProcessing()</code> observable to true which will expose the &quot;processing&quot; animation.</p>

<p>We finish up processing the results. This logic to this is essentially unchanged, however, it is shown here to further exemplify how values are set and retrieved in KnockoutJS.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">getDecision</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/search&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="s1">&#39;choices&#39;</span><span class="o">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">choices</span><span class="p">)</span> <span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">choices</span><span class="p">.</span><span class="nx">length</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">results</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">self</span><span class="p">.</span><span class="nx">results</span><span class="p">(</span><span class="nx">RESULTS_START_HTML</span> <span class="o">+</span> <span class="nx">results</span><span class="p">.</span><span class="nx">choice</span> <span class="o">+</span> <span class="nx">RESULTS_END_HTML</span> <span class="o">+</span> <span class="nx">results</span><span class="p">.</span><span class="nx">score</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">self</span><span class="p">.</span><span class="nx">hasResults</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">self</span><span class="p">.</span><span class="nx">isProcessing</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>The logic required to turn off the &quot;processing&quot; animation, expose the DIV formatted to successful results, and display the results are achieved by manipulating more observables. The <code>isProcssing()</code> observable is set to false to hide the animation, the <code>hasResults()</code> observable is set to true to expose the results DIV and finally, by setting the <code>results()</code> observable to some friendly copy we let the user know the outcome of the sentiment analysis. When writing this value out the page we use the <code>html</code> binding rather than the <code>text</code> binding so that we can inject HTML into the copy we are writing to the screen. If the <code>text</code> binding had been used, rather than the <code>html</code> binding,  the HTML would have been encoded and we would have had the literal string <code>&lt;strong&gt;</code> written to the screen - which obviously is not what we want in this case.</p>

<h4>main.js:</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">self</span><span class="p">.</span><span class="nx">RESULTS_START_HTML</span> <span class="o">=</span> <span class="s1">&#39;and the winner is ... &lt;strong&gt;&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">self</span><span class="p">.</span><span class="nx">RESULTS_END_HTML</span> <span class="o">=</span> <span class="s1">&#39;&lt;/strong&gt; ... with a score of &#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>

<h4>index.jade:</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>p(class=&#39;decision-text&#39;, data-bind=&#39;html: results&#39;)
</span></code></pre></td></tr></table></div></figure>

<h3>Refactor</h3>

<p>After submitting this code it we determined that the data-binding could have been used even better by not having an error DIV and a results DIV. By taking advantage of the <code>css</code> binding and a KnockoutJS <code>computed</code> observable (an observable that can watch multiple observables and return one value) the Bootstrap class could have easily been changed from <code>danger</code> to <code>success</code> and the title and copy changed using existing observables.</p>

<p>Here <code>shouldShowMessages</code> is a computed observable that will return true if either we have an error or if we have results, otherwise it will return false. Similarly, <code>messageType</code> is a computed observable that will return &quot;error&quot; unless we have successfully received results, at which point it will return &quot;success&quot;.</p>

<h4>index.jade</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>div(class=&#39;panel panel-lg&#39; data-bind=&#39;visible: shouldShowMessages, css: &quot;panel-&quot; + messageType()&#39;)
</span><span class='line'>  div(class=&#39;panel-heading&#39;)
</span><span class='line'>    h3(class=&#39;panel-title&#39; data-bind=&#39;text: messageTitle&#39;)
</span><span class='line'>  div(class=&#39;panel-body&#39;)
</span><span class='line'>    p(class=&#39;decision-text&#39;, data-bind=&#39;html: results&#39;)
</span><span class='line'>    p(class=&#39;text-danger&#39;, data-bind=&#39;text: error&#39;)
</span><span class='line'>    div(class=&#39;text-center&#39;)
</span><span class='line'>      input#decision.btn.btn-success.btn-sm.text-center(type=&#39;button&#39;, value=&#39;Again?&#39; data-bind=&#39;visible: hasResults(), click: tryAgain&#39;)
</span></code></pre></td></tr></table></div></figure>

<h4>main.js:</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">self</span><span class="p">.</span><span class="nx">shouldShowMessages</span> <span class="o">=</span> <span class="nx">ko</span><span class="p">.</span><span class="nx">computed</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">returnValue</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">self</span><span class="p">.</span><span class="nx">isProcessing</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">self</span><span class="p">.</span><span class="nx">hasResults</span><span class="p">()</span> <span class="o">||</span> <span class="nx">self</span><span class="p">.</span><span class="nx">error</span><span class="p">()</span> <span class="o">&gt;</span> <span class="s1">&#39;&#39;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">returnValue</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">returnValue</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="nx">self</span><span class="p">.</span><span class="nx">messageType</span> <span class="o">=</span> <span class="nx">ko</span><span class="p">.</span><span class="nx">computed</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">returnValue</span> <span class="o">=</span> <span class="s1">&#39;danger&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">self</span><span class="p">.</span><span class="nx">messageTitle</span><span class="p">(</span><span class="nx">ERROR_TITLE</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">self</span><span class="p">.</span><span class="nx">hasResults</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">returnValue</span> <span class="o">=</span> <span class="s1">&#39;success&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">self</span><span class="p">.</span><span class="nx">messageTitle</span><span class="p">(</span><span class="nx">SUCCESS_TITLE</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">returnValue</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>It should be noted that <em>most</em> data-bindings will make a call to <code>ko.utils.unwrapObservable()</code> behind the scenes. This allows us to make the data-bind safely on both observables and non-observables. However, if you take a look at where the <code>messageType</code> observable is used you will notice that we are referencing the observable as a function (with parentheses). This is because we are accessing the observable inside an expression.</p>

<h2>Conclusion</h2>

<p>Thanks to <a href="http://www.meetup.com/Node-js-Denver-Boulder/members/74687302/">John Rosendahl</a> for help with writing the intro.</p>

<p>Pull requests are welcomed/encouraged/needed. Enjoy!</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Node Twitter Sentiment]]></title>
    <link href="http://mjhea0.github.com/blog/2014/02/19/node-twitter-sentiment/"/>
    
    <updated>2014-02-19T10:33:00-07:00</updated>
    <id>http://mjhea0.github.com/blog/2014/02/19/node-twitter-sentiment</id>
    
    <content type="html"><![CDATA[<p>In this tutorial we&#39;ll be building an app to pull in real-time Tweets using a Twitter client library for Node called <a href="https://github.com/ttezel/twit">Twit</a> along with <a href="http://nodejs.org/">NodeJS</a>, <a href="http://expressjs.com/">Express</a>, and <a href="https://www.npmjs.org/package/Sentimental">Sentimental</a> (for sentiment analysis).</p>

<p>This is for the <strong><a href="http://www.meetup.com/Node-js-Denver-Boulder/">Node-js-Denver-Boulder Meetup</a></strong> &lt;3 Cheers!</p>

<p><strong>You can grab the example code <a href="https://github.com/mjhea0/node-twitter-sentiment">here</a>.</strong></p>

<blockquote>
<p><strong>Requirements</strong>: This tutorial starts where this intro <a href="https://github.com/mjhea0/node-getting-started">tutorial</a>, Getting Started with Node, ends. If you&#39;ve never set up a Node/Express application before, please start with the intro tutorial. Thanks.</p>
</blockquote>

<p><img src="https://raw.github.com/mjhea0/node-twitter-sentiment/master/twit-decision.png" alt="twit-decision"></p>

<h2>Project Setup</h2>

<p>As you know, Node uses Javascript for both the client and server side. Because of this, the project structure is even more important to not only separate out different concerns (client vs server) but also for your own understanding - e.g., so you can distinguish between client and server side code.</p>

<p>Let&#39;s get to it.</p>

<h3>1. Setup basic project structure with Express</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>express twit-decision
</span></code></pre></td></tr></table></div></figure>

<h3>2. Install dependencies for Node, Express, and Jade:</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">cd </span>twit-decision <span class="o">&amp;&amp;</span> npm install
</span></code></pre></td></tr></table></div></figure>

<h3>3. Your project structure should now look like this:</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>.
</span><span class='line'>├── app.js
</span><span class='line'>├── package.json
</span><span class='line'>├── public
</span><span class='line'>│   ├── images
</span><span class='line'>│   ├── javascripts
</span><span class='line'>│   └── stylesheets
</span><span class='line'>│       └── style.css
</span><span class='line'>├── routes
</span><span class='line'>│   ├── index.js
</span><span class='line'>│   └── user.js
</span><span class='line'>└── views
</span><span class='line'>    ├── index.jade
</span><span class='line'>    └── layout.jade
</span></code></pre></td></tr></table></div></figure>

<h4>What&#39;s going on?</h4>

<ul>
<li>Server side code includes <em>app.js</em> (app configurations, middleware, and routing), the &quot;routes&quot; folder (controller/business logic), and the <em>views</em> folder (views, templates, partials)</li>
<li>Meanwhile, client side code includes the &quot;public&quot; folder (images, Javascript files, and stylesheets)</li>
</ul>

<h3>4. Run the server</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>node app
</span></code></pre></td></tr></table></div></figure>

<p>You should see the &quot;Welcome to Express&quot; Text.</p>

<h2>Server Side Code</h2>

<p>We&#39;ll start with the server side. Our server code will be responsible for serving up our main <code>index</code> page, which will display two input boxes where the end user can enter data for comparison. When the data is passed to the server, via jQuery and AJAX on the client end, the server connects to Twitter, pulls the live tweets, and processes sentiment. Finally, the server sends the results back to the client.</p>

<h3>1. Install dependences</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>npm install twit --save
</span><span class='line'><span class="nv">$ </span>npm install Sentimental --save
</span></code></pre></td></tr></table></div></figure>

<h3>2. Updated <em>app.js</em> code</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// module dependencies</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">routes</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./routes&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;http&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;path&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// create express app</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// all environments</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;port&#39;</span><span class="p">,</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PORT</span> <span class="o">||</span> <span class="mi">3000</span><span class="p">);</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;views&#39;</span><span class="p">,</span> <span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="s1">&#39;views&#39;</span><span class="p">));</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;view engine&#39;</span><span class="p">,</span> <span class="s1">&#39;jade&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">favicon</span><span class="p">());</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">logger</span><span class="p">(</span><span class="s1">&#39;dev&#39;</span><span class="p">));</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">json</span><span class="p">());</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">urlencoded</span><span class="p">());</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">methodOverride</span><span class="p">());</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">app</span><span class="p">.</span><span class="nx">router</span><span class="p">);</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="kr">static</span><span class="p">(</span><span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="s1">&#39;public&#39;</span><span class="p">)));</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// development only</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="s1">&#39;development&#39;</span> <span class="o">==</span> <span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;env&#39;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">errorHandler</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// routes</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="nx">routes</span><span class="p">.</span><span class="nx">index</span><span class="p">);</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/ping&#39;</span><span class="p">,</span> <span class="nx">routes</span><span class="p">.</span><span class="nx">ping</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// create server</span>
</span><span class='line'><span class="nx">http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">(</span><span class="nx">app</span><span class="p">).</span><span class="nx">listen</span><span class="p">(</span><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;port&#39;</span><span class="p">),</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Express server listening on port &#39;</span> <span class="o">+</span> <span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;port&#39;</span><span class="p">));</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>You&#39;ve seen the majority of this code already, from the original <a href="https://github.com/mjhea0/node-getting-started">tutorial</a>, so I won&#39;t go into too much detail. Plus, it&#39;s heavily commented and, right now, it resembles a pretty standard Node/Express app.</p>

<p>Let&#39;s setup our routes next.</p>

<h3>3. Routes</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;path&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">index</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="s1">&#39;index&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">title</span><span class="o">:</span> <span class="s2">&quot;Twit-Decision&quot;</span><span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">ping</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s2">&quot;pong!&quot;</span><span class="p">,</span> <span class="mi">200</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>

<p>Again, pretty straightforward here. We are serving up one page, <em>index</em>, while the second render parameter passes the title to the view. We also added a test route, called <em>ping</em>, which will just display ping on the page.</p>

<p>Test it out. Navigate to <a href="http://localhost:3000/ping">http://localhost:3000/ping</a>. You should see &quot;pong!&quot; in the top left corner.</p>

<h3>4. Views</h3>

<p>Update <em>index.jade</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>doctype html
</span><span class='line'>html
</span><span class='line'>  head
</span><span class='line'>    title= title
</span><span class='line'>    meta(charset=&#39;utf-8&#39;)
</span><span class='line'>    meta(name=&#39;viewport&#39;, content=&#39;width=device-width, initial-scale=1.0&#39;)
</span><span class='line'>    meta(name=&#39;description&#39;, content=&#39;&#39;)
</span><span class='line'>    meta(name=&#39;author&#39;, content=&#39;Michael Herman&#39;)
</span><span class='line'>    link(href=&#39;http://netdna.bootstrapcdn.com/bootswatch/3.1.0/yeti/bootstrap.min.css&#39;, rel=&#39;stylesheet&#39;, media=&#39;screen&#39;)
</span><span class='line'>    link(href=&#39;/stylesheets/main.css&#39;, rel=&#39;stylesheet&#39;, media=&#39;screen&#39;)
</span><span class='line'>  body
</span><span class='line'>    .container
</span><span class='line'>      .jumbotron
</span><span class='line'>        h1 Need to make a decision?
</span><span class='line'>        p.lead Use Twitter sentiment analysis.
</span><span class='line'>        br
</span><span class='line'>        br
</span><span class='line'>        .form-container
</span><span class='line'>          form(action=&#39;&#39;, method=&#39;post&#39;)
</span><span class='line'>            input#choice1.choice(type=&#39;text&#39;, data-choice=&#39;1&#39;, placeholder=&#39;Choice #1...&#39;, name=&#39;choice1&#39;)
</span><span class='line'>            input#choice2.choice(type=&#39;text&#39;, data-choice=&#39;2&#39;, placeholder=&#39;Choice #2...&#39;, name=&#39;choice2&#39;)
</span><span class='line'>            input#decision.btn.btn-success.btn-lg(type=&#39;submit&#39;, value=&#39;Decide!&#39;)
</span><span class='line'>        br
</span><span class='line'>        br
</span><span class='line'>        .decision-container
</span><span class='line'>          p#status
</span><span class='line'>          p#decision-text
</span><span class='line'>          p#score
</span><span class='line'>          input#again.btn.btn-success.btn-lg(value=&#39;Again?&#39;)
</span><span class='line'>    script(src=&#39;http://code.jquery.com/jquery-1.11.0.min.js&#39;)
</span><span class='line'>    script(src=&#39;http://netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js&#39;)
</span><span class='line'>    script(src=&#39;javascripts/main.js&#39;)
</span></code></pre></td></tr></table></div></figure>

<p>This is our only template that we need. It&#39;s the <em>index</em> page, used for markup, and coded using the <a href="http://jade-lang.com/">Jade Template Language</a>. If this is confusing, I suggest converting this code to HTML and comparing the differences.We have the typical meta tags a links to CSS sheets in the <code>&lt;head&gt;</code>. The <code>&lt;body&gt;</code> includes a form as well as a number of selectors for appending the results of the sentiment analysis. Most of the styling is done in Bootstrap.</p>

<p>Let&#39;s quickly jump to the client side.</p>

<h2>Client Side</h2>

<h3>1. Styles</h3>

<p>Add these custom styles to the <em>main.css</em> style within the &quot;stylesheets&quot; folder:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.container</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">max-width</span><span class="o">:</span> <span class="m">1000px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">padding-top</span><span class="o">:</span> <span class="m">50px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">text-align</span><span class="o">:</span> <span class="k">center</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.choice</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span><span class="m">100</span><span class="o">%</span><span class="p">;</span>
</span><span class='line'>  <span class="k">height</span><span class="o">:</span><span class="m">50px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">font-size</span><span class="o">:</span><span class="m">25px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">padding</span><span class="o">:</span><span class="m">10px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nf">#decision-text</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">font-weight</span><span class="o">:</span><span class="k">bold</span><span class="p">;</span>
</span><span class='line'>  <span class="k">font-size</span><span class="o">:</span><span class="m">60px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nf">#decision</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">margin-top</span><span class="o">:</span><span class="m">10px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nf">#status</span><span class="o">,</span> <span class="nf">#score</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">font-size</span><span class="o">:</span><span class="m">25px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.form-container</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">margin</span><span class="o">:</span> <span class="k">auto</span><span class="p">;</span>
</span><span class='line'>  <span class="k">max-width</span><span class="o">:</span> <span class="m">500px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.decision-container</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">margin</span><span class="o">:</span> <span class="k">auto</span><span class="p">;</span>
</span><span class='line'>  <span class="k">max-width</span><span class="o">:</span> <span class="m">500px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>If you&#39;re curious, see how these CSS styles (values and properties) align up to the selectors in the jade template.</p>

<h3>2. Client Side Javascript</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// highest # of choices (inputs) allowed</span>
</span><span class='line'>  <span class="nb">window</span><span class="p">.</span><span class="nx">highestChoice</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">// hide again button on page load</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#again&quot;</span><span class="p">).</span><span class="nx">hide</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">goDecide</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// prevent default browser behavior upon submit</span>
</span><span class='line'>    <span class="nx">e</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
</span><span class='line'>    <span class="c1">// erase old values</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#status&quot;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#score&quot;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// hide decision text</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#decision-text&quot;</span><span class="p">).</span><span class="nx">hide</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#again&quot;</span><span class="p">).</span><span class="nx">hide</span><span class="p">();</span>
</span><span class='line'>    <span class="c1">// display processing text, update color to black in case of an error</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#status&quot;</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="s2">&quot;color&quot;</span><span class="p">,</span> <span class="s2">&quot;black&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#status&quot;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="s2">&quot;Processing ...&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// create variable to see if any of the inputs are input</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">anyEmpty</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// array to hold inputs</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">choices</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>    <span class="c1">// grab values, add to choices array</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">highestChoice</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">choiceValue</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#choice&quot;</span><span class="o">+</span><span class="nx">i</span><span class="p">).</span><span class="nx">val</span><span class="p">();</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nx">choiceValue</span> <span class="o">==</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">anyEmpty</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nx">choices</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">choiceValue</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">choices</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">choiceValue</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">// Handling *some* errors</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">anyEmpty</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#choice1&quot;</span><span class="p">).</span><span class="nx">val</span><span class="p">()</span> <span class="o">!=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#choice2&quot;</span><span class="p">).</span><span class="nx">val</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// send values to server side for processing, wait for callback, getting AJAXy</span>
</span><span class='line'>        <span class="nx">$</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/search&#39;</span><span class="p">,</span> <span class="p">{</span><span class="s1">&#39;choices&#39;</span><span class="o">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">choices</span><span class="p">)},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">data</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'>          <span class="c1">// append data to the DOM</span>
</span><span class='line'>          <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;.form-container&quot;</span><span class="p">).</span><span class="nx">hide</span><span class="p">()</span>
</span><span class='line'>          <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#status&quot;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="s2">&quot;and the winner is ...&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#decision-text&quot;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="nx">data</span><span class="p">[</span><span class="s1">&#39;choice&#39;</span><span class="p">]);</span>
</span><span class='line'>          <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#score&quot;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="s1">&#39;... with a score of &#39;</span> <span class="o">+</span> <span class="nx">data</span><span class="p">[</span><span class="s1">&#39;score&#39;</span><span class="p">]</span> <span class="o">+</span> <span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#decision-text&quot;</span><span class="p">).</span><span class="nx">fadeIn</span><span class="p">();</span>
</span><span class='line'>          <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#score&quot;</span><span class="p">).</span><span class="nx">fadeIn</span><span class="p">();</span>
</span><span class='line'>          <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#again&quot;</span><span class="p">).</span><span class="nx">show</span><span class="p">()</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// error code</span>
</span><span class='line'>        <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#status&quot;</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="s2">&quot;color&quot;</span><span class="p">,</span> <span class="s2">&quot;red&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#status&quot;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="s2">&quot;Both choices are the same. Try again.&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// error code</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#status&quot;</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="s2">&quot;color&quot;</span><span class="p">,</span> <span class="s2">&quot;red&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#status&quot;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="s2">&quot;You must enter a value for both choices.&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// ----- MAIN ----- //</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// on click, run the goDecide function</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#decision&quot;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="nx">goDecide</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// on click new form is shown</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#again&quot;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;.form-container&quot;</span><span class="p">).</span><span class="nx">show</span><span class="p">()</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#again&quot;</span><span class="p">).</span><span class="nx">hide</span><span class="p">()</span>
</span><span class='line'>    <span class="c1">// erase old values</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#status&quot;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#score&quot;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#choice1&quot;</span><span class="p">).</span><span class="nx">val</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#choice2&quot;</span><span class="p">).</span><span class="nx">val</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// hide decision text</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#decision-text&quot;</span><span class="p">).</span><span class="nx">hide</span><span class="p">();</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

<p>Now comes the fun part! Add a <em>main.js</em> file to your &quot;javascripts&quot; folder.</p>

<p>Yes, there&#39;s a lot going on here. Fortunately, it&#39;s well documented.</p>

<p>Start with the <code>// ----- MAIN ----- //</code> code. This essentially controls everything else. Nothing happens until the decision button is clicked. Once that happens the <code>goDecide()</code> function fires. This is where things get, well, interested.</p>

<p>Go through it line by line, reading the comment, then code. Make sure you understand what each statement is doing.</p>

<p>Notice how the magic starts happening when the data is grabbed from the inputs, added to an array, and then sent to the server side via AJAX. Notice the <code>/search</code> endpoint. We pass the stringified <code>choice</code> array to that endpoint, which needs to be setup on the server side, then what for the data to comeback before appending it to the DOM.</p>

<p>Check out the rest of the code on your own. Follow the comments for assistance.</p>

<h2>Back to the Server Side</h2>

<p>So, we need to set up a new route, &#39;/search&#39;, on the server side to handle the data sent from the client side.</p>

<h3>1. <em>app.js</em></h3>

<p>First, add the route to <em>app.js</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/search&#39;</span><span class="p">,</span> <span class="nx">routes</span><span class="p">.</span><span class="nx">search</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

<h3>2. Update routes:</h3>

<p>Then add the following code to <em>index.js</em> in the &quot;routes&quot; folder:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">search</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// grab the request from the client</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">choices</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">choices</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// grab the current date</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">today</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">();</span>
</span><span class='line'>  <span class="c1">// establish the twitter config (grab your keys at dev.twitter.com)</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">twitter</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">twit</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">consumer_key</span><span class="o">:</span> <span class="nx">config</span><span class="p">.</span><span class="nx">consumer_key</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">consumer_secret</span><span class="o">:</span> <span class="nx">config</span><span class="p">.</span><span class="nx">consumer_secret</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">access_token</span><span class="o">:</span> <span class="nx">config</span><span class="p">.</span><span class="nx">access_token</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">access_token_secret</span><span class="o">:</span> <span class="nx">config</span><span class="p">.</span><span class="nx">access_token_secret</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="c1">// set highest score</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">highestScore</span> <span class="o">=</span> <span class="o">-</span><span class="kc">Infinity</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">// set highest choice</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">highestChoice</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">// create new array</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>  <span class="c1">// set score</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">score</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;----------&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// iterate through the choices array from the request</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">choices</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// add choice to new array</span>
</span><span class='line'>    <span class="nx">array</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">choices</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span>
</span><span class='line'>    <span class="c1">// grad 20 tweets from today</span>
</span><span class='line'>    <span class="nx">twitter</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;search/tweets&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">q</span><span class="o">:</span> <span class="s1">&#39;&#39;</span> <span class="o">+</span> <span class="nx">choices</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">+</span> <span class="s1">&#39; since:&#39;</span> <span class="o">+</span> <span class="nx">today</span><span class="p">.</span><span class="nx">getFullYear</span><span class="p">()</span> <span class="o">+</span> <span class="s1">&#39;-&#39;</span> <span class="o">+</span>
</span><span class='line'>      <span class="p">(</span><span class="nx">today</span><span class="p">.</span><span class="nx">getMonth</span><span class="p">()</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;-&#39;</span> <span class="o">+</span> <span class="nx">today</span><span class="p">.</span><span class="nx">getDate</span><span class="p">(),</span> <span class="nx">count</span><span class="o">:</span><span class="mi">20</span><span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// perform sentiment analysis</span>
</span><span class='line'>        <span class="nx">score</span> <span class="o">=</span> <span class="nx">performAnalysis</span><span class="p">(</span><span class="nx">data</span><span class="p">[</span><span class="s1">&#39;statuses&#39;</span><span class="p">]);</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;score:&quot;</span><span class="p">,</span> <span class="nx">score</span><span class="p">)</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;choice:&quot;</span><span class="p">,</span> <span class="nx">choices</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span>
</span><span class='line'>        <span class="c1">//  determine winner</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nx">score</span> <span class="o">&gt;</span> <span class="nx">highestScore</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">highestScore</span> <span class="o">=</span> <span class="nx">score</span><span class="p">;</span>
</span><span class='line'>          <span class="nx">highestChoice</span> <span class="o">=</span> <span class="nx">choices</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;winner:&quot;</span><span class="p">,</span><span class="nx">choices</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">})(</span><span class="nx">i</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">// send response back to the server side; why the need for the timeout?</span>
</span><span class='line'>  <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span><span class="s1">&#39;score&#39;</span><span class="o">:</span> <span class="nx">highestScore</span><span class="p">,</span> <span class="s1">&#39;choice&#39;</span><span class="o">:</span> <span class="nx">highestChoice</span><span class="p">}))</span> <span class="p">},</span> <span class="mi">5000</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>

<p>Again, I&#39;ve commented this heavily. So go through, line by line, and see what&#39;s happening.</p>

<p>Points of note:</p>

<ol>
<li>Add your Twitter config keys to a new file called <em>config.js</em>. More on this in the next section.</li>
<li>Why are we using a timeout? Try removing it. What happens? Why is this a bad practice?</li>
</ol>

<h3>3. Config</h3>

<p>Open the <em>config_example.js</em> file. Save the file as <em>config.js</em>, then add your own <a href="http://dev.twitter.com">Twitter</a> keys. Add this as a dependency along with Twit and Sentimental to your <em>index.js</em> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">twit</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;twit&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">sentimental</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;Sentimental&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">config</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;./config&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

<h3>4. Twitter</h3>

<p>Remember this line from your routes file, <em>index.js</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">score</span> <span class="o">=</span> <span class="nx">performAnalysis</span><span class="p">(</span><span class="nx">data</span><span class="p">[</span><span class="s1">&#39;statuses&#39;</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>

<p>Well, we pass the pulled tweets as arguments into the <code>performAnalysis()</code> function.<br>
performAnalysis<br>
Let&#39;s add that function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">performAnalysis</span><span class="p">(</span><span class="nx">tweetSet</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">//set a results variable</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">results</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">// iterate through the tweets, pulling the text, retweet count, and favorite count</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">tweetSet</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">tweet</span> <span class="o">=</span> <span class="nx">tweetSet</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="s1">&#39;text&#39;</span><span class="p">];</span>
</span><span class='line'>    <span class="nx">retweets</span> <span class="o">=</span> <span class="nx">tweetSet</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="s1">&#39;retweet_count&#39;</span><span class="p">];</span>
</span><span class='line'>    <span class="nx">favorites</span> <span class="o">=</span> <span class="nx">tweetSet</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="s1">&#39;favorite_count&#39;</span><span class="p">];</span>
</span><span class='line'>    <span class="c1">// remove the hastag from the tweet text</span>
</span><span class='line'>    <span class="nx">tweet</span> <span class="o">=</span> <span class="nx">tweet</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="s1">&#39;#&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// perform sentiment on the text</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">score</span> <span class="o">=</span> <span class="nx">sentimental</span><span class="p">.</span><span class="nx">analyze</span><span class="p">(</span><span class="nx">tweet</span><span class="p">)[</span><span class="s1">&#39;score&#39;</span><span class="p">];</span>
</span><span class='line'>    <span class="c1">// calculate score</span>
</span><span class='line'>    <span class="nx">results</span> <span class="o">+=</span> <span class="nx">score</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nx">score</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nx">retweets</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">results</span> <span class="o">+=</span> <span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">retweets</span><span class="p">)</span><span class="o">/</span><span class="nb">Math</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">2</span><span class="p">));</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nx">favorites</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">results</span> <span class="o">+=</span> <span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">favorites</span><span class="p">)</span><span class="o">/</span><span class="nb">Math</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">2</span><span class="p">));</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">score</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nx">retweets</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">results</span> <span class="o">-=</span> <span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">retweets</span><span class="p">)</span><span class="o">/</span><span class="nb">Math</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">2</span><span class="p">));</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nx">favorites</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">results</span> <span class="o">-=</span> <span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">favorites</span><span class="p">)</span><span class="o">/</span><span class="nb">Math</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">2</span><span class="p">));</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">results</span> <span class="o">+=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">// return score</span>
</span><span class='line'>  <span class="nx">results</span> <span class="o">=</span> <span class="nx">results</span> <span class="o">/</span> <span class="nx">tweetSet</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">results</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>After the tweets are passed in, the text is parsed and sentiment is analyzed. Finally a score is calculated and returned.</p>

<p>Boom. That&#39;s it!</p>

<p>Your project structure should now look like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>.
</span><span class='line'>├── app.js
</span><span class='line'>├── config.js
</span><span class='line'>├── package.json
</span><span class='line'>├── public
</span><span class='line'>│   ├── images
</span><span class='line'>│   ├── javascripts
</span><span class='line'>│   │   └── main.js
</span><span class='line'>│   └── stylesheets
</span><span class='line'>│       └── main.css
</span><span class='line'>├── routes
</span><span class='line'>│   └── index.js
</span><span class='line'>└── views
</span><span class='line'>    └── index.jade
</span></code></pre></td></tr></table></div></figure>

<p>Test time!</p>

<h2>Conclusion</h2>

<p>Test this out a few times. Make sure it all works. Perhaps go through it iteratively, following along with the code for further understanding.</p>

<p>Think about what you could add to make this app more fun/unique?</p>

<ol>
<li>Perhaps add a persistence layer, such as MongoDB, to retain the history of your searches to see sentiment over time.</li>
<li>Ability to display actual tweets.</li>
</ol>
]]></content>
    
  </entry>
  
</feed>