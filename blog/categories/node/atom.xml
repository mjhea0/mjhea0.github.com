<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: node | Michael Herman]]></title>
  <link href="http://mjhea0.github.com/blog/categories/node/atom.xml" rel="self"/>
  <link href="http://mjhea0.github.com/"/>
  <updated>2015-07-13T19:03:14-06:00</updated>
  <id>http://mjhea0.github.com/</id>
  <author>
    <name><![CDATA[Michael Herman]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Handling User Authentication with the MEAN Stack]]></title>
    <link href="http://mjhea0.github.com/blog/2015/07/02/handling-user-authentication-with-the-mean-stack/"/>
    <updated>2015-07-02T07:04:00-06:00</updated>
    <id>http://mjhea0.github.com/blog/2015/07/02/handling-user-authentication-with-the-mean-stack</id>
    <content type="html"><![CDATA[<div style="text-align:center;">
  <img src="http://mjhea0.github.com/images/mean-auth.png" style="max-width: 100%; border:0;" alt="mean stack authentication">
</div>

<p><br></p>

<p><strong>This post provides a solution to the question, &quot;How do I handle user authentication with the MEAN Stack - MongoDB, ExpressJS, AngularJS, NodeJS?&quot;.</strong></p>

<blockquote>
<p>Much of this post is ported from <a href="https://realpython.com/blog/python/handling-user-authentication-with-angular-and-flask/">Handling User Authentication with Angular and Flask</a>.</p>
</blockquote>

<p>Keep in mind that this solution posed in this tutorial is not the <em>only</em> solution to the question at hand, and it may not even be the <em>right</em> solution for your situation. Regardless of the solution you implement, it is important to note that since end users have full control of the browser as well as access to the front-end code, sensitive data living in your server-side API must be secure. In other words, make certain that you implement an authentication strategy on the server-side to protect sensitive API endpoints.</p>

<p>That said, we need to enable the following workflow:</p>

<ol>
<li>When the client accesses the main route, an index page is served, at which point Angular takes over.</li>
<li>The Angular app immediately &quot;asks&quot; the server if a user is logged in.</li>
<li>Assuming the server indicates that a user is not logged in, the client is immediately asked to log in.</li>
<li>Once logged in, the Angular app then tracks the user&#39;s login status.</li>
</ol>

<blockquote>
<p>This tutorial uses <a href="http://docs.mongodb.org/v2.6/">MongoDB</a> v2.6.7, <a href="http://expressjs.com/4x/api.html">ExpressJS</a> v4.9.8, <a href="https://code.angularjs.org/1.3.15/docs/guide">AngularJS</a> v1.3.15, <a href="https://nodejs.org/">NodeJS</a> v0.12.2, and <a href="https://github.com/jaredhanson/passport-local">Passport-Local</a> v1.0.0. For a full list of dependencies, please view the <em><a href="https://github.com/mjhea0/mean-auth/blob/master/package.json">package.json</a></em> file.</p>
</blockquote>

<h2>Getting Started</h2>

<p>First, grab the boilerplate code from the <a href="https://github.com/mjhea0/mean-auth/releases/tag/v1">project repo</a>, install the requirements, and then test out the app:</p>

<p><code>sh<br>
$ npm start<br>
</code></p>

<p>Navigate to <a href="http://localhost:3000/">http://localhost:3000/</a> and you should see a simple welcome message - &quot;Yo!&quot;. Once you&#39;re finishing admiring the page, kill the server, and glance over the code within the project folder:</p>

<p><code>sh<br>
├── client<br>
│   ├── index.html<br>
│   ├── main.js<br>
│   └── partials<br>
│       └── home.html<br>
├── package.json<br>
└── server<br>
    ├── app.js<br>
    ├── models<br>
    │   └── user.js<br>
    ├── routes<br>
    │   └── api.js<br>
    └── server.js<br>
</code></p>

<p>Nothing too spectacular. You can see that the back-end code resides in the &quot;server&quot; folder, while the front-end code lives in the &quot;client&quot; folder. Explore the files and folder within each.</p>

<h2>Login API</h2>

<p>Let&#39;s start with the back-end API. This is already built out, for your convenience. Why? The focus is mainly on the client-side. If you&#39;re looking for a back-end tutorial for setting up Passport with NodeJS, ExpressJS, and MongoDB take a look at this <a href="http://mherman.org/blog/2015/01/31/local-authentication-with-passport-and-express-4/#.VZCK9xNViko">tutorial</a>.</p>

<h3>User Registration</h3>

<p>Open the &quot;routes&quot; folder and find the following code:</p>

<p><code>javascript<br>
router.post(&#39;/register&#39;, function(req, res) {<br>
  User.register(new User({ username: req.body.username }), req.body.password, function(err, account) {<br>
    if (err) {<br>
      return res.status(500).json({err: err});<br>
    }<br>
    passport.authenticate(&#39;local&#39;)(req, res, function () {<br>
      return res.status(200).json({status: &#39;Registration successful!&#39;});<br>
    });<br>
  });<br>
});<br>
</code></p>

<p>Here, we grab the values from the payload sent with the POST request (from the client-side), create a new <code>User</code> instance, and then attempt to add the instance to the database. If this succeeds a user is added, of course, and then we return a JSON response with a <code>status</code> of &quot;success&quot;. If it fails, an &quot;error&quot; response is sent.</p>

<p>Let&#39;s test this via curl. Fire up the server and then run the following command:</p>

<p><code>sh<br>
$ curl -H &quot;Accept: application/json&quot; -H &quot;Content-type: application/json&quot; -X POST \<br>
-d &#39;{&quot;username&quot;: &quot;test@test.com&quot;, &quot;password&quot;: &quot;test&quot;}&#39; http://localhost:3000/user/register<br>
</code></p>

<p>You should see a success message:</p>

<p><code>sh<br>
{&quot;status&quot;:&quot;Registration successful!&quot;}<br>
</code></p>

<p>Try it again, with the exact same username and password, and you should see an error:</p>

<p><code>sh<br>
{&quot;err&quot;:{&quot;name&quot;:&quot;BadRequestError&quot;,&quot;message&quot;:&quot;User already exists with username test@test.com&quot;}}<br>
</code></p>

<p>On to the login...</p>

<h3>User Login</h3>

<p><code>javascript<br>
router.post(&#39;/login&#39;, function(req, res, next) {<br>
  passport.authenticate(&#39;local&#39;, function(err, user, info) {<br>
    if (err) {<br>
      return res.status(500).json({err: err});<br>
    }<br>
    if (!user) {<br>
      return res.status(401).json({err: info});<br>
    }<br>
    req.logIn(user, function(err) {<br>
      if (err) {<br>
        return res.status(500).json({err: &#39;Could not log in user&#39;});<br>
      }<br>
      res.status(200).json({status: &#39;Login successful!&#39;});<br>
    });<br>
  })(req, res, next);<br>
});<br>
</code></p>

<p>This utilizes Passport&#39;s <a href="https://github.com/jaredhanson/passport-local">local strategy</a> to verify the username/email as well as the password. The appropriate response is then returned.</p>

<p>With the server running, test again with curl-</p>

<p><code>sh<br>
curl -H &quot;Accept: application/json&quot; -H &quot;Content-type: application/json&quot; -X POST \<br>
-d &#39;{&quot;username&quot;: &quot;test@test.com&quot;, &quot;password&quot;: &quot;test&quot;}&#39; http://localhost:3000/user/login<br>
</code></p>

<p>-and you should see:</p>

<p><code>sh<br>
{&quot;message&quot;:&quot;Login successful!&quot;}<br>
</code></p>

<p>Test again with curl, sending the wrong password, and you should see:</p>

<p><code>sh<br>
{&quot;err&quot;:{&quot;status&quot;:&quot;Incorrect password&quot;}}<br>
</code></p>

<p>Perfect!</p>

<h3>User Logout</h3>

<p>Finally, take a look at the logout:</p>

<p><code>javascript<br>
router.get(&#39;/logout&#39;, function(req, res) {<br>
  req.logout();<br>
  res.status(200).json({status: &#39;Bye!&#39;});<br>
});<br>
</code></p>

<p>This should be straightforward, and you can probably guess what the response will look like - but let&#39;s test it  again:</p>

<p><code>javascript<br>
$ curl -H &quot;Accept: application/json&quot; -H &quot;Content-type: application/json&quot; -X GET \<br>
http://localhost:3000/user/logout<br>
</code></p>

<p>You should see:</p>

<p><code>sh<br>
{&quot;status&quot;:&quot;Bye!&quot;}<br>
</code></p>

<p>On to the client-side!</p>

<h2>Angular App</h2>

<p>Before diving in, remember that since end users have full access to the power of the browser as well as <a href="https://developer.chrome.com/devtools">DevTools</a> and the client-side code, it&#39;s vital that you not only restrict access to sensitive endpoints on the server-side - but that you also do not store sensitive data on the client-side. Keep this in mind as you add auth functionality to your own MEAN application stack.</p>

<h3>Client-side Routing</h3>

<p>Let&#39;s add the remainder of the client-side routes to the <em>main.js</em> file:</p>

<p><code>javascript<br>
myApp.config(function ($routeProvider) {<br>
  $routeProvider<br>
    .when(&#39;/&#39;, {templateUrl: &#39;partials/home.html&#39;})<br>
    .when(&#39;/login&#39;, {templateUrl: &#39;partials/login.html&#39;, controller: &#39;loginController&#39;})<br>
    .when(&#39;/logout&#39;, {controller: &#39;logoutController&#39;})<br>
    .when(&#39;/register&#39;, {templateUrl: &#39;partials/register.html&#39;, controller: &#39;registerController&#39;})<br>
    .when(&#39;/one&#39;, {template: &#39;&lt;h1&gt;This is page one!&lt;/h1&gt;&#39;})<br>
    .when(&#39;/two&#39;, {template: &#39;&lt;h1&gt;This is page two!&lt;/h1&gt;&#39;})<br>
    .otherwise({redirectTo: &#39;/&#39;});<br>
});<br>
</code></p>

<p>Here, we created five new routes. Before we add the subsequent templates and controllers, let&#39;s create a <a href="https://docs.angularjs.org/guide/services">service</a> to handle authentication.</p>

<h3>Authentication Service</h3>

<p>Start by adding the basic structure of the service to a new file called <em>services.js</em> in the &quot;client&quot; directory:</p>

<p>```javascript<br>
angular.module(&#39;myApp&#39;).factory(&#39;AuthService&#39;,<br>
  [&#39;$q&#39;, &#39;$timeout&#39;, &#39;$http&#39;,<br>
  function ($q, $timeout, $http) {</p>
<div class="highlight"><pre><code class="text">// create user variable
var user = null;

// return available functions for use in controllers
return ({
  isLoggedIn: isLoggedIn,
  getUserStatus: getUserStatus,
  login: login,
  logout: logout,
  register: register
});
</code></pre>
</div>

<p>}]);<br>
```</p>

<p>Here, we simply defined the service name, <code>AuthService</code>, and then injected the dependencies that we will be using - <code>$q</code>, <code>$timeout</code>, <code>$http</code> - and then returned the functions, which we still need to write, for use outside the service.</p>

<p>Make sure to add the script to the <em>index.html</em> file:</p>

<p><code>html<br>
&lt;script src=&quot;./services.js&quot;&gt;&lt;/script&gt;<br>
</code></p>

<p>Let&#39;s create each function...</p>

<p><strong><code>isLoggedIn()</code></strong></p>

<p><code>javascript<br>
function isLoggedIn() {<br>
  if(user) {<br>
    return true;<br>
  } else {<br>
    return false;<br>
  }<br>
}<br>
</code></p>

<p>This function returns <code>true</code> if <code>user</code> evaluates to <code>true</code> - a user is logged in - otherwise it returns false.</p>

<p><strong><code>getUserStatus()</code></strong></p>

<p><code>javascript<br>
function getUserStatus() {<br>
  return user;<br>
}<br>
</code></p>

<p><strong><code>login()</code></strong></p>

<p>```javascript<br>
function login(username, password) {</p>

<p>// create a new instance of deferred<br>
  var deferred = $q.defer();</p>

<p>// send a post request to the server<br>
  $http.post(&#39;/user/login&#39;, {username: username, password: password})<br>
    // handle success<br>
    .success(function (data, status) {<br>
      if(status === 200 &amp;&amp; data.status){<br>
        user = true;<br>
        deferred.resolve();<br>
      } else {<br>
        user = false;<br>
        deferred.reject();<br>
      }<br>
    })<br>
    // handle error<br>
    .error(function (data) {<br>
      user = false;<br>
      deferred.reject();<br>
    });</p>

<p>// return promise object<br>
  return deferred.promise;</p>

<p>}<br>
```</p>

<p>Here, we used the <a href="https://docs.angularjs.org/1.3.15/docs/api/ng/service/$q">$q</a> service to set up a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">promise</a>, which we&#39;ll access in a future controller. We also utilized the <a href="https://docs.angularjs.org/1.3.15/docs/api/ng/service/$http">$http</a> service to send an AJAX request to the <code>/api/login</code> endpoint that we already set up in our back-end Node/Express app.</p>

<p>Based on the returned response, we either <a href="https://code.angularjs.org/1.3.15/docs/api/ng/service/$q#usage">resolve</a> or <a href="https://code.angularjs.org/1.3.15/docs/api/ng/service/$q#usage">reject</a> and set the value of <code>user</code> to <code>true</code> or <code>false</code>.</p>

<p><strong><code>logout()</code></strong></p>

<p>```javascript<br>
function logout() {</p>

<p>// create a new instance of deferred<br>
  var deferred = $q.defer();</p>

<p>// send a get request to the server<br>
  $http.get(&#39;/user/logout&#39;)<br>
    // handle success<br>
    .success(function (data) {<br>
      user = false;<br>
      deferred.resolve();<br>
    })<br>
    // handle error<br>
    .error(function (data) {<br>
      user = false;<br>
      deferred.reject();<br>
    });</p>

<p>// return promise object<br>
  return deferred.promise;</p>

<p>}<br>
```</p>

<p>Here, we followed the same formula as the <code>login()</code> function, except we sent a GET request rather than a POST and to be save we just went ahead and handled the error the same as the success.</p>

<p><strong><code>register()</code></strong></p>

<p>```javascript<br>
function register(username, password) {</p>

<p>// create a new instance of deferred<br>
  var deferred = $q.defer();</p>

<p>// send a post request to the server<br>
  $http.post(&#39;/user/register&#39;, {username: username, password: password})<br>
    // handle success<br>
    .success(function (data, status) {<br>
      if(status === 200 &amp;&amp; data.status){<br>
        deferred.resolve();<br>
      } else {<br>
        deferred.reject();<br>
      }<br>
    })<br>
    // handle error<br>
    .error(function (data) {<br>
      deferred.reject();<br>
    });</p>

<p>// return promise object<br>
  return deferred.promise;</p>

<p>}<br>
```</p>

<p>Again, we followed a similar formula to the <code>logout()</code> function. Can you tell what&#39;s happening?</p>

<p>That&#39;s it for the service. Keep in mind that we still have not &quot;used&quot; this service. In order to that we just need to inject it into the necessary components in the Angular app. In our case, that will be the controllers, which we&#39;ll build next.</p>

<h3>Templates and Controllers</h3>

<p>Looking back at our routes, we need to setup two partials/templates and three controllers:</p>

<p><code>javascript<br>
.when(&#39;/login&#39;, {templateUrl: &#39;partials/login.html&#39;, controller: &#39;loginController&#39;})<br>
.when(&#39;/logout&#39;, {controller: &#39;logoutController&#39;})<br>
.when(&#39;/register&#39;, {templateUrl: &#39;partials/register.html&#39;, controller: &#39;registerController&#39;})<br>
</code></p>

<p><strong>Login</strong></p>

<p>First, add the following HTML to a new file called <em>login.html</em>:</p>

<p><code>html<br>
&lt;div class=&quot;col-md-4&quot;&gt;<br>
  &lt;h1&gt;Login&lt;/h2&gt;<br>
  &lt;div ng-show=&quot;error&quot; class=&quot;alert alert-danger&quot;&gt;&lt;/div&gt;<br>
  &lt;form class=&quot;form&quot; ng-submit=&quot;login()&quot;&gt;<br>
    &lt;div class=&quot;form-group&quot;&gt;<br>
      &lt;label&gt;Username&lt;/label&gt;<br>
      &lt;input type=&quot;text&quot; class=&quot;form-control&quot; name=&quot;username&quot; ng-model=&quot;loginForm.username&quot; required&gt;<br>
    &lt;/div&gt;<br>
    &lt;div class=&quot;form-group&quot;&gt;<br>
      &lt;label&gt;Password&lt;/label&gt;<br>
        &lt;input type=&quot;password&quot; class=&quot;form-control&quot; name=&quot;password&quot; ng-model=&quot;loginForm.password&quot; required&gt;<br>
      &lt;/div&gt;<br>
      &lt;div&gt;<br>
        &lt;button type=&quot;submit&quot; class=&quot;btn btn-default&quot; ng-disabled=&quot;disabled&quot;&gt;Login&lt;/button&gt;<br>
      &lt;/div&gt;<br>
  &lt;/form&gt;<br>
&lt;/div&gt;<br>
</code></p>

<p>Add this file to the &quot;partials&quot; directory.</p>

<p>Take note of the form. We used the <a href="https://code.angularjs.org/1.3.15/docs/api/ng/directive/ngModel">ng-model</a> directive on each of the inputs so that we can capture those values in the controller. Also, when the form is submitted, the <a href="https://code.angularjs.org/1.3.15/docs/api/ng/directive/ngSubmit">ng-submit</a> directive handles the event by firing the <code>login()</code> function.</p>

<p>Next, within the &quot;client&quot; folder, add a new file called <em>controllers.js</em>. Yes, this will hold all of our Angular app&#39;s controllers. Don&#39;t forget to add the script to the <em>index.html</em> file:</p>

<p><code>html<br>
&lt;script src=&quot;./controllers.js&quot;&gt;&lt;/script&gt;<br>
</code></p>

<p>Now, let&#39;s add the first controller:</p>

<p>```javascript<br>
angular.module(&#39;myApp&#39;).controller(&#39;loginController&#39;,<br>
  [&#39;$scope&#39;, &#39;$location&#39;, &#39;AuthService&#39;,<br>
  function ($scope, $location, AuthService) {</p>
<div class="highlight"><pre><code class="text">console.log(AuthService.getUserStatus());

$scope.login = function () {

  // initial values
  $scope.error = false;
  $scope.disabled = true;

  // call login from service
  AuthService.login($scope.loginForm.username, $scope.loginForm.password)
    // handle success
    .then(function () {
      $location.path(&#39;/&#39;);
      $scope.disabled = false;
      $scope.loginForm = {};
    })
    // handle error
    .catch(function () {
      $scope.error = true;
      $scope.errorMessage = &quot;Invalid username and/or password&quot;;
      $scope.disabled = false;
      $scope.loginForm = {};
    });

};
</code></pre>
</div>

<p>}]);<br>
```</p>

<p>So, when the <code>login()</code> function is fired, we set some initial values and then call <code>login()</code> from the <code>AuthService</code>, passing the user inputed email and password as arguments. The subsequent success or error is then handled and the DOM/view/template is updated appropriately.</p>

<p>Did you notice how we logged the return value of <code>AuthService.getUserStatus()</code> to the console? This is to ensure that the value is correct based on whether a user is logged in or out - <code>true</code> or <code>false</code>, respectively.</p>

<p>Ready to test the first round-trip - client =&gt; server =&gt; client?</p>

<p>Fire up the server and navigate to <a href="http://localhost:3000/#/login">http://localhost:3000/#/login</a> in your browser. First, try logging in with the user credentials used to register earlier - e.g, <code>test@test.com</code> and <code>test</code>, respectively. If all went well, you should be redirected to the main URL. Next, try to log in using invalid credentials. You should see the error message flash, &quot;Invalid username and/or password&quot;.</p>

<p><strong>Logout</strong></p>

<p>Add the controller:</p>

<p>```javascript<br>
angular.module(&#39;myApp&#39;).controller(&#39;logoutController&#39;,<br>
  [&#39;$scope&#39;, &#39;$location&#39;, &#39;AuthService&#39;,<br>
  function ($scope, $location, AuthService) {</p>
<div class="highlight"><pre><code class="text">$scope.logout = function () {

  console.log(AuthService.getUserStatus());

  // call logout from service
  AuthService.logout()
    .then(function () {
      $location.path(&#39;/login&#39;);
    });

};
</code></pre>
</div>

<p>}]);<br>
```</p>

<p>Here, we called <code>AuthService.logout()</code> and then redirected the user to the <code>/login</code> route after the promise is resolved.</p>

<p>Add a button to <em>home.html</em>:</p>

<p><code>html<br>
&lt;div ng-controller=&quot;logoutController&quot;&gt;<br>
  &lt;a ng-click=&#39;logout()&#39; class=&quot;btn btn-default&quot;&gt;Logout&lt;/a&gt;<br>
&lt;/div&gt;<br>
</code></p>

<p>And then test it out again.</p>

<p><strong>Register</strong></p>

<p>Add a new new file called <em>register.html</em> to the &quot;partials&quot; folder and add the following HTML:</p>

<p><code>html<br>
&lt;div class=&quot;col-md-4&quot;&gt;<br>
  &lt;h1&gt;Register&lt;/h2&gt;<br>
  &lt;div ng-show=&quot;error&quot; class=&quot;alert alert-danger&quot;&gt;&lt;/div&gt;<br>
  &lt;form class=&quot;form&quot; ng-submit=&quot;register()&quot;&gt;<br>
    &lt;div class=&quot;form-group&quot;&gt;<br>
      &lt;label&gt;Username&lt;/label&gt;<br>
      &lt;input type=&quot;text&quot; class=&quot;form-control&quot; name=&quot;username&quot; ng-model=&quot;registerForm.username&quot; required&gt;<br>
    &lt;/div&gt;<br>
    &lt;div class=&quot;form-group&quot;&gt;<br>
      &lt;label&gt;Password&lt;/label&gt;<br>
        &lt;input type=&quot;password&quot; class=&quot;form-control&quot; name=&quot;password&quot; ng-model=&quot;registerForm.password&quot; required&gt;<br>
      &lt;/div&gt;<br>
      &lt;div&gt;<br>
        &lt;button type=&quot;submit&quot; class=&quot;btn btn-default&quot; ng-disabled=&quot;disabled&quot;&gt;Register&lt;/button&gt;<br>
      &lt;/div&gt;<br>
  &lt;/form&gt;<br>
&lt;/div&gt;<br>
</code></p>

<p>Next, add the controller:</p>

<p>```javascript<br>
angular.module(&#39;myApp&#39;).controller(&#39;registerController&#39;,<br>
  [&#39;$scope&#39;, &#39;$location&#39;, &#39;AuthService&#39;,<br>
  function ($scope, $location, AuthService) {</p>
<div class="highlight"><pre><code class="text">console.log(AuthService.getUserStatus());

$scope.register = function () {

  // initial values
  $scope.error = false;
  $scope.disabled = true;

  // call register from service
  AuthService.register($scope.registerForm.username, $scope.registerForm.password)
    // handle success
    .then(function () {
      $location.path(&#39;/login&#39;);
      $scope.disabled = false;
      $scope.registerForm = {};
    })
    // handle error
    .catch(function () {
      $scope.error = true;
      $scope.errorMessage = &quot;Something went wrong!&quot;;
      $scope.disabled = false;
      $scope.registerForm = {};
    });

};
</code></pre>
</div>

<p>}]);<br>
```</p>

<p>You&#39;ve seen this before, so let&#39;s move right on to testing.</p>

<p>Fire up the server and register a new user at <a href="http://localhost:3000/#/register">http://localhost:3000/#/register</a>. Make sure to test logging in with that new user as well.</p>

<p>Well, that&#39;s it for the templates and controllers. We now need to add in functionality to check if a user is logged in on each and every change of route.</p>

<h3>Route Changes</h3>

<p>Start by adding the following code to <em>main.js</em>:</p>

<p><code>javascript<br>
myApp.run(function ($rootScope, $location, $route, AuthService) {<br>
  $rootScope.$on(&#39;$routeChangeStart&#39;, function (event, next, current) {<br>
    if (AuthService.isLoggedIn() === false) {<br>
      $location.path(&#39;/login&#39;);<br>
    }<br>
  });<br>
});<br>
</code></p>

<p>The <a href="https://code.angularjs.org/1.3.15/docs/api/ngRoute/service/$route">$routeChangeStart</a> event happens before the actual route change occurs. So, whenever a route is accessed, before the view is served, we ensure that the user is logged in. Test this out!</p>

<h2>Route Restriction</h2>

<p>Right now all client-side routes require a user to be logged in. What if you want certain routes restricted and other routes open?</p>

<p>You can add the following code to each route handler, replacing <code>true</code> with <code>false</code> for routes that you do not want to restrict:</p>

<p><code>javascript<br>
access: {restricted: true}<br>
</code></p>

<p>For example:</p>

<p><code>javascript<br>
myApp.config(function ($routeProvider) {<br>
  $routeProvider<br>
    .when(&#39;/&#39;, {templateUrl: &#39;partials/home.html&#39;})<br>
    .when(&#39;/login&#39;, {<br>
      templateUrl: &#39;partials/login.html&#39;,<br>
      controller: &#39;loginController&#39;,<br>
      access: {restricted: false}<br>
    })<br>
    .when(&#39;/logout&#39;, {<br>
      controller: &#39;logoutController&#39;,<br>
      access: {restricted: true}<br>
    })<br>
    .when(&#39;/register&#39;, {<br>
      templateUrl: &#39;partials/register.html&#39;,<br>
      controller: &#39;registerController&#39;,<br>
      access: {restricted: true}<br>
    })<br>
    .when(&#39;/one&#39;, {<br>
      template: &#39;&lt;h1&gt;This is page one!&lt;/h1&gt;&#39;,<br>
      access: {restricted: true}<br>
    })<br>
    .when(&#39;/two&#39;, {<br>
      template: &#39;&lt;h1&gt;This is page two!&lt;/h1&gt;&#39;,<br>
      access: {restricted: false}<br>
    })<br>
    .otherwise({redirectTo: &#39;/&#39;});<br>
});<br>
</code></p>

<p>Now just update the <code>$routeChangeStart</code> code in <em>main.js</em>:</p>

<p><code>javascript<br>
myApp.run(function ($rootScope, $location, $route, AuthService) {<br>
  $rootScope.$on(&#39;$routeChangeStart&#39;, function (event, next, current) {<br>
    if (next.access.restricted &amp;&amp; AuthService.isLoggedIn() === false) {<br>
      $location.path(&#39;/login&#39;);<br>
      $route.reload();<br>
    }<br>
  });<br>
});<br>
</code></p>

<p>Test it out!</p>

<h2>Conclusion</h2>

<p>That&#39;s it. One thing you should note is that the Angular app can be used with various frameworks as long as the endpoints are set up correctly in the AJAX requests. So, you can easily take the Angular portion and add it to your Django or Pyramid or NodeJS app. Try it!</p>

<blockquote>
<p>Check out a Python/Flask app with Angular Auth <a href="https://realpython.com/blog/python/handling-user-authentication-with-angular-and-flask/">here</a></p>
</blockquote>

<p>Grab the final code from the <a href="https://github.com/mjhea0/mean-auth">repo</a>. Cheers!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[User Authentication with Passport and Express 4]]></title>
    <link href="http://mjhea0.github.com/blog/2015/01/31/local-authentication-with-passport-and-express-4/"/>
    <updated>2015-01-31T07:07:00-07:00</updated>
    <id>http://mjhea0.github.com/blog/2015/01/31/local-authentication-with-passport-and-express-4</id>
    <content type="html"><![CDATA[<p>This post demonstrate how to add user authentication to Node/Express with Passport.js.</p>

<blockquote>
<p>If you&#39;re interested in social authentication via Passport, please check out <a href="http://mherman.org/blog/2013/11/10/social-authentication-with-passport-dot-js/">this</a> blog post. Looking for an Express 3 authentication tutorial? Check out this <a href="http://mherman.org/blog/2013/11/11/user-authentication-with-passport-dot-js/">post</a>.</p>
</blockquote>

<p>Before you start, make sure you have <a href="http://nodejs.org/download/">Node</a> installed for your specific operating system. This tutorial also uses the following tools/technologies:</p>

<ul>
<li><a href="https://www.npmjs.com/package/express">Express</a> v4.11.1</li>
<li><a href="https://www.npmjs.com/package/mongoose">Mongoose</a> v3.8.22</li>
<li><a href="https://www.npmjs.com/package/passport">Passport</a> v0.2.1</li>
<li><a href="https://www.npmjs.com/package/passport-local">Passport-local</a>: v1.0.0</li>
<li><a href="https://www.npmjs.com/package/passport-local-mongoose">Passport-local-mongoose</a>: v1.0.0</li>
</ul>

<h2>Contents</h2>

<ol>
<li>Project Setup</li>
<li>Edit app.js</li>
<li>Mongoose</li>
<li>Add Routes</li>
<li>Test</li>
<li>Views</li>
<li>Test Redux</li>
<li>Unit Tests</li>
<li>Error Handling</li>
<li>Conclusion</li>
</ol>

<h2>Project Setup</h2>

<p>Start by installing the Express generator, which we&#39;ll use to generate a basic project boilerplate:</p>

<p><code>sh<br>
$ npm install -g express-generator@4<br>
</code></p>

<blockquote>
<p>The <code>-g</code> flag means that we&#39;re installing this globally, on our entire system.</p>
</blockquote>

<p>Navigate to a convenient directory, like your &quot;Desktop&quot; or &quot;Documents&quot;, then create your app:</p>

<p><code>sh<br>
$ express passport-local-express4<br>
</code></p>

<p>Check out the project structure:</p>

<p><code><br>
├── app.js<br>
├── bin<br>
│   └── www<br>
├── package.json<br>
├── public<br>
│   ├── images<br>
│   ├── javascripts<br>
│   └── stylesheets<br>
│       └── style.css<br>
├── routes<br>
│   ├── index.js<br>
│   └── users.js<br>
└── views<br>
    ├── error.jade<br>
    ├── index.jade<br>
    └── layout.jade<br>
</code></p>

<p>This took care of the heavy lifting, adding common files and functions associated with all apps.</p>

<h3>Install/Update Dependencies</h3>

<p>Update the <em>package.json</em> file to reference the correct dependencies:</p>

<p><code>json<br>
{<br>
  &quot;name&quot;: &quot;passport-local-express4&quot;,<br>
  &quot;version&quot;: &quot;0.0.0&quot;,<br>
  &quot;private&quot;: true,<br>
  &quot;scripts&quot;: {<br>
    &quot;start&quot;: &quot;node ./bin/www&quot;<br>
  },<br>
  &quot;repository&quot;: {<br>
    &quot;type&quot;: &quot;git&quot;,<br>
    &quot;url&quot;: &quot;git@github.com:mjhea0/passport-local-express4.git&quot;<br>
  },<br>
  &quot;author&quot;: &quot;Michael Herman &lt;michael@mherman.org&gt;&quot;,<br>
  &quot;license&quot;: &quot;MIT&quot;,<br>
  &quot;dependencies&quot;: {<br>
    &quot;body-parser&quot;: &quot;^1.10.2&quot;,<br>
    &quot;chai&quot;: &quot;~1.8.1&quot;,<br>
    &quot;cookie-parser&quot;: &quot;^1.3.3&quot;,<br>
    &quot;express&quot;: &quot;^4.11.1&quot;,<br>
    &quot;express-session&quot;: &quot;^1.10.1&quot;,<br>
    &quot;jade&quot;: &quot;^1.9.1&quot;,<br>
    &quot;mocha&quot;: &quot;~1.14.0&quot;,<br>
    &quot;mongoose&quot;: &quot;^3.8.22&quot;,<br>
    &quot;morgan&quot;: &quot;^1.5.1&quot;,<br>
    &quot;passport&quot;: &quot;^0.2.1&quot;,<br>
    &quot;passport-local&quot;: &quot;^1.0.0&quot;,<br>
    &quot;passport-local-mongoose&quot;: &quot;^1.0.0&quot;,<br>
    &quot;should&quot;: &quot;~2.1.0&quot;,<br>
    &quot;serve-favicon&quot;: &quot;^2.2.0&quot;,<br>
    &quot;debug&quot;: &quot;^2.1.1&quot;<br>
  }<br>
}<br>
</code></p>

<p>Now install the dependencies:</p>

<p><code>sh<br>
$ cd express-local-express4<br>
$ npm install<br>
</code></p>

<h3>Sanity Check</h3>

<p>Let&#39;s test our setup by running the app:</p>

<p><code>sh<br>
$ node ./bin/www<br>
</code></p>

<p>Navigate to <a href="http://localhost:3000/">http://localhost:3000/</a> in your browser and you should see the &quot;Welcome to Express&quot; text staring back.</p>

<h3>Setup MongoDB</h3>

<p>Install:</p>

<p><code>sh<br>
$ npm install -g mongodb<br>
</code></p>

<p>Then, in a new terminal window, start the MongoDB daemon:</p>

<p><code>sh<br>
$ sudo mongod<br>
</code></p>

<h2>Edit <em>app.js</em></h2>

<h3>Update the Requirements</h3>

<p>Add the following requirements:</p>

<p><code>javascript<br>
var mongoose = require(&#39;mongoose&#39;);<br>
var passport = require(&#39;passport&#39;);<br>
var LocalStrategy = require(&#39;passport-local&#39;).Strategy;<br>
</code></p>

<h3>Update <em>app.js</em></h3>

<p>Update all of <em>app.js</em> with the following code (check the comments for a brief explanation):</p>

<p>```javascript<br>
// dependencies<br>
var express = require(&#39;express&#39;);<br>
var path = require(&#39;path&#39;);<br>
var favicon = require(&#39;serve-favicon&#39;);<br>
var logger = require(&#39;morgan&#39;);<br>
var cookieParser = require(&#39;cookie-parser&#39;);<br>
var bodyParser = require(&#39;body-parser&#39;);<br>
var mongoose = require(&#39;mongoose&#39;);<br>
var passport = require(&#39;passport&#39;);<br>
var LocalStrategy = require(&#39;passport-local&#39;).Strategy;</p>

<p>var routes = require(&#39;./routes/index&#39;);<br>
var users = require(&#39;./routes/users&#39;);</p>

<p>var app = express();</p>

<p>// view engine setup<br>
app.set(&#39;views&#39;, path.join(__dirname, &#39;views&#39;));<br>
app.set(&#39;view engine&#39;, &#39;jade&#39;);</p>

<p>// uncomment after placing your favicon in /public<br>
//app.use(favicon(<strong>dirname + &#39;/public/favicon.ico&#39;));<br>
app.use(logger(&#39;dev&#39;));<br>
app.use(bodyParser.json());<br>
app.use(bodyParser.urlencoded({ extended: false }));<br>
app.use(cookieParser());<br>
app.use(require(&#39;express-session&#39;)({<br>
    secret: &#39;keyboard cat&#39;,<br>
    resave: false,<br>
    saveUninitialized: false<br>
}));<br>
app.use(passport.initialize());<br>
app.use(passport.session());<br>
app.use(express.static(path.join(</strong>dirname, &#39;public&#39;)));</p>

<p>app.use(&#39;/&#39;, routes);</p>

<p>// passport config<br>
var Account = require(&#39;./models/account&#39;);<br>
passport.use(new LocalStrategy(Account.authenticate()));<br>
passport.serializeUser(Account.serializeUser());<br>
passport.deserializeUser(Account.deserializeUser());</p>

<p>// mongoose<br>
mongoose.connect(&#39;mongodb://localhost/passport<em>local</em>mongoose_express4&#39;);</p>

<p>// catch 404 and forward to error handler<br>
app.use(function(req, res, next) {<br>
    var err = new Error(&#39;Not Found&#39;);<br>
    err.status = 404;<br>
    next(err);<br>
});</p>

<p>// error handlers</p>

<p>// development error handler<br>
// will print stacktrace<br>
if (app.get(&#39;env&#39;) === &#39;development&#39;) {<br>
    app.use(function(err, req, res, next) {<br>
        res.status(err.status || 500);<br>
        res.render(&#39;error&#39;, {<br>
            message: err.message,<br>
            error: err<br>
        });<br>
    });<br>
}</p>

<p>// production error handler<br>
// no stacktraces leaked to user<br>
app.use(function(err, req, res, next) {<br>
    res.status(err.status || 500);<br>
    res.render(&#39;error&#39;, {<br>
        message: err.message,<br>
        error: {}<br>
    });<br>
});</p>

<p>module.exports = app;<br>
```</p>

<h2>Mongoose</h2>

<p>Let&#39;s get the Mongoose up and running. Add a new file called <em>account.js</em> to a new directory called &quot;models&quot; with the following code:</p>

<p>```javascript<br>
var mongoose = require(&#39;mongoose&#39;);<br>
var Schema = mongoose.Schema;<br>
var passportLocalMongoose = require(&#39;passport-local-mongoose&#39;);</p>

<p>var Account = new Schema({<br>
    username: String,<br>
    password: String<br>
});</p>

<p>Account.plugin(passportLocalMongoose);</p>

<p>module.exports = mongoose.model(&#39;Account&#39;, Account);<br>
```</p>

<p>You may be wondering about password security, specifically salting/hashing the password. Fortunately, the <a href="https://github.com/saintedlama/passport-local-mongoose">passport-local-mongoose</a> package automatically takes care of salting and hashing the password for us. More on this further down.</p>

<h3>Sanity Check</h3>

<p>Again, test the app:</p>

<p><code>sh<br>
$ node ./bin/www<br>
</code></p>

<p>Make sure you still see the same &quot;Welcome to Express&quot; text.</p>

<h2>Add Routes</h2>

<p>Within the &quot;routes&quot; folder, add the following code to the <em>index.js</em> file:</p>

<p>```javascript<br>
var express = require(&#39;express&#39;);<br>
var passport = require(&#39;passport&#39;);<br>
var Account = require(&#39;../models/account&#39;);<br>
var router = express.Router();</p>

<p>router.get(&#39;/&#39;, function (req, res) {<br>
    res.render(&#39;index&#39;, { user : req.user });<br>
});</p>

<p>router.get(&#39;/register&#39;, function(req, res) {<br>
    res.render(&#39;register&#39;, { });<br>
});</p>

<p>router.post(&#39;/register&#39;, function(req, res) {<br>
    Account.register(new Account({ username : req.body.username }), req.body.password, function(err, account) {<br>
        if (err) {<br>
            return res.render(&#39;register&#39;, { account : account });<br>
        }</p>
<div class="highlight"><pre><code class="text">    passport.authenticate(&#39;local&#39;)(req, res, function () {
        res.redirect(&#39;/&#39;);
    });
});
</code></pre>
</div>

<p>});</p>

<p>router.get(&#39;/login&#39;, function(req, res) {<br>
    res.render(&#39;login&#39;, { user : req.user });<br>
});</p>

<p>router.post(&#39;/login&#39;, passport.authenticate(&#39;local&#39;), function(req, res) {<br>
    res.redirect(&#39;/&#39;);<br>
});</p>

<p>router.get(&#39;/logout&#39;, function(req, res) {<br>
    req.logout();<br>
    res.redirect(&#39;/&#39;);<br>
});</p>

<p>router.get(&#39;/ping&#39;, function(req, res){<br>
    res.status(200).send(&quot;pong!&quot;);<br>
});</p>

<p>module.exports = router;<br>
```</p>

<h2>Test</h2>

<p>Fire up the server. Navigate to <a href="http://localhost:3000/ping">http://localhost:3000/ping</a>. Make sure you do not get any errors and that you see the word &quot;pong!&quot;.</p>

<h2>Views</h2>

<h3><em>layout.jade</em></h3>

<p>Update:</p>

<p>```<br>
doctype html<br>
html<br>
  head<br>
    title= title<br>
    meta(name=&#39;viewport&#39;, content=&#39;width=device-width, initial-scale=1.0&#39;)<br>
    link(href=&#39;http://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/css/bootstrap.min.css&#39;, rel=&#39;stylesheet&#39;, media=&#39;screen&#39;)<br>
    link(rel=&#39;stylesheet&#39;, href=&#39;http://mjhea0.github.com/stylesheets/style.css&#39;)<br>
  body<br>
    block content</p>

<p>script(src=&#39;http://code.jquery.com/jquery.js&#39;)<br>
  script(src=&#39;http://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/js/bootstrap.min.js&#39;)<br>
```</p>

<h3>index.jade</h3>

<p>Update:</p>

<p>```jade<br>
extends layout</p>

<p>block content<br>
  if (!user)<br>
    a(href=&quot;/login&quot;) Login<br>
    br<br>
    a(href=&quot;/register&quot;) Register<br>
  if (user)<br>
    p You are currently logged in as #{user.username}<br>
    a(href=&quot;/logout&quot;) Logout<br>
```</p>

<h3>login.jade</h3>

<p>Add a new file called <em>login.jade</em> to the views:</p>

<p>```jade<br>
extends layout</p>

<p>block content<br>
  .container<br>
    h1 Login Page<br>
    p.lead Say something worthwhile here.<br>
    br<br>
    form(role=&#39;form&#39;, action=&quot;/login&quot;,method=&quot;post&quot;, style=&#39;max-width: 300px;&#39;)<br>
      .form-group<br>
          input.form-control(type=&#39;text&#39;, name=&quot;username&quot;, placeholder=&#39;Enter Username&#39;)<br>
      .form-group<br>
        input.form-control(type=&#39;password&#39;, name=&quot;password&quot;, placeholder=&#39;Password&#39;)<br>
      button.btn.btn-default(type=&#39;submit&#39;) Submit<br>
      &nbsp;<br>
      a(href=&#39;/&#39;)<br>
        button.btn.btn-primary(type=&quot;button&quot;) Cancel<br>
```</p>

<h3>register.jade</h3>

<p>Add another file called <em>register.jade</em> to the views:</p>

<p>```javascript<br>
extends layout</p>

<p>block content<br>
  .container<br>
    h1 Register Page<br>
    p.lead Say something worthwhile here.<br>
    br<br>
    form(role=&#39;form&#39;, action=&quot;/register&quot;,method=&quot;post&quot;, style=&#39;max-width: 300px;&#39;)<br>
      .form-group<br>
          input.form-control(type=&#39;text&#39;, name=&quot;username&quot;, placeholder=&#39;Enter Username&#39;)<br>
      .form-group<br>
        input.form-control(type=&#39;password&#39;, name=&quot;password&quot;, placeholder=&#39;Password&#39;)<br>
      button.btn.btn-default(type=&#39;submit&#39;) Submit<br>
      &nbsp;<br>
      a(href=&#39;/&#39;)<br>
        button.btn.btn-primary(type=&quot;button&quot;) Cancel<br>
```</p>

<h2>Test redux</h2>

<p>Fire up the server and test! Register, and then login.</p>

<p>Remember how I said that we&#39;d look at salting and hashing a password again? Well, let&#39;s check our Mongo database to ensure that it&#39;s working.</p>

<p>When I tested the user registration, I used &quot;michael&quot; for both my username and password.</p>

<p>Let&#39;s see what this looks like in the database:</p>

<p><code>sh<br>
$ mongo<br>
MongoDB shell version: 2.4.6<br>
connecting to: test<br>
&gt; use passport_local_mongoose_express4<br>
switched to db passport_local_mongoose_express4<br>
&gt; db.accounts.find()<br>
{ &quot;salt&quot; : &quot;9ffd63f2bcce58bf79691cacfaae678f690dd73ef778445bf79f97c41934189b&quot;, &quot;hash&quot; : &quot;17eabe62d459acdb4f3d8eaab7369a1e989c6150e231d1e87a7cf1c31dfc7eafc0616732a6db8f08c413dcbec06c95d512cef55503a1fe9a7ed5dc15ecf5cf67c114af5a659c79bb47039082a3af933e1c32dd2519b8be11596a775e1d262fd53437927e0fd948b76e738f342904a598e6c533445351c9b3d629aa118adfbe0646a80539e816c06248e353b1787dbd8c646a2ed018bbf5e58fb6a6cc1f32c6ea61b3e52230cfdf75a9f4b7ba20b3d3ae3b86f5816f5df9c48f9d1bb4a9c42e30bf646c3810d050847c1905e5a95f53c81078090e42ba58799187a61b047376def48fb640a4f48eca4c7f35610eafc2c770e61172b11c7e98c36281983de56414fa95e0708c9a6458a903baaf3818a3e4675b39418b358f51f45aca792e606f692e0a7d3667d111d00d0f521257d3486cbcff250dc7d9859ab80f9d56a3d272fb0ebb2e7dd969c0749361153c6bde62ad50b3d47233424034b959c78225db000cc1416aa0d555016f1b666d2da709e69c5030ee39753597a1d06ec0a4e001e22bff37947c1b993794d21667dc6c65e4116dd5ca216a161aa9026063e0b12e1165ffa5c827a6803df6765766cc55bcca122cd4d9f572353a988f90200ffc4a610d9eca83df01d6f30af78f9ec476fc974bc1d3a5fd2759a56486795bd7d993462a8d2f9b9c42d3197cd7b9855f17eaac4073a4d843d56b5c9a75b86cc1bb8b27ec&quot;, &quot;username&quot; : &quot;michael&quot;, &quot;_id&quot; : ObjectId(&quot;54c7bbbfaf54064909921a36&quot;), &quot;__v&quot; : 0 }<br>
&gt;<br>
</code></p>

<p>So, you can see that we have a document with five keys:</p>

<ul>
<li><code>username</code> is as we expected - &quot;michael&quot;</li>
<li><code>_id</code> pertains to the unique id associated with that document.</li>
<li><code>__v</code> is the <a href="http://mongoosejs.com/docs/guide.html#versionKey">version #</a> for that specific documents.</li>
<li>Finally, instead of a password key we have both a salt and a hash key. For more on how these are generated, please refer to the <a href="https://github.com/saintedlama/passport-local-mongoose#hash-algorithm">passport-local-mongoose</a> documentation.</li>
</ul>

<h2>Unit/Integration tests</h2>

<p>First, update the <code>scripts</code> object in <em>package.json</em>:</p>

<p><code>json<br>
&quot;scripts&quot;: {<br>
  &quot;start&quot;: &quot;node ./bin/www&quot;,<br>
  &quot;test&quot;: &quot;make test&quot;<br>
 },<br>
</code></p>

<p>Now add a Makefile to the root and include the following code:</p>

<p>```<br>
test:<br>
    @./node_modules/.bin/mocha</p>

<p>.PHONY: test<br>
```</p>

<blockquote>
<p>Take note of the spacing on the second line. This <strong>must</strong> be a tab or you will see an error.</p>
</blockquote>

<p>Create a new folder called &quot;test&quot;, and then run <code>make test</code> from the command line. If all is well, you should see - <code>0 passing (1ms)</code>. Now we just need to add some tests...</p>

<h3>Add tests</h3>

<p>Add a new file called <em>test.user.js</em> to the &quot;test folder:</p>

<p>```javascript<br>
var should = require(&quot;should&quot;);<br>
var mongoose = require(&#39;mongoose&#39;);<br>
var Account = require(&quot;../models/account.js&quot;);<br>
var db;</p>

<p>describe(&#39;Account&#39;, function() {</p>
<div class="highlight"><pre><code class="text">before(function(done) {
    db = mongoose.connect(&#39;mongodb://localhost/test&#39;);
        done();
});

after(function(done) {
    mongoose.connection.close();
    done();
});

beforeEach(function(done) {
    var account = new Account({
        username: &#39;12345&#39;,
        password: &#39;testy&#39;
    });

    account.save(function(error) {
        if (error) console.log(&#39;error&#39; + error.message);
        else console.log(&#39;no error&#39;);
        done();
    });
});

it(&#39;find a user by username&#39;, function(done) {
    Account.findOne({ username: &#39;12345&#39; }, function(err, account) {
        account.username.should.eql(&#39;12345&#39;);
        console.log(&quot;   username: &quot;, account.username);
        done();
    });
});

afterEach(function(done) {
    Account.remove({}, function() {
        done();
    });
 });
</code></pre>
</div>

<p>});<br>
```</p>

<p>Now run <code>make tests</code>. You should see that it passed - <code>1 passing (43ms)</code>.</p>

<h2>Error handling</h2>

<p>Right now we have some poorly handled errors that are confusing to the end user. For example, try to register a name that already exists, or login with a username that doesn&#39;t exist. This can and <em>should</em> be handled better.</p>

<h3>Registration</h3>

<p>First, update the <code>/register</code> route so an error is thrown, which gets sent to Jade template, if a user tries to register a username that already exists:</p>

<p>```javascript<br>
router.post(&#39;/register&#39;, function(req, res) {<br>
    Account.register(new Account({ username : req.body.username }), req.body.password, function(err, account) {<br>
        if (err) {<br>
          return res.render(&quot;register&quot;, {info: &quot;Sorry. That username already exists. Try again.&quot;});<br>
        }</p>
<div class="highlight"><pre><code class="text">    passport.authenticate(&#39;local&#39;)(req, res, function () {
        res.redirect(&#39;/&#39;);
    });
});
</code></pre>
</div>

<p>});<br>
```</p>

<p>Then add the following code to the bottom of the &quot;register.jade&quot; template:</p>

<p><code>jade<br>
br<br>
h4= info<br>
</code></p>

<p>Test this out.</p>

<p>Next, if you try to login with a username and password combo that does not exist, the user is redirected to a page with just the word &quot;Unauthorized&quot; on it. This is confusing and unhelpful. See if you can fix this on your own. Cheers!</p>

<h2>Conclusion</h2>

<p>That&#39;s it. Grab the code from the <a href="https://github.com/mjhea0/passport-local-express4">repository</a>. Cheers!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Node, Express, and MongoDB - a primer]]></title>
    <link href="http://mjhea0.github.com/blog/2014/12/31/node-and-mongoose-a-primer/"/>
    <updated>2014-12-31T02:28:00-07:00</updated>
    <id>http://mjhea0.github.com/blog/2014/12/31/node-and-mongoose-a-primer</id>
    <content type="html"><![CDATA[<p>Welcome. Using Node, Express, and Mongoose, let&#39;s create an interactive form.</p>

<blockquote>
<p>Before you start, make sure you have <a href="http://nodejs.org/download/">Node</a> installed for your specific operating system. This tutorial also uses <a href="http://expressjs.com/">Express</a> v4.9.0 and <a href="http://mongoosejs.com/">Mongoose</a> v3.8.21.</p>
</blockquote>

<h2>Project Setup</h2>

<p>Start by installing the Express generator, which will be used to create a basic project for us:</p>

<p><code>sh<br>
$ npm install -g express-generator@4<br>
</code></p>

<blockquote>
<p>The <code>-g</code> flag means that we&#39;re installing this on our entire system.</p>
</blockquote>

<p>Navigate to a convenient directory, like your &quot;Desktop&quot; or &quot;Documents&quot;, then create your app:</p>

<p><code>sh<br>
$ express node-mongoose-form<br>
</code></p>

<p>Check out the project structure:</p>

<p><code><br>
├── app.js<br>
├── bin<br>
│   └── www<br>
├── package.json<br>
├── public<br>
│   ├── images<br>
│   ├── javascripts<br>
│   └── stylesheets<br>
│       └── style.css<br>
├── routes<br>
│   ├── index.js<br>
│   └── users.js<br>
└── views<br>
    ├── error.jade<br>
    ├── index.jade<br>
    └── layout.jade<br>
</code></p>

<p>Don&#39;t worry about the files and folders for now. Just know that we have created a boilerplate that could be used for a number of Node applications. This took care of the heavy lifting, adding common files and functions associated with all apps.</p>

<p>Notice the <em>package.json</em> file. This stores your project&#39;s dependencies, which we still need to install:</p>

<p><code>sh<br>
$ cd node-mongoose-form<br>
$ npm install<br>
</code></p>

<p>Now let&#39;s install one last dependency:</p>

<p><code>sh<br>
$ npm install mongoose --save<br>
</code></p>

<blockquote>
<p>The <code>--save</code> flag adds the dependencies and their versions to the <em>package.json</em> file. Take a look.</p>
</blockquote>

<h2>Sanity check</h2>

<p>Let&#39;s test our setup by running the app:</p>

<p><code>sh<br>
$ npm start<br>
</code></p>

<p>Navigate to <a href="http://localhost:3000/">http://localhost:3000/</a> in your browser and you should see the &quot;Welcome to Express&quot; text.</p>

<h3>Supervisor</h3>

<p>I highly recommend setting up <a href="https://github.com/isaacs/node-supervisor">Supervisor</a> so that you can run your app and watch for code changes. Check out the above link to learn more.</p>

<p><code>sh<br>
$ npm install supervisor -g<br>
</code></p>

<p>Kill the server by pressing CTRL-C.</p>

<p>Once installed, let&#39;s update the <em>package.json</em> file to utilize Supervisor to run our program.</p>

<p>Simply change this-</p>

<p><code>javascript<br>
&quot;scripts&quot;: {<br>
  &quot;start&quot;: &quot;node ./bin/www&quot;<br>
},<br>
</code></p>

<p>To this:</p>

<p><code>javascript<br>
&quot;scripts&quot;: {<br>
  &quot;start&quot;: &quot;supervisor ./bin/www&quot;<br>
},<br>
</code></p>

<p>Let&#39;s test again:</p>

<p><code>sh<br>
$ npm start<br>
</code></p>

<p>In your terminal you should see:</p>

<p><code>sh<br>
Watching directory &#39;node-mongoose-form&#39; for changes.<br>
</code></p>

<p>If you see that, you know it&#39;s working right. Essentially, Supervisor is watching that directory for code changes, and if they do occur, then it will refresh your app for you so you don&#39;t have to constantly kill the server then start it back up. It saves a lot of time and keystrokes.</p>

<p>Awesome. With the setup out of the way, let&#39;s get our hands dirty and actually build something!</p>

<h2>Routes</h2>

<p>Grab your favorite text editor, and then open the main file, <em>app.js</em>, which houses all of the business logic. Take a look at the routes:</p>

<p><code>javascript<br>
app.use(&#39;/&#39;, routes);<br>
app.use(&#39;/users&#39;, users);<br>
</code></p>

<p>Understanding how routes work as well as how to trace all the files associated with an individual route is an important skill to learn. You&#39;ll be able to approach most applications and understand how they work just by starting with the routes.</p>

<p>Let&#39;s look at this route:</p>

<p><code>javascript<br>
app.use(&#39;/users&#39;, users)<br>
</code></p>

<p>Here, we know that this route is associated with the <code>/users</code> endpoint. What&#39;s an endpoint? Simply navigate to <a href="http://localhost:3000/users">http://localhost:3000/users</a>.</p>

<p>So the end user navigates to that endpoint and expects <em>something</em> to happen. That could mean some HTML is rendered or perhaps JSON is returned. That&#39;s not important at this point. For now, let&#39;s look at how Node handles that logic for &quot;handling routes&quot;.</p>

<p>Also, within that route, you can see the variable <code>users</code>. Where is that in this file? It&#39;s at the top, and it loads in another file within our app:</p>

<p><code>javascript<br>
var users = require(&#39;./routes/users&#39;);<br>
</code></p>

<p>Open that file:</p>

<p>```javascript<br>
var express = require(&#39;express&#39;);<br>
var router = express.Router();</p>

<p>/* GET users listing. */<br>
router.get(&#39;/&#39;, function(req, res) {<br>
  res.send(&#39;respond with a resource&#39;);<br>
});</p>

<p>module.exports = router;<br>
```</p>

<p>What&#39;s happening here? We won&#39;t touch everything but essentially when that endpoint is hit it responds by sending text in the form of a response to the end user - &quot;respond with a resource&quot;. Now, of course you don&#39;t always have to send text. You could respond with a template or view like a Jade file that gets rendered into HTML. We&#39;ll look at how this works in just a minute when we add our own routes.</p>

<p><strong>Make sure you understand everything in this section before moving on. This is very important</strong>.</p>

<h3>Add a new route</h3>

<p>Let&#39;s now add a new route that renders an HTML form to the end user.</p>

<p>Start by adding the route handler in the <em>app.js</em> file:</p>

<p><code>javascript<br>
app.use(&#39;/form&#39;, form);<br>
</code></p>

<blockquote>
<p>Remember this simply means <code>app.use(&#39;/ENDPOINT&#39;, VARIABLE_NAME);</code>,</p>
</blockquote>

<p>Use the <code>form</code> variable to require a JS file within our routes folder.</p>

<p><code>javascript<br>
var form = require(&#39;./routes/form&#39;);<br>
</code></p>

<p>Take a look in the terminal. You should see an error, indicating Node can&#39;t find that &#39;./routes/form&#39; module. We need to create it!</p>

<p>Create that JS file/module by saving an empty file called <em>form.js</em> to the &quot;routes&quot; directory. Add the following code:</p>

<p>```javascript<br>
var express = require(&#39;express&#39;);<br>
var router = express.Router();</p>

<p>/* GET form. */<br>
router.get(&#39;/&#39;, function(req, res) {<br>
  res.send(&#39;My funky form&#39;);<br>
});</p>

<p>module.exports = router;<br>
```</p>

<blockquote>
<p>Remember what this code <code>res.send(&#39;My funky form&#39;);</code> should do? If not, review the previous section.</p>
</blockquote>

<p>Navigate to <a href="http://localhost:3000/form">http://localhost:3000/form</a>. You should see the text &quot;&#39;My funky form&quot; on the page. Sweet.</p>

<h2>Jade</h2>

<p>Jade is a templating language, which compiles down to HTML. It makes it easy to separate logic from markup.</p>

<p>Take a quick look at the <em>layout.jade</em> and <em>index.jade</em> files with the &quot;views&quot; folder. There&#39;s a relationship between those two files. It&#39;s called inheritance. We define the base structure in the <em>layout</em> file, which contains common structure that can be reused in multiple places.</p>

<p>Do you see the <code>block</code> keyword?</p>

<p>What really happens when the <em>index</em> file is rendered is that it first inherits the base template because of the <code>extends</code> keywords. So, the <em>layout</em> template then gets rendered, which eventually pulls in the child template, overwriting the <code>block</code> keyword with:</p>

<p><code>html<br>
h1= title<br>
  p Welcome to #{title}<br>
</code></p>

<p>Hope that makes sense. If not, check out <a href="http://www.learnjade.com/tour/template-inheritance/">this</a> resource for more info.</p>

<h3>Setup <em>form.jade</em></h3>

<p>Create a new file called &quot;form.jade&quot; in the &quot;views&quot; directory, and then add the following code:</p>

<p>```html<br>
extends layout</p>

<p>block content<br>
  h1= title<br>
  p Welcome to #{title}<br>
```</p>

<p>The same thing is happening here with inheritance. If you&#39;re unfamiliar with Jade syntax, <code>title</code> is essentially a variable, which we can pass in from <code>./routes/form.js</code>.</p>

<p>Update <code>./routes/form.js</code> by changing-</p>

<p><code>javascript<br>
res.send(&#39;My funky form&#39;);<br>
</code></p>

<p>To:</p>

<p><code>javascript<br>
res.render(&#39;form&#39;, { title: &#39;My funky form&#39; });<br>
</code></p>

<p>This just says, &quot;When a user hits the <code>/form</code> endpoint, render the <em>form.jade</em> file and pass in <code>My funky form</code> as the title.&quot;</p>

<blockquote>
<p>Keep in mind that all Jade files are converted to HTML. Browsers can&#39;t read the Jade syntax, so it must be in HTML by the time the end user sees it.</p>
</blockquote>

<p>Ready to test? Simple refresh <a href="http://localhost:3000/form">http://localhost:3000/form</a>.</p>

<p>Did it work? If yes, move on. If not, go back through this section and review. Look in you terminal as well to see the error(s). If you&#39;re having problems, don&#39;t beat yourself up. It&#39;s all part of learning!</p>

<h3>Update <em>form.jade</em></h3>

<p>So, let&#39;s update the Jade syntax to load a form.</p>

<p>```html<br>
extends layout</p>

<p>block content<br>
  //- passed into layout.jade when form.jade is rendered<br>
  block content<br>
    h1= title<br>
    form(method=&quot;post&quot; action=&quot;/create&quot;)<br>
      label(for=&quot;comment&quot;) Got something to say:<br>
      input(type=&quot;text&quot;, name=&quot;comment&quot;, value=comment)<br>
      input(type=&quot;submit&quot;, value=&quot;Save&quot;)<br>
```</p>

<p>I&#39;m not going to touch on all the Jade syntax, but essentially, we have just a basic HTML form to submit comments.</p>

<p>Refresh your browser. Do you see the form? Try clicking save. What happens? Well, you just tried to send a POST request to the <code>/create</code> endpoint, which does not exist. Let&#39;s set it up.</p>

<h2>Add route handler for <code>/create</code></h2>

<p>Open <em>app.js</em> and add a new route:</p>

<p><code>javascript<br>
app.use(&#39;/create&#39;, form);<br>
</code></p>

<blockquote>
<p>Notice how we&#39;re using the same <code>form</code> variable. What does this mean?</p>
</blockquote>

<p>Open <em>form.js</em> to add the logic for this new route:</p>

<p>```javascript<br>
var express = require(&#39;express&#39;);<br>
var router = express.Router();</p>

<p>/* GET form. */<br>
router.get(&#39;/&#39;, function(req, res) {<br>
  res.render(&#39;form&#39;, { title: &#39;My funky form&#39; });<br>
});</p>

<p>/* POST form. */<br>
router.post(&#39;/&#39;, function(req, res) {<br>
  console.log(req.body.comment);<br>
  res.redirect(&#39;form&#39;);<br>
});</p>

<p>module.exports = router;<br>
```</p>

<p>1Test this out again. Now, when you submit the form, we have the <code>/create</code> endpoint setup, which then grabs the text from the input box via <code>req.body.comment</code>. Make sure the text is consoled to your terminal.</p>

<p>Okay. So, we are handling the routes, rendering the right template, let&#39;s now setup Mongoose to save the data from our form.</p>

<h2>Setup Mongoose</h2>

<p><a href="http://mongoosejs.com/">Mongoose</a> is awesome. Start with defining the Schema, which the maps to a collection in Mongo. It utilizes OOP.</p>

<p>Create a file called <em>database.js</em> in your app&#39;s root directory, then add the following code:</p>

<p>```javascript<br>
var mongoose = require(&#39;mongoose&#39;);<br>
var Schema   = mongoose.Schema;</p>

<p>var Comment = new Schema({<br>
    title : String,<br>
});</p>

<p>mongoose.model(&#39;comments&#39;, Comment);</p>

<p>mongoose.connect(&#39;mongodb://localhost/node-comment&#39;);<br>
```</p>

<p>Here, we required/included the Mongoose library along with a reference to the <code>Schema()</code> method. As said, you always start with defining the schema, then we linked it to collection called &quot;comments&quot;. Finally, we opened a connection to an instance of our local MongoDB.</p>

<blockquote>
<p>If you don&#39;t have the MongoDB server running. Do so now. Open a new terminal window, and run the command <code>sudo mongod</code>.</p>
</blockquote>

<p>Next, open <em>app.js</em> and require the Mongoose config at the very top of the file:</p>

<p><code>javascript<br>
// mongoose config<br>
require(&#39;./database&#39;);<br>
</code></p>

<p>With Mongoose setup, we need to update <em>form.js</em> to create (via POST) and read (via GET) data from the Mongo collection.</p>

<h2>Handling form GET requests</h2>

<p>Open <em>form.js</em>. Require Mongoose as well as the <code>comments</code> model, which we already created:</p>

<p><code>javascript<br>
var mongoose = require(&#39;mongoose&#39;);<br>
var Comment = mongoose.model(&#39;comments&#39;);<br>
</code></p>

<p>Now, update the function handling GET requests:</p>

<p><code>javascript<br>
/* GET form. */<br>
router.get(&#39;/&#39;, function(req, res) {<br>
  Comment.find(function(err, comments){<br>
    console.log(comments)<br>
    res.render(<br>
      &#39;form&#39;,<br>
      {title : &#39;My funky form&#39;, comments : comments}<br>
    );<br>
  });<br>
});<br>
</code></p>

<p><code>Comment.find()</code> grabs all comments from the Mongo collection, which we assign to the variable <code>comments</code>. We can now use that variable in our Jade file.</p>

<h2>Update <em>form.jade</em> to display comments</h2>

<p>Let&#39;s add a loop to iterate through the comments and then display the <code>title</code> key from the collection.</p>

<p>```html<br>
extends layout</p>

<p>block content<br>
  //- passed into layout.jade when form.jade is rendered<br>
  block content<br>
    h1= title<br>
    form(method=&quot;post&quot; action=&quot;/create&quot;)<br>
      label(for=&quot;comment&quot;) Got something to say:<br>
      input(type=&quot;text&quot;, name=&quot;comment&quot;, value=comment)<br>
      input(type=&quot;submit&quot;, value=&quot;Save&quot;)<br>
    br<br>
    - for comment in comments<br>
      p= comment.title<br>
```</p>

<blockquote>
<p>Do you remember where we set the <code>title</code> key? Check out the database schema in <em>database.js</em>.</p>
</blockquote>

<p>Before this will actually work - e.g., display comments - we first need to add the logic to insert data into the Mongo collection.</p>

<h2>Handling form POST requests</h2>

<p>Back in <em>form.js</em>, update the function handling POST requests:</p>

<p><code>javascript<br>
/* POST form. */<br>
router.post(&#39;/&#39;, function(req, res) {<br>
  new Comment({title : req.body.comment})<br>
  .save(function(err, comment) {<br>
    console.log(comment)<br>
    res.redirect(&#39;form&#39;);<br>
  });<br>
});<br>
</code></p>

<p>The simply saves a new comment, which again is grabbed from the form via <code>req.body.comment</code>.</p>

<h2>Sanity Check</h2>

<p>Refresh you app. Add some comments. If you&#39;ve done everything correctly, the comments should be displayed beneath the form.</p>

<h2>Conclusion</h2>

<p>That&#39;s it. Grab the code from the <a href="https://github.com/mjhea0/node-form-refresh">repository</a>. Cheers!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Handling AJAX Calls With Node.js and Express (part 5)]]></title>
    <link href="http://mjhea0.github.com/blog/2014/04/15/handling-ajax-calls-with-node-dot-js-and-express-part-5/"/>
    <updated>2014-04-15T20:34:00-06:00</updated>
    <id>http://mjhea0.github.com/blog/2014/04/15/handling-ajax-calls-with-node-dot-js-and-express-part-5</id>
    <content type="html"><![CDATA[<p>Articles in the series:</p>

<ul>
<li>Part 1: <a href="http://mherman.org/blog/2013/10/20/handling-ajax-calls-with-node-dot-js-and-express-scraping-craigslist/">Scraping Craigslist</a></li>
<li>Part 2: <a href="http://mherman.org/blog/2013/11/01/handling-ajax-calls-with-node-dot-js-and-express-part-2/">Adding Handlebars</a></li>
<li>Part 3: <a href="http://mherman.org/blog/2013/12/21/handling-ajax-calls-with-node-dot-js-and-express-part-3/">User Authentication with Passport and MongoDB</a></li>
<li>Part 4: <a href="http://mherman.org/blog/2014/04/15/handling-ajax-calls-with-node-dot-js-and-express-part-4/">Refactoring, Adding styles</a></li>
<li>Part 5: <a href="http://mherman.org/blog/2014/04/15/handling-ajax-calls-with-node-dot-js-and-express-part-5">Saving Jobs</a> <strong>&lt;&lt; CURRENT</strong></li>
</ul>

<p>Last <a href="http://mherman.org/blog/2014/04/15/handling-ajax-calls-with-node-dot-js-and-express-part-4/">time</a> we refactored our code to make it more modular as well as added some styles. This time we&#39;ll add our next feature: <em>The ability to save jobs so that users can apply to them later.</em></p>

<h2>User Workflow</h2>

<p>From an end user&#39;s perspective, after logging in and then searching for jobs, one can simply click a button next to each job to save the job to a new Mongo collection. That job is then removed from the list of jobs retrieved from the search. Let&#39;s start with that.</p>

<h3>What do we need to do?</h3>

<ol>
<li>Add a &quot;save&quot; button next to each job.</li>
<li>Develop the necessary code to &quot;grab&quot; the job when the button is clicked, sending it to the server side.</li>
<li>Create a new collection in the database.</li>
<li>Insert the data in the newly created Mongo collection.</li>
<li>Use jQuery to remove the job from the DOM and alert the user that job has been added.</li>
</ol>

<p>Let&#39;s get started.</p>

<h2>Add a save button</h2>

<p>Start by adding the &quot;save&quot; button to the Handlebars template:</p>

<p><br>
<code>html<br>
&lt;script id=&quot;search-results&quot; type=&quot;text/x-handlebars-template&quot;&gt;<br>
    {{#each resultsArray}}<br>
      &lt;li&gt;<br>
        &lt;button type=&quot;button&quot; class=&quot;btn btn-primary btn-xs save-btn&quot;&gt;Save&lt;/button&gt;<br>
        &lt;a href={{about}}&gt;{{title}}&lt;/a&gt;&lt;br&gt;{{desc}}&gt;<br>
      &lt;/li&gt;<br>
    {{/each}}<br>
    &lt;br&gt;<br>
    &lt;/ul&gt;<br>
&lt;/script&gt;<br>
</code><br>
</p>

<p>Moving right along ...</p>

<h2>Client Side Javascript</h2>

<p>Next, let&#39;s add an event handler to <em>main.js</em> that captures the button when clicked:</p>

<p><code>javascript<br>
$(&#39;.save-btn&#39;).on(&#39;click&#39;, function() {<br>
  console.log(&quot;whee!&quot;)<br>
});<br>
</code></p>

<p>Your file should now look like this:</p>

<p>```javascript<br>
$(function(){<br>
  var source = $(&quot;#search-results&quot;).html();<br>
  var dataTemplate = Handlebars.compile(source);<br>
  $results = $(&#39;#results&#39;)</p>

<p>$(&#39;#search&#39;).on(&#39;keyup&#39;, function(e){<br>
    if(e.keyCode === 13) {<br>
      var parameters = { search: $(this).val() };<br>
      $.get(&#39;/searching&#39;, parameters, function(data){<br>
        if (data instanceof Array) {<br>
          $results.html(dataTemplate({resultsArray:data}));<br>
        } else {<br>
          $results.html(data);<br>
        };<br>
      });<br>
    };<br>
  });<br>
  $(&#39;.save-btn&#39;).on(&#39;click&#39;, function() {<br>
    console.log(&quot;whee!&quot;)<br>
  });<br>
});<br>
```</p>

<p>Do a quick sanity check. Fire up the server. Login. Search for some jobs. You should see the &quot;save&quot; button next to each job. Open up your Javascript console so you can see the console log when it fires. Now try to click a button.</p>

<p>Nothing. Right? What&#39;s going on? We have the right selector. The event is a click. It should be working.</p>

<p>The problem is fairly simple: On the initial loading of the DOM, those selectors - <code>.save-btn</code> - are not present. In fact, they only become present after we append all the jobs to the DOM. Since the selectors are not present to begin with though, our event handler in its current state won&#39;t find them. Fortunately, this is an easy fix.</p>

<p>We can simply attach a listener to a parent element, then once the event is fired, it will search for the child selector, <code>.save-btn</code>. It will obviously only find that selector once it exists in the DOM.</p>

<p>This is called event delegation. If interested, check <a href="https://learn.jquery.com/events/event-delegation/">this</a> article out for more info.</p>

<p>Update the code:</p>

<p><code>javascript<br>
$(&#39;#results&#39;).on(&#39;click&#39;, &#39;.save-btn&#39;, function() {<br>
  console.log(&quot;whee!&quot;)<br>
});<br>
</code></p>

<p>So, the listener is set to the <code>#results</code> selector, which when fired (by the button click), searches the DOM for the child selector, <code>.save-btn</code>. Test it out. It should work.</p>

<p><img src="https://raw.githubusercontent.com/mjhea0/node-express-ajax-craigslist/master/img/delegated-events.png" alt="delegated-events"></p>

<p>Next, instead of just outputting the text &quot;whee!&quot;, we need to grab the job title and URL by replacing the current console log with:</p>

<p><code>javascript<br>
var jobTitle = $(this).next(&#39;a&#39;).text()<br>
var jobURL = $(this).next(&#39;a&#39;).attr(&#39;href&#39;)<br>
console.log(jobTitle, jobURL)<br>
</code></p>

<p>Notice the <code>this</code> keyword? It&#39;s extremely powerful yet it can be difficult to use. In this case, it refers to the DOM element that the event handler is triggered on.</p>

<p>Don&#39;t believe me? Test it out: update the <code>console.log()</code> to <code>console.log($(this))</code>. Test it out.</p>

<p>To learn more about <code>this</code>, check out the jQuery <a href="https://learn.jquery.com/javascript-101/this-keyword/">docs</a> and Javascript <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this">docs</a>.</p>

<p>Now what happens when you click the save button?</p>

<p><img src="https://raw.githubusercontent.com/mjhea0/node-express-ajax-craigslist/master/img/this-keyword.png" alt="this-keyword"></p>

<p>Finally, we need to pass the data to the server.</p>

<p><code>javascript<br>
var parameters = { title: jobTitle, url: jobURL };<br>
console.log(parameters)<br>
$.get( &#39;/save&#39;, parameters, function(data) {<br>
  console.log(&quot;whee!&quot;)<br>
});<br>
</code></p>

<p>You should remember how to do this, and understand what&#39;s happening here. If not, review <a href="http://mherman.org/blog/2013/10/20/handling-ajax-calls-with-node-dot-js-and-express-scraping-craigslist/#.U1AdiuZdWYU">Part 1</a> of this series.</p>

<h2>Server Side Javascript</h2>

<p>On the server side, we need to setup a <code>/save</code> route. Again, if you have questions on this, check out <a href="http://mherman.org/blog/2013/10/20/handling-ajax-calls-with-node-dot-js-and-express-scraping-craigslist/#.U1AdiuZdWYU">Part 1</a>.</p>

<p>Update <code>app.js</code>:</p>

<p><code>javascript<br>
app.get(&#39;/save&#39;, ensureAuthenticated, routes.save)<br>
</code></p>

<p>Now update the routes file, <code>index.js</code>:</p>

<p><code>javascript<br>
exports.save = function(req, res){<br>
  var title = req.query.title;<br>
  var url = req.query.url;<br>
  console.log(title, url);<br>
};<br>
</code></p>

<p>Test this out. You should see:</p>

<p><img src="https://raw.githubusercontent.com/mjhea0/node-express-ajax-craigslist/master/img/back-end.png" alt="backend"></p>

<h2>Update Mongo</h2>

<p>Now that we have the data in our possession, let&#39;s add it to the database.</p>

<h3>Add a new schema</h3>

<p>Create a new file in the &quot;models&quot; directory called <em>job.js</em>, then add the following code to the file:</p>

<p>```javascript<br>
var mongoose = require(&#39;mongoose&#39;);<br>
var config = require(&#39;../config&#39;);</p>

<p>console.log(config);</p>

<p>// create a job model<br>
var userSchema = new mongoose.Schema({<br>
  title: String,<br>
  url: String,<br>
});</p>

<p>module.exports = mongoose.model(&#39;Job&#39;, jobSchema);<br>
```</p>

<h3>Insert Data</h3>

<p>With the schema set up, we can now add our data to the Mongo collection. Within your routes, add the following code to the <code>/save</code> route:</p>

<p><code>javascript<br>
exports.save = function(req, res){<br>
  var title = req.query.title;<br>
  var url = req.query.url;<br>
  console.log(title, url);<br>
  var newJob = new job();<br>
  newJob.title = title;<br>
  newJob.url = url;<br>
  console.log(newJob);<br>
  newJob.save(function(err){<br>
    if(err){<br>
      throw err;<br>
    }<br>
    console.log(&quot;New job, &quot; + newJob.title + &quot;, was added to mongo&quot;);<br>
  });<br>
};<br>
</code></p>

<p>Here, we are simply creating a new record assigned to the variable <code>newJob</code>, then adding the appropriate data, and finally saving the job to our job collection within Mongo.</p>

<p>Make sure to require the config and Mongoose schema files:</p>

<p><code>javascript<br>
var config = require(&#39;../config&#39;);<br>
var job = require(&#39;../models/job&#39;);<br>
</code></p>

<p>Test it out!</p>

<p><img src="https://raw.githubusercontent.com/mjhea0/node-express-ajax-craigslist/master/img/save_job_to_mongo.png" alt="save_job_to_mongo"></p>

<p>Now check out the results in Mongo:</p>

<p><img src="https://raw.githubusercontent.com/mjhea0/node-express-ajax-craigslist/master/img/saved_job_mongo.png" alt="saved_job_mongo"></p>

<p>Before moving on, let&#39;s add a line of code to search the Mongo collection to see if a job exists, then within a conditional we can setup logic for only adding a job if it doesn&#39;t already exist in the collection:</p>

<p><code>javascript<br>
exports.save = function(req, res){<br>
  var title = req.query.title;<br>
  var url = req.query.url;<br>
  console.log(title, url);<br>
  var newJob = new job();<br>
  job.findOne({&#39;title&#39;: title}, function (err, job) {<br>
    if (job) {<br>
      console.log(&#39;Job already in database.&#39;);<br>
    } else {<br>
      newJob.title = title;<br>
      newJob.url = url;<br>
      console.log(newJob);<br>
      newJob.save(function(err){<br>
        if(err){<br>
          throw err;<br>
        }<br>
        console.log(&quot;New job, &quot; + newJob.title + &quot;, was added to mongo&quot;);<br>
      });<br>
    };<br>
  });<br>
};<br>
</code></p>

<p>So, we search the database for the job - <code>job.findOne({&#39;title&#39;: title}</code> - then if it&#39;s found we output a message to the console - <code>console.log(&#39;Job already in database.&#39;);</code>. And if it&#39;s not found, we obviously add the data to the database. We should alert the user if a job is already in the database in a more direct way than just a message to the console. After all, how many users browse the Internet with their console open? We&#39;ll address that in a bit. Right now, let&#39;s finish with Mongo first.</p>

<h3>One to Many Relationship</h3>

<p>We need set up a one to many relationship (one user, many jobs) using <a href="http://docs.mongodb.org/manual/tutorial/model-referenced-one-to-many-relationships-between-documents/">document references</a> within Mongo to associate a job to a user. This takes literally two lines of code.</p>

<p>Update the jobs schema:</p>

<p>```<br>
var user = require(&#39;../models/user&#39;);</p>

<p>var jobSchema = new mongoose.Schema({<br>
  title: String,<br>
  url: String,<br>
  user: {type: mongoose.Schema.Types.ObjectId, ref: user}<br>
});<br>
```</p>

<p>Then updated <em>index.js</em> so that when you add a job it includes the currently logged in user:</p>

<p><code><br>
newJob.title = title;<br>
newJob.url = url;<br>
newJob.user = req.user._id<br>
console.log(newJob);<br>
newJob.save(function(err){<br>
  if(err){<br>
    throw err;<br>
  }<br>
</code></p>

<p>Test this out, then check out the object in Mongo:</p>

<p><code>javascript<br>
{ &quot;user&quot; : ObjectId(&quot;534cb94fd4b72d7618000001&quot;), &quot;url&quot; : &quot;http://sfbay.craigslist.org/sfc/eng/4423216760.html&quot;, &quot;title&quot; : &quot;Principal Web Engineer&quot;, &quot;_id&quot; : ObjectId(&quot;5351f3a1cc6813119e000001&quot;), &quot;__v&quot; : 0 }<br>
</code></p>

<p>The object now includes the user id.</p>

<h2>Client Side Javascript Redux</h2>

<p>Okay. Back on the client side, we need to do three things before we&#39;re finally done:</p>

<ol>
<li>Remove the job the user saved</li>
<li>Display messages from the server side, indicating whether the job was added to the database or not</li>
<li>Display all saved jobs to the user</li>
</ol>

<h3>Remove job from the DOM</h3>

<p>Add the following line of code to <em>main.js</em> right before we send the data to the server side:</p>

<p><code>javascript<br>
$(this).parent().remove()<br>
</code></p>

<p>Updated code:</p>

<p><code>javascript<br>
$(&#39;#results&#39;).on(&#39;click&#39;, &#39;.save-btn&#39;, function() {<br>
  var jobTitle = $(this).next(&#39;a&#39;).text()<br>
  var jobURL = $(this).next(&#39;a&#39;).attr(&#39;href&#39;)<br>
  var parameters = { title: jobTitle, url: jobURL };<br>
  console.log(parameters)<br>
  $(this).parent().remove()<br>
  $.get( &#39;/save&#39;, parameters, function(data) {<br>
    console.log(&#39;test&#39;,data)<br>
  });<br>
});<br>
</code></p>

<h3>Display Messages</h3>

<p>First, within <em>index.js</em> update the following two lines of code.</p>

<p>From:</p>

<p><code>javascript<br>
console.log(&#39;Job already in database.&#39;);<br>
console.log(&quot;New job, &quot; + newJob.title + &quot;, was added to mongo&quot;);<br>
</code></p>

<p>To:</p>

<p><code>javascript<br>
res.send(&#39;Job already in database.&#39;);<br>
res.send(&quot;New job, &quot; + newJob.title + &quot;, was added to mongo&quot;);<br>
</code></p>

<p>Updated function:</p>

<p><code>javascript<br>
exports.save = function(req, res){<br>
  var title = req.query.title;<br>
  var url = req.query.url;<br>
  console.log(title, url);<br>
  var newJob = new job();<br>
  job.findOne({&#39;title&#39;: title}, function (err, job) {<br>
    if (job) {<br>
      res.send(&#39;Job already in database.&#39;);<br>
    } else {<br>
      newJob.title = title;<br>
      newJob.url = url;<br>
      console.log(newJob);<br>
      newJob.save(function(err){<br>
        if(err){<br>
          throw err;<br>
        }<br>
        res.send(&quot;New job, &quot; + newJob.title + &quot;, was added to mongo&quot;);<br>
      });<br>
    };<br>
  });<br>
};<br>
</code></p>

<p>The <code>res.send()</code> method is used to send a response back to the client side. You can read more <a href="http://expressjs.com/4x/api.html#res.send">here</a>. Now, we need to capture that reponse and append the actual message to the DOM.</p>

<p>First, add a new element, <code>p#alert</code>, to <em>search.jade</em> where you want the message to go:</p>

<p>```html<br>
extends layout</p>

<p>block content<br>
    h1 Search SF Jobs<br>
    .lead Welcome, #{user}<br>
    form(METHOD=&quot;LINK&quot;, ACTION=&quot;logout&quot;)<br>
        input(type=&quot;submit&quot;, value=&quot;Logout&quot;, class=&#39;btn btn-sm btn-primary&#39;)<br>
    br<br>
    br<br>
    p#alert<br>
    input#search(type=&quot;search&quot;, placeholder=&quot;search...&quot;)<br>
    br<br>
    br<br>
    ul#results<br>
    include template.html</p>
<div class="highlight"><pre><code class="text">script(src=&quot;//cdnjs.cloudflare.com/ajax/libs/jquery/2.0.3/jquery.min.js&quot;)
script(src=&quot;//cdnjs.cloudflare.com/ajax/libs/handlebars.js/1.0.0/handlebars.min.js&quot;)
script(src=&quot;/javascripts/main.js&quot;)
</code></pre>
</div>

<p>```</p>

<p>Next update <em>main.js</em>:</p>

<p><code>javascript<br>
$.get( &#39;/save&#39;, parameters, function(data) {<br>
  $(&#39;#alert&#39;).html(data)<br>
  console.log(data)<br>
});<br>
</code></p>

<p><code>$(&#39;#alert&#39;).html(data)</code> adds the message to the DOM between the <code>&lt;p&gt;</code> tags that have the id &quot;results&quot;.</p>

<p>Check it out live.</p>

<h3>Display saved jobs</h3>

<p>This is actually a fairly large task, so we&#39;ll tackle this in the next part, along with re-organizing the entire search page and adding some more styles.</p>

<p>You can grab the code <a href="https://github.com/mjhea0/node-express-ajax-craigslist">here</a>.</p>

<p>See you next time!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Handling AJAX Calls With Node.js and Express (part 4)]]></title>
    <link href="http://mjhea0.github.com/blog/2014/04/15/handling-ajax-calls-with-node-dot-js-and-express-part-4/"/>
    <updated>2014-04-15T15:27:00-06:00</updated>
    <id>http://mjhea0.github.com/blog/2014/04/15/handling-ajax-calls-with-node-dot-js-and-express-part-4</id>
    <content type="html"><![CDATA[<p>Articles in the series:</p>

<ul>
<li>Part 1: <a href="http://mherman.org/blog/2013/10/20/handling-ajax-calls-with-node-dot-js-and-express-scraping-craigslist/">Scraping Craigslist</a></li>
<li>Part 2: <a href="http://mherman.org/blog/2013/11/01/handling-ajax-calls-with-node-dot-js-and-express-part-2/">Adding Handlebars</a></li>
<li>Part 3: <a href="http://mherman.org/blog/2013/12/21/handling-ajax-calls-with-node-dot-js-and-express-part-3/">User Authentication with Passport and MongoDB</a></li>
<li>Part 4: <a href="http://mherman.org/blog/2014/04/15/handling-ajax-calls-with-node-dot-js-and-express-part-4/">Refactoring, Adding styles</a> <strong>&lt;&lt; CURRENT</strong></li>
<li>Part 5: <a href="http://mherman.org/blog/2014/04/15/handling-ajax-calls-with-node-dot-js-and-express-part-5">Saving Jobs</a></li>
</ul>

<p>If you&#39;ve been following along with this series, you should have a basic application for searching and scraping Craigslist for jobs in San Francisco. The end goal is to have an application that users can login to, then search for jobs. From there the end user can either apply for jobs or save jobs they may be interested in.</p>

<p>Before adding any additional functionality, we need to refactor the code a bit by moving some code out of <em>app.js</em> and into separate modules so that the entire app is more modular.</p>

<h2>Configuration</h2>

<p>First, move the config settings into a separate file, outside the main project. It&#39;s always a good idea to separate configuration from actual code so that other users who wish to use your project can easily make it their own by quickly adding their own configuration.</p>

<p>Create a <em>config.js</em> file and add the following code:</p>

<p><code>javascript<br>
module.exports = {<br>
  google: {<br>
    returnURL: &#39;http://127.0.0.1:3000/auth/google/callback&#39;,<br>
    realm: &#39;http://127.0.0.1:3000&#39;<br>
  },<br>
  mongoUrl: &#39;mongodb://localhost/craigslist&#39;<br>
};<br>
</code></p>

<p>Then make sure to include the file as part of <em>app.js</em>&#39;s dependencies:</p>

<p><code>javascript<br>
var config = require(&#39;./config&#39;);<br>
</code></p>

<p>Finally, update these two areas within <em>app.js</em>:</p>

<p><code>javascript<br>
// connect to the database<br>
mongoose.connect(config.mongoUrl);<br>
</code></p>

<p>And:</p>

<p><code>javascript<br>
passport.use(new GoogleStrategy({<br>
  returnURL: config.google.returnURL,<br>
  realm: config.google.realm<br>
},<br>
</code></p>

<h2>User Model</h2>

<p>Next, update the user schema for mongoose.</p>

<p>Create a new folder called &quot;models&quot; and add a file called <em>user.js</em> to hold the user schema:</p>

<p>```javascript<br>
var mongoose = require(&#39;mongoose&#39;);<br>
var config = require(&#39;../config&#39;);</p>

<p>console.log(config);</p>

<p>// create a user model<br>
var userSchema = new mongoose.Schema({<br>
  name: String,<br>
  email: {type: String, lowercase: true }<br>
});</p>

<p>module.exports = mongoose.model(&#39;User&#39;, userSchema);<br>
```</p>

<p>Add this to the dependencies:</p>

<p><code>javascript<br>
var user = require(&#39;./models/user&#39;);<br>
</code></p>

<p>Then update <em>app.js</em>:</p>

<p>```javascript<br>
// passport settings<br>
passport.serializeUser(function(user, done) {<br>
  console.log(&#39;serializeUser: &#39; + user.id)<br>
  done(null, user.id);<br>
});<br>
passport.deserializeUser(function(id, done) {<br>
  user.findOne({_id : id}, function(err, user) {<br>
    console.log(user)<br>
    if(!err) done(null, user);<br>
    else done(err, null)<br>
  });<br>
});</p>

<p>passport.use(new GoogleStrategy({<br>
  returnURL: config.google.returnURL,<br>
  realm: config.google.realm<br>
},<br>
  function(identifier, profile, done) {<br>
    console.log(profile.emails[0].value)<br>
    process.nextTick(function() {<br>
      var query = user.findOne({&#39;email&#39;: profile.emails[0].value});<br>
      query.exec(function(err, oldUser) {<br>
        if(oldUser) {<br>
          console.log(&quot;Found registered user: &quot; + oldUser.name + &quot; is logged in!&quot;);<br>
          done(null, oldUser);<br>
        } else {<br>
          var newUser = new user();<br>
          newUser.name = profile.displayName;<br>
          newUser.email = profile.emails[0].value;<br>
          console.log(newUser);<br>
          newUser.save(function(err){<br>
            if(err){<br>
              throw err;<br>
            }<br>
            console.log(&quot;New user, &quot; + newUser.name + &quot;, was created&quot;);<br>
            done(null, newUser);<br>
          });<br>
        }<br>
      });<br>
    });<br>
  }<br>
));<br>
```</p>

<p>The Passport code searches the database to see if a user already exists before creating a new one - which is no different from last time. However, see if you can dig a bit deeper and see the subtle differences.</p>

<h2>Routes</h2>

<p>Next, move the main routing into a separate module by adding the following code to <em>routes/index.js</em>:</p>

<p>```javascript<br>
var request = require(&#39;request&#39;);</p>

<p>exports.index = function(req, res){<br>
  res.render(&#39;index&#39;, { user: req.user });<br>
};</p>

<p>exports.search = function(req, res) {<br>
  res.render(&#39;search&#39;, { user: req.user.name });<br>
};</p>

<p>exports.searching = function(req, res){<br>
  // input value from search<br>
  var val = req.query.search;<br>
  // url used to search yql<br>
  var url = &quot;http://query.yahooapis.com/v1/public/yql?q=select%20*%20from%20craigslist.search&quot; +<br>
  &quot;%20where%20location%3D%22sfbay%22%20and%20type%3D%22jjj%22%20and%20query%3D%22&quot; + val + &quot;%22&amp;format=&quot; +<br>
  &quot;json&amp;diagnostics=true&amp;env=store%3A%2F%2Fdatatables.org%2Falltableswithkeys&quot;;</p>

<p>requests(url,function(data){<br>
    res.send(data);<br>
  });<br>
};</p>

<p>function requests(url, callback) {<br>
  // request module is used to process the yql url and return the results in JSON format<br>
  request(url, function(err, resp, body) {<br>
    var resultsArray = [];<br>
    body = JSON.parse(body);<br>
    // console.log(body.query.results.RDF.item)<br>
    // logic used to compare search results with the input from user<br>
    if (!body.query.results.RDF.item) {<br>
      results = &quot;No results found. Try again.&quot;;<br>
      callback(results);<br>
    } else {<br>
      results = body.query.results.RDF.item;<br>
      for (var i = 0; i &lt; results.length; i++) {<br>
        resultsArray.push(<br>
          {title:results[i].title[0], about:results[i][&quot;about&quot;], desc:results[i][&quot;description&quot;]}<br>
        );<br>
      };<br>
    };<br>
    // pass back the results to client side<br>
    callback(resultsArray);<br>
  });<br>
};<br>
```</p>

<p>Again, add the dependency: <code>var routes = require(&#39;./routes&#39;);</code></p>

<p>The routes section in <em>app.js</em> should now look like this:</p>

<p>```javascript<br>
// user routes<br>
app.get(&#39;/&#39;, routes.index);<br>
app.get(&#39;/search&#39;, ensureAuthenticated, routes.search);<br>
app.get(&#39;/searching&#39;, ensureAuthenticated, routes.searching);<br>
app.get(&#39;/logout&#39;, function(req, res){<br>
  req.logOut();<br>
  res.redirect(&#39;/&#39;);<br>
});</p>

<p>// auth routes<br>
app.get(&#39;/auth/google&#39;,<br>
  passport.authenticate(&#39;google&#39;),<br>
  function(req, res){<br>
});<br>
app.get(&#39;/auth/google/callback&#39;,<br>
passport.authenticate(&#39;google&#39;, { failureRedirect: &#39;/&#39; }),<br>
  function(req, res) {<br>
    res.redirect(&#39;/search&#39;);<br>
  }<br>
);</p>

<p>// test authentication<br>
function ensureAuthenticated(req, res, next) {<br>
  if (req.isAuthenticated()) { return next(); }<br>
  res.redirect(&#39;/&#39;)<br>
}<br>
```</p>

<h2>Passport</h2>

<p>Now, move the main authentication code to a separate file.</p>

<p>Create a new file called <em>authentication.js</em> and add the following code:</p>

<p>```javascript<br>
// authentication</p>

<p>var passport = require(&#39;passport&#39;)<br>
var GoogleStrategy = require(&#39;passport-google&#39;).Strategy;<br>
var config = require(&#39;./config&#39;);<br>
var user = require(&#39;./models/user&#39;);</p>

<p>// passport settings<br>
passport.serializeUser(function(user, done) {<br>
  console.log(&#39;serializeUser: &#39; + user.id)<br>
  done(null, user.id);<br>
});<br>
passport.deserializeUser(function(id, done) {<br>
  user.findOne({_id : id}, function(err, user) {<br>
    console.log(user)<br>
    if(!err) done(null, user);<br>
    else done(err, null)<br>
  });<br>
});</p>

<p>passport.use(new GoogleStrategy({<br>
  returnURL: config.google.returnURL,<br>
  realm: config.google.realm<br>
},<br>
  function(identifier, profile, done) {<br>
    console.log(profile.emails[0].value)<br>
    process.nextTick(function() {<br>
      var query = user.findOne({&#39;email&#39;: profile.emails[0].value});<br>
      query.exec(function(err, oldUser) {<br>
        if(oldUser) {<br>
          console.log(&quot;Found registered user: &quot; + oldUser.name + &quot; is logged in!&quot;);<br>
          done(null, oldUser);<br>
        } else {<br>
          var newUser = new user();<br>
          newUser.name = profile.displayName;<br>
          newUser.email = profile.emails[0].value;<br>
          console.log(newUser);<br>
          newUser.save(function(err){<br>
            if(err){<br>
              throw err;<br>
            }<br>
            console.log(&quot;New user, &quot; + newUser.name + &quot;, was created&quot;);<br>
            done(null, newUser);<br>
          });<br>
        }<br>
      });<br>
    });<br>
  }<br>
));</p>

<p>module.exports = passport;<br>
```</p>

<p>Then back in <em>app.js</em>, make sure to import that module back in by adding it as a dependency:</p>

<p><code>javascript<br>
var passport = require(&#39;./authentication&#39;);<br>
</code></p>

<p>Fire up the server, and test your app out. If it all went well, everything should still work properly.</p>

<p>Finally, let&#39;s update the styles.</p>

<h2>Styles</h2>

<p>First, add in a <a href="http://getbootstrap.com/">Bootstrap</a> stylesheet to the <em>layout.jade</em> file:</p>

<p><code>html<br>
link(rel=&#39;stylesheet&#39;, href=&#39;http://mjhea0.github.com//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css&#39;)<br>
</code></p>

<h3>index.jade</h3>

<p>```html<br>
extends layout</p>

<p>block content<br>
    h1 Search Login<br>
    .lead Please login to search<br>
    br<br>
    form(METHOD=&quot;LINK&quot;, ACTION=&quot;/auth/google&quot;)<br>
        input(type=&quot;submit&quot;, value=&quot;Login with Google&quot;, class=&#39;btn btn-large btn-primary&#39;)</p>
<div class="highlight"><pre><code class="text">script(src=&quot;//cdnjs.cloudflare.com/ajax/libs/jquery/2.0.3/jquery.min.js&quot;)
script(src=&quot;//cdnjs.cloudflare.com/ajax/libs/handlebars.js/1.0.0/handlebars.min.js&quot;)
script(src=&quot;/javascripts/main.js&quot;)
</code></pre>
</div>

<p>```</p>

<h3>search.jade</h3>

<p>```html<br>
extends layout</p>

<p>block content<br>
    h1 Search SF Jobs<br>
    .lead Welcome, #{user}<br>
    form(METHOD=&quot;LINK&quot;, ACTION=&quot;logout&quot;)<br>
        input(type=&quot;submit&quot;, value=&quot;Logout&quot;, class=&#39;btn btn-sm btn-primary&#39;)<br>
    br<br>
    br<br>
    input#search(type=&quot;search&quot;, placeholder=&quot;search...&quot;)<br>
    br<br>
    br<br>
    ul#results<br>
    include template.html</p>
<div class="highlight"><pre><code class="text">script(src=&quot;//cdnjs.cloudflare.com/ajax/libs/jquery/2.0.3/jquery.min.js&quot;)
script(src=&quot;//cdnjs.cloudflare.com/ajax/libs/handlebars.js/1.0.0/handlebars.min.js&quot;)
script(src=&quot;/javascripts/main.js&quot;)
</code></pre>
</div>

<p>```</p>

<p>Wait? How did we capture the user&#39;s name? Go back and look at the <code>/searching</code> route.</p>

<p>Looks a little better. :)</p>

<p><img src="https://raw.githubusercontent.com/mjhea0/node-express-ajax-craigslist/master/img/part4.png" alt="part-4"></p>

<p>Alright, next time we&#39;ll expand the app&#39;s functionality to allow users to save jobs they may be interested in applying to at a later date. Until then, check out the latest code <a href="https://github.com/mjhea0/node-express-ajax-craigslist">here</a>. Cheers!</p>
]]></content>
  </entry>
  
</feed>
