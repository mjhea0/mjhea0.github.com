<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Node | Michael Herman]]></title>
  <link href="http://mherman.org/blog/categories/node/atom.xml" rel="self"/>
  <link href="http://mherman.org/"/>
  <updated>2016-09-25T13:41:09-06:00</updated>
  <id>http://mherman.org/</id>
  <author>
    <name><![CDATA[Michael Herman]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Node, Passport, and Postgres]]></title>
    <link href="http://mherman.org/blog/2016/09/25/node-passport-and-postgres/"/>
    <updated>2016-09-25T13:10:34-06:00</updated>
    <id>http://mherman.org/blog/2016/09/25/node-passport-and-postgres</id>
    <content type="html"><![CDATA[<p>This tutorial takes a test-first approach to implementing authentication in a Node app using Passport and Postgres.</p>

<h2>Contents</h2>

<ol>
<li>Objectives</li>
<li>Project Setup</li>
<li>Database Setup</li>
<li>Passport Config</li>
<li>Passport Local Config</li>
<li>Password Hashing</li>
<li>Auth Routes</li>
<li>Validation</li>
</ol>


<h2>Objectives</h2>

<p>By the end of this tutorial, you will be able to&hellip;</p>

<ol>
<li>Add <a href="https://github.com/jaredhanson/passport">Passport</a> and <a href="https://github.com/jaredhanson/passport-local">passport-local</a> to an Express app</li>
<li>Configure <a href="https://www.npmjs.com/package/bcryptjs">bcrypt.js</a> for salting and hashing passwords</li>
<li>Practice test driven development</li>
<li>Register and authenticate a user</li>
<li>Utilize sessions to store user information</li>
<li>Use middleware to validate JSON payloads</li>
</ol>


<h2>Project Setup</h2>

<p>Start by creating an Express boilerplate with the following <a href="https://www.npmjs.com/package/generator-galvanize-express">generator</a>:</p>

<pre><code class="sh">$ npm install -g generator-galvanize-express@1.2.3
</code></pre>

<p>Once installed, create a new project directory, and then scaffold a new app:</p>

<pre><code class="sh">$ yo galvanize-express
? Your name (for the LICENSE)? Michael Herman
? Project name (for package.json)? Change Me
? Do you want to use Gulp Notify? No
? Do you want to use pg-promise or Knex? knex
? Database name? passport_local_knex
</code></pre>

<p>Install the dependencies, and then fire up the app by running <code>gulp</code> to make sure all is well.</p>

<h2>Database Setup</h2>

<p>We&rsquo;ll be using <a href="http://knexjs.org/">Knex.js</a> to interact with the database.</p>

<blockquote><p><strong>NOTE</strong>: New to <a href="http://knexjs.org/">Knex.js</a>? Check out the <a href="http://knexjs.org/">documentation</a> along with the &ldquo;Database Setup&rdquo; section of the <a href="http://mherman.org/blog/2016/09/12/testing-node-and-express/">Testing Node and Express</a> blog post for more information on how to use it to interact with Postgres.</p></blockquote>

<h3>Migrations</h3>

<p>First, fire up your local Postgres server and create two new databases:</p>

<pre><code class="sh">$ psql
# create database passport_local_knex;
CREATE DATABASE
# create database passport_local_knex_test;
CREATE DATABASE
</code></pre>

<p>Generate a new migration template:</p>

<pre><code class="sh">$ knex migrate:make users
</code></pre>

<p>Then update the newly created file:</p>

<pre><code class="javascript">exports.up = (knex, Promise) =&gt; {
  return knex.schema.createTable('users', (table) =&gt; {
    table.increments();
    table.string('username').unique().notNullable();
    table.string('password').notNullable();
    table.boolean('admin').notNullable().defaultTo(false);
    table.timestamp('created_at').notNullable().defaultTo(knex.raw('now()'));
  });
};

exports.down = (knex, Promise) =&gt; {
  return knex.schema.dropTable('users');
};
</code></pre>

<p>Apply the migration:</p>

<pre><code class="sh">knex migrate:latest --env development
</code></pre>

<h3>Sanity Check</h3>

<p>Did it work?</p>

<pre><code class="sh">$ psql
# \c passport_local_knex
# \d

                     List of relations
 Schema |          Name          |   Type   |     Owner
--------+------------------------+----------+---------------
 public | knex_migrations        | table    | michaelherman
 public | knex_migrations_id_seq | sequence | michaelherman
 public | knex_migrations_lock   | table    | michaelherman
 public | users                  | table    | michaelherman
 public | users_id_seq           | sequence | michaelherman
(5 rows)
</code></pre>

<h2>Passport Config</h2>

<p>Install <a href="https://github.com/jaredhanson/passport">Passport</a>:</p>

<pre><code class="sh">$ npm install passport@0.3.2 --save
</code></pre>

<p>Update <em>src/server/config/main-config.js</em> to mount Passport to the app middleware and utilize <a href="https://www.npmjs.com/package/express-session">express-session</a> in order to save sessions server-side:</p>

<pre><code class="javascript">// *** app middleware *** //
if (process.env.NODE_ENV !== 'test') {
  app.use(morgan('dev'));
}
app.use(cookieParser());
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: false }));
// uncomment if using express-session
app.use(session({
  secret: process.env.SECRET_KEY,
  resave: false,
  saveUninitialized: true
}));
app.use(passport.initialize());
app.use(passport.session());
app.use(flash());
app.use(express.static(path.join(__dirname, '..', '..', 'client')));
</code></pre>

<p>Don&rsquo;t forget the dependency:</p>

<pre><code class="javascript">const passport = require('passport');
</code></pre>

<p>Make sure to add a secret key to the <em>.env</em> file. You can use Python to generate a secure key:</p>

<pre><code class="sh">$ python
&gt;&gt;&gt; import os
&gt;&gt;&gt; os.urandom(24)
"\x02\xf3\xf7r\t\x9f\xee\xbbu\xb1\xe1\x90\xfe'\xab\xa6L6\xdd\x8d[\xccO\xfe"
</code></pre>

<p>Next, we need to handle serializing and de-serializing the user information into the session cookie. Create a new directory called &ldquo;auth&rdquo; in the &ldquo;server&rdquo; and add the following code into a new file called <em>passport.js</em>:</p>

<pre><code class="javascript">const passport = require('passport');
const knex = require('../db/connection');

module.exports = () =&gt; {

  passport.serializeUser((user, done) =&gt; {
    done(null, user.id);
  });

  passport.deserializeUser((id, done) =&gt; {
    knex('users').where({id}).first()
    .then((user) =&gt; { done(null, user); })
    .catch((err) =&gt; { done(err,null); });
  });

};
</code></pre>

<h2>Passport Local Config</h2>

<p>With Passport configured, we can now set up the  <a href="https://github.com/jaredhanson/passport-local">passport-local</a> strategy for authenticating with a username and password.</p>

<p>Install:</p>

<pre><code class="sh">$ npm install passport-local@1.0.0 --save
</code></pre>

<p>Create a new file in &ldquo;auth&rdquo; called <em>local.js</em>:</p>

<pre><code class="javascript">const passport = require('passport');
const LocalStrategy = require('passport-local').Strategy;

const init = require('./passport');
const knex = require('../db/connection');

const options = {};

passport.use(new LocalStrategy(options, (username, password, done) =&gt; {
  // check to see if the username exists
  knex('users').where({ username }).first()
  .then((user) =&gt; {
    if (!user) return done(null, false);
    if (!authHelpers.comparePass(password, user.password)) {
      return done(null, false);
    } else {
      return done(null, user);
    }
  })
  .catch((err) =&gt; { return done(err); });
}));

module.exports = passport;
</code></pre>

<p>  Here, we check if the username exists in the database and then pass the appropriate results back to Passport via the callback.</p>

<p>  Flow:</p>

<ul>
<li>Does the username exist?

<ul>
<li>No? <code>false</code> is returned</li>
<li>Yes? Does the password match?

<ul>
<li>No? <code>false</code> is returned</li>
<li>Yes? The user object is returned</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>Take note of the <code>comparePass()</code> function This helper function will be used to compare the provided password with the password in the database. Let&rsquo;s write that helper&hellip;</p>

<h2>Password Hashing</h2>

<p>Since you should never store plain text passwords, install <a href="https://www.npmjs.com/package/bcryptjs">bcrypt.js</a> for salting and hashing:</p>

<pre><code class="sh">$ npm install bcryptjs@2.3.0 --save
</code></pre>

<p>Add a new file called <em>_helpers.js</em> to the &ldquo;auth&rdquo; folder:</p>

<pre><code class="javascript">const bcrypt = require('bcryptjs');

function comparePass(userPassword, databasePassword) {
  return bcrypt.compareSync(userPassword, databasePassword);
}

module.exports = {
  comparePass
};
</code></pre>

<p>Back in the <em>local.js</em> file add the requirement:</p>

<pre><code class="javascript">const authHelpers = require('./_helpers');
</code></pre>

<p>With that, we can now add the routes for handling authentication.</p>

<h2>Auth Routes</h2>

<p>Let&rsquo;s take a test-first approach to writing our routes:</p>

<ul>
<li><code>/auth/register</code></li>
<li><code>/auth/login</code></li>
<li><code>/auth/logout</code></li>
<li><code>/user</code></li>
<li><code>/admin</code></li>
</ul>


<p>Add the following code to a new file called <em>routes.auth.test.js</em> in &ldquo;test/integration&rdquo;:</p>

<pre><code class="javascript">process.env.NODE_ENV = 'test';

const chai = require('chai');
const should = chai.should();
const chaiHttp = require('chai-http');
chai.use(chaiHttp);

const server = require('../../src/server/app');
const knex = require('../../src/server/db/connection');

describe('routes : auth', () =&gt; {

  beforeEach(() =&gt; {
    return knex.migrate.rollback()
    .then(() =&gt; { return knex.migrate.latest(); });
  });

  afterEach(() =&gt; {
    return knex.migrate.rollback();
  });

});
</code></pre>

<p>This is a common boilerplate for integration tests with <a href="http://chaijs.com/">Chai</a> assertions and <a href="https://github.com/chaijs/chai-http">Chai HTTP</a> for simulating user requests. For more info, check out <a href="http://mherman.org/blog/2016/04/28/test-driven-development-with-node/#.V-U1PZMrJE4">Test Driven Development With Node, Postgres, and Knex (Red/Green/Refactor)</a>.</p>

<h3>Register</h3>

<p>Start with a test:</p>

<pre><code class="javascript">describe('POST /auth/register', () =&gt; {
  it('should register a new user', (done) =&gt; {
    chai.request(server)
    .post('/auth/register')
    .send({
      username: 'michael',
      password: 'herman'
    })
    .end((err, res) =&gt; {
      should.not.exist(err);
      res.redirects.length.should.eql(0);
      res.status.should.eql(200);
      res.type.should.eql('application/json');
      res.body.status.should.eql('success');
      done();
    });
  });
});
</code></pre>

<p>Init a new git repo and commit, and then run the tests. You should see the following error:</p>

<pre><code class="sh">Uncaught AssertionError: expected [Error: Not Found] to not exist
</code></pre>

<p>Now let&rsquo;s write the code to get the test to pass. First, register the new set of auth routes in <em>route-config.js</em>:</p>

<pre><code class="javascript">(function (routeConfig) {

  'use strict';

  routeConfig.init = function (app) {

    // *** routes *** //
    const routes = require('../routes/index');
    const authRoutes = require('../routes/auth');

    // *** register routes *** //
    app.use('/', routes);
    app.use('/auth', authRoutes);

  };

})(module.exports);
</code></pre>

<p>Then add a new file to the &ldquo;route&rdquo; folder called <em>auth.js</em>:</p>

<pre><code class="javascript">const express = require('express');
const router = express.Router();

const authHelpers = require('../auth/_helpers');

router.post('/register', (req, res, next)  =&gt; {
  return authHelpers.createUser(req, res)
  .then((user) =&gt; { handleLogin(res, user[0]); })
  .then(() =&gt; { handleResponse(res, 200, 'success'); })
  .catch((err) =&gt; { handleResponse(res, 500, 'error'); });
});

function handleLogin(req, user) {
  return new Promise((resolve, reject) =&gt; {
    req.login(user, (err) =&gt; {
      if (err) reject(err);
      resolve();
    });
  });
}

function handleResponse(res, code, statusMsg) {
  res.status(code).json({status: statusMsg});
}

module.exports = router;
</code></pre>

<p>This route simply handles the creation of a new user. To finish, add a <code>createUser()</code> function to <em>src/server/auth/_helpers.js</em>:</p>

<pre><code class="javascript">function createUser (req) {
  const salt = bcrypt.genSaltSync();
  const hash = bcrypt.hashSync(req.body.password, salt);
  return knex('users')
  .insert({
    username: req.body.username,
    password: hash
  })
  .returning('*');
}
</code></pre>

<p>Require Knex:</p>

<pre><code class="javascript">const knex = require('../db/connection');
</code></pre>

<p>Export the function:</p>

<pre><code class="javascript">module.exports = {
  comparePass,
  createUser
};
</code></pre>

<p>Now let&rsquo;s test! All should pass:</p>

<pre><code class="sh">npm test

jscs
  ✓ should pass for working directory (360ms)

routes : auth
  POST /auth/register
    ✓ should register a new user (396ms)

routes : index
  GET /
    ✓ should render the index
  GET /404
    ✓ should throw an error

jshint
  ✓ should pass for working directory (311ms)

controllers : index
  sum()
    ✓ should return a total
    ✓ should return an error


7 passing (1s)
</code></pre>

<h3>Login</h3>

<p>This time, let&rsquo;s look at how to handle both a success and an error&hellip;</p>

<h4>Handle Success</h4>

<p>Again, start with a test:</p>

<pre><code class="javascript">describe('POST /auth/login', () =&gt; {
  it('should login a user', (done) =&gt; {
    chai.request(server)
    .post('/auth/login')
    .send({
      username: 'jeremy',
      password: 'johnson123'
    })
    .end((err, res) =&gt; {
      should.not.exist(err);
      res.redirects.length.should.eql(0);
      res.status.should.eql(200);
      res.type.should.eql('application/json');
      res.body.status.should.eql('success');
      done();
    });
  });
});
</code></pre>

<p>You should see the following failure after running the test:</p>

<pre><code class="sh">Uncaught AssertionError: expected [Error: Not Found] to not exist
</code></pre>

<p>Now, let&rsquo;s update the code. Start by adding the route handler:</p>

<pre><code class="javascript">router.post('/login', (req, res, next) =&gt; {
  passport.authenticate('local', (err, user, info) =&gt; {
    if (err) { handleResponse(res, 500, 'error'); }
    if (!user) { handleResponse(res, 404, 'User not found'); }
    if (user) { handleResponse(res, 200, 'success'); }
  })(req, res, next);
});
</code></pre>

<p>Require Passport:</p>

<pre><code class="javascript">const passport = require('../auth/local');
</code></pre>

<p>Run the test. You should see:</p>

<pre><code class="sh">Uncaught AssertionError: expected [Error: Not Found] to not exist
</code></pre>

<p>Why? Well, the user does not exist in the database. To fix this, we just need to seed the database before the tests are ran. Create a new seed file:</p>

<pre><code class="sh">$ knex seed:make users
</code></pre>

<p>Then add the following code:</p>

<pre><code class="javascript">const bcrypt = require('bcryptjs');

exports.seed = (knex, Promise) =&gt; {
  return knex('users').del()
  .then(() =&gt; {
    const salt = bcrypt.genSaltSync();
    const hash = bcrypt.hashSync('johnson123', salt);
    return Promise.join(
      knex('users').insert({
        username: 'jeremy',
        password: hash
      })
    );
  });
};
</code></pre>

<p>Run the tests again. They should pass.</p>

<h4>Handle Errors</h4>

<p>Add another <code>it</code> block:</p>

<pre><code class="javascript">it('should not login an unregistered user', (done) =&gt; {
  chai.request(server)
  .post('/auth/login')
  .send({
    username: 'michael',
    password: 'johnson123'
  })
  .end((err, res) =&gt; {
    should.exist(err);
    res.redirects.length.should.eql(0);
    res.status.should.eql(404);
    res.type.should.eql('application/json');
    res.body.status.should.eql('User not found');
    done();
  });
});
</code></pre>

<p>The tests should still pass. What other errors should we handle? Think about this for a moment, and then write the tests. Once done, move on to logging out a user&hellip;</p>

<h3>Logout</h3>

<p>Test:</p>

<pre><code class="javascript">describe('GET /auth/logout', () =&gt; {
  it('should logout a user', (done) =&gt; {
    chai.request(server)
    .get('/auth/logout')
    .end((err, res) =&gt; {
      should.not.exist(err);
      res.redirects.length.should.eql(0);
      res.status.should.eql(200);
      res.type.should.eql('application/json');
      res.body.status.should.eql('success');
      done();
    });
  });
});
</code></pre>

<p>Route handler:</p>

<pre><code class="javascript">router.get('/logout', (req, res, next) =&gt; {
  req.logout();
  handleResponse(res, 200, 'success');
});
</code></pre>

<p>What if the user is not logged in? They should not be able to access that endpoint. Let&rsquo;s rewrite the test. First, install <a href="https://github.com/gtramontina/passport-stub">passport-stub</a> for mocking an authenticated user:</p>

<pre><code class="sh">$ npm install passport-stub@1.1.1 --save
</code></pre>

<p>Add the requirement to <em>test/integration/routes.auth.test.js</em>:</p>

<pre><code class="javascript">process.env.NODE_ENV = 'test';

const chai = require('chai');
const should = chai.should();
const chaiHttp = require('chai-http');
const passportStub = require('passport-stub');

const server = require('../../src/server/app');
const knex = require('../../src/server/db/connection');

chai.use(chaiHttp);
passportStub.install(server);
</code></pre>

<p>Update the <code>afterEach()</code>:</p>

<pre><code class="javascript">afterEach(() =&gt; {
  passportStub.logout();
  return knex.migrate.rollback();
});
</code></pre>

<p>Then update the test:</p>

<pre><code class="javascript">describe('GET /auth/logout', () =&gt; {
  it('should logout a user', (done) =&gt; {
    passportStub.login({
      username: 'jeremy',
      password: 'johnson123'
    });
    chai.request(server)
    .get('/auth/logout')
    .end((err, res) =&gt; {
      should.not.exist(err);
      res.redirects.length.should.eql(0);
      res.status.should.eql(200);
      res.type.should.eql('application/json');
      res.body.status.should.eql('success');
      done();
    });
  });
});
</code></pre>

<p>Now add a new test:</p>

<pre><code class="javascript">it('should throw an error if a user is not logged in', (done) =&gt; {
  chai.request(server)
  .get('/auth/logout')
  .end((err, res) =&gt; {
    should.exist(err);
    res.redirects.length.should.eql(0);
    res.status.should.eql(401);
    res.type.should.eql('application/json');
    res.body.status.should.eql('Please log in');
    done();
  });
});
</code></pre>

<p>Add a <code>loginRequired()</code> function to <em>src/server/auth/_helpers.js</em>:</p>

<pre><code class="javascript">function loginRequired(req, res, next) {
  if (!req.user) return res.status(401).json({status: 'Please log in'});
  return next();
}
</code></pre>

<p>Finally, update the route handler:</p>

<pre><code class="javascript">router.get('/logout', authHelpers.loginRequired, (req, res, next) =&gt; {
  req.logout();
  handleResponse(res, 200, 'success');
});
</code></pre>

<p>The tests should pass.</p>

<h3>User</h3>

<p>Once logged in, users should have access to the <code>/user</code> endpoint. Start with the tests:</p>

<pre><code class="javascript">describe('GET /user', () =&gt; {
  it('should return a success', (done) =&gt; {
    passportStub.login({
      username: 'jeremy',
      password: 'johnson123'
    });
    chai.request(server)
    .get('/user')
    .end((err, res) =&gt; {
      should.not.exist(err);
      res.redirects.length.should.eql(0);
      res.status.should.eql(200);
      res.type.should.eql('application/json');
      res.body.status.should.eql('success');
      done();
    });
  });
  it('should throw an error if a user is not logged in', (done) =&gt; {
    chai.request(server)
    .get('/user')
    .end((err, res) =&gt; {
      should.exist(err);
      res.redirects.length.should.eql(0);
      res.status.should.eql(401);
      res.type.should.eql('application/json');
      res.body.status.should.eql('Please log in');
      done();
    });
  });
});
</code></pre>

<p>Add a new set of routes to <em>src/server/config/route-config.js</em>:</p>

<pre><code class="javascript">(function (routeConfig) {

  'use strict';

  routeConfig.init = function (app) {

    // *** routes *** //
    const routes = require('../routes/index');
    const authRoutes = require('../routes/auth');
    const userRoutes = require('../routes/user');

    // *** register routes *** //
    app.use('/', routes);
    app.use('/auth', authRoutes);
    app.use('/', userRoutes);

  };

})(module.exports);
</code></pre>

<p>The tests should now pass.</p>

<h3>Admin</h3>

<p>Add the tests:</p>

<pre><code class="javascript">describe('GET /admin', () =&gt; {
  it('should return a success', (done) =&gt; {
    passportStub.login({
      username: 'kelly',
      password: 'bryant123'
    });
    chai.request(server)
    .get('/admin')
    .end((err, res) =&gt; {
      should.not.exist(err);
      res.redirects.length.should.eql(0);
      res.status.should.eql(200);
      res.type.should.eql('application/json');
      res.body.status.should.eql('success');
      done();
    });
  });
  it('should throw an error if a user is not logged in', (done) =&gt; {
    chai.request(server)
    .get('/user')
    .end((err, res) =&gt; {
      should.exist(err);
      res.redirects.length.should.eql(0);
      res.status.should.eql(401);
      res.type.should.eql('application/json');
      res.body.status.should.eql('Please log in');
      done();
    });
  });
  it('should throw an error if a user is not an admin', (done) =&gt; {
    passportStub.login({
      username: 'jeremy',
      password: 'johnson123'
    });
    chai.request(server)
    .get('/admin')
    .end((err, res) =&gt; {
      should.exist(err);
      res.redirects.length.should.eql(0);
      res.status.should.eql(401);
      res.type.should.eql('application/json');
      res.body.status.should.eql('You are not authorized');
      done();
    });
  });
});
</code></pre>

<p>Add the route handler:</p>

<pre><code class="javascript">router.get('/admin', authHelpers.adminRequired, (req, res, next)  =&gt; {
  handleResponse(res, 200, 'success');
});
</code></pre>

<p>Add the helper function:</p>

<pre><code class="javascript">function adminRequired(req, res, next) {
  if (!req.user) res.status(401).json({status: 'Please log in'});
  return knex('users').where({username: req.user.username}).first()
  .then((user) =&gt; {
    if (!user.admin) res.status(401).json({status: 'You are not authorized'});
    return next();
  })
  .catch((err) =&gt; {
    res.status(500).json({status: 'Something bad happened'});
  });
}
</code></pre>

<p>Export the function:</p>

<pre><code class="javascript">module.exports = {
  comparePass,
  createUser,
  loginRequired,
  adminRequired
};
</code></pre>

<p>Update the seed file:</p>

<pre><code class="javascript">const bcrypt = require('bcryptjs');

exports.seed = (knex, Promise) =&gt; {
  return knex('users').del()
  .then(() =&gt; {
    const salt = bcrypt.genSaltSync();
    const hash = bcrypt.hashSync('johnson123', salt);
    return Promise.join(
      knex('users').insert({
        username: 'jeremy',
        password: hash
      })
    );
  })
  .then(() =&gt; {
    const salt = bcrypt.genSaltSync();
    const hash = bcrypt.hashSync('bryant123', salt);
    return Promise.join(
      knex('users').insert({
        username: 'kelly',
        password: hash,
        admin: true
      })
    );
  });
};
</code></pre>

<p>The tests should now pass.</p>

<h3>Helper</h3>

<p>Take a quick look at the <code>/auth/register</code> and <code>/auth/login</code> endpoints. What happens if there is a user already logged in? As of now, the user can still access those routes, so add another helper function to prevent access:</p>

<pre><code class="javascript">function loginRedirect(req, res, next) {
  if (req.user) return res.status(401).json(
    {status: 'You are already logged in'});
  return next();
}
</code></pre>

<p>Update the route handlers:</p>

<pre><code class="javascript">router.post('/register', authHelpers.loginRedirect, (req, res, next)  =&gt; {
  return authHelpers.createUser(req, res)
  .then((user) =&gt; {
    handleLogin(res, user[0]);
  })
  .then(() =&gt; { handleResponse(res, 200, 'success'); })
  .catch((err) =&gt; { handleResponse(res, 500, 'error'); });
});

router.post('/login', authHelpers.loginRedirect, (req, res, next) =&gt; {
  passport.authenticate('local', (err, user, info) =&gt; {
    if (err) { handleResponse(res, 500, 'error'); }
    if (!user) { handleResponse(res, 404, 'User not found'); }
    if (user) { handleResponse(res, 200, 'success'); }
  })(req, res, next);
});
</code></pre>

<p>Add a new test to <code>describe('POST /auth/register', () =&gt; {</code>:</p>

<pre><code class="javascript">it('should throw an error if a user is logged in', (done) =&gt; {
  passportStub.login({
    username: 'jeremy',
    password: 'johnson123'
  });
  chai.request(server)
  .post('/auth/register')
  .send({
    username: 'michael',
    password: 'herman'
  })
  .end((err, res) =&gt; {
    should.exist(err);
    res.redirects.length.should.eql(0);
    res.status.should.eql(401);
    res.type.should.eql('application/json');
    res.body.status.should.eql('You are already logged in');
    done();
  });
});
</code></pre>

<p>And add a new test to <code>describe('POST /auth/login', () =&gt; {</code>:</p>

<pre><code class="javascript">it('should throw an error if a user is logged in', (done) =&gt; {
  passportStub.login({
    username: 'jeremy',
    password: 'johnson123'
  });
  chai.request(server)
  .post('/auth/login')
  .send({
    username: 'jeremy',
    password: 'johnson123'
  })
  .end((err, res) =&gt; {
    should.exist(err);
    res.redirects.length.should.eql(0);
    res.status.should.eql(401);
    res.type.should.eql('application/json');
    res.body.status.should.eql('You are already logged in');
    done();
  });
});
</code></pre>

<p>Run the tests again. All should pass. Write some unit tests before moving on.</p>

<h2>Validation</h2>

<p>At this point we&rsquo;ve covered most of the basic functionality. We can add some additional validation rules by first adding the helper function to <em>src/server/auth/_helpers.js</em>:</p>

<pre><code class="javascript">function handleErrors(req) {
  return new Promise((resolve, reject) =&gt; {
    if (req.body.username.length &lt; 6) {
      reject({
        message: 'Username must be longer than 6 characters'
      });
    }
    else if (req.body.password.length &lt; 6) {
      reject({
        message: 'Password must be longer than 6 characters'
      });
    } else {
      resolve();
    }
  });
}
</code></pre>

<p>And then update <code>createUser()</code>:</p>

<pre><code class="javascript">function createUser(req, res) {
  return handleErrors(req)
  .then(() =&gt; {
    const salt = bcrypt.genSaltSync();
    const hash = bcrypt.hashSync(req.body.password, salt);
    return knex('users')
    .insert({
      username: req.body.username,
      password: hash
    })
    .returning('*');
  })
  .catch((err) =&gt; {
    res.status(400).json({status: err.message});
  });
}
</code></pre>

<p>Finally, add two new tests to <code>POST /auth/register</code>:</p>

<pre><code class="javascript">it('should throw an error if the username is &lt; 6 characters', (done) =&gt; {
  chai.request(server)
  .post('/auth/register')
  .send({
    username: 'six',
    password: 'herman'
  })
  .end((err, res) =&gt; {
    should.exist(err);
    res.redirects.length.should.eql(0);
    res.status.should.eql(400);
    res.type.should.eql('application/json');
    res.body.status.should.eql('Username must be longer than 6 characters');
    done();
  });
});
it('should throw an error if the password is &lt; 6 characters', (done) =&gt; {
  chai.request(server)
  .post('/auth/register')
  .send({
    username: 'michael',
    password: 'six'
  })
  .end((err, res) =&gt; {
    should.exist(err);
    res.redirects.length.should.eql(0);
    res.status.should.eql(400);
    res.type.should.eql('application/json');
    res.body.status.should.eql('Password must be longer than 6 characters');
    done();
  });
});
</code></pre>

<p>Run the tests:</p>

<pre><code class="sh">$ npm test

  jscs
    ✓ should pass for working directory (752ms)

  routes : auth
    POST /auth/register
      ✓ should register a new user (498ms)
      ✓ should throw an error if a user is logged in
      ✓ should throw an error if the username is &lt; 6 characters
      ✓ should throw an error if the password is &lt; 6 characters
    POST /auth/login
      ✓ should login a user (291ms)
      ✓ should not login an unregistered user
      ✓ should throw an error if a user is logged in
    GET /auth/logout
      ✓ should logout a user
      ✓ should throw an error if a user is not logged in
    GET /user
      ✓ should return a success
      ✓ should throw an error if a user is not logged in
    GET /admin
      ✓ should return a success
      ✓ should throw an error if a user is not logged in
      ✓ should throw an error if a user is not an admin

  routes : index
    GET /
      ✓ should render the index
    GET /404
      ✓ should throw an error

  jshint
    ✓ should pass for working directory (493ms)

  controllers : index
    sum()
      ✓ should return a total
      ✓ should return an error


  20 passing (13s)
</code></pre>

<p>Yay!</p>

<hr />

<p><br></p>

<p>Grab the code from the <a href="https://github.com/mjhea0/passport-local-knex">repo</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing Node and Express]]></title>
    <link href="http://mherman.org/blog/2016/09/12/testing-node-and-express/"/>
    <updated>2016-09-12T07:09:13-06:00</updated>
    <id>http://mherman.org/blog/2016/09/12/testing-node-and-express</id>
    <content type="html"><![CDATA[<p>This tutorial looks at how to test an <a href="https://expressjs.com/">Express</a> CRUD app with <a href="http://mochajs.org/">Mocha</a> and <a href="http://chaijs.com/">Chai</a>. Although we&rsquo;ll be writing both <a href="http://stackoverflow.com/questions/5357601/whats-the-difference-between-unit-tests-and-integration-tests">unit and integration tests</a>, the focus will be on the latter so that the tests run against the database in order to test the full functionality of our app. Postgres will be used, but feel free to use your favorite relational database.</p>

<p>Let&rsquo;s get to it!</p>

<h2>Contents</h2>

<ol>
<li>Objectives</li>
<li>Why Test?</li>
<li>Project Setup</li>
<li>Database Setup</li>
<li>Test Structure</li>
<li>Schema Migrations</li>
<li>Database Seed</li>
<li>Integration Tests</li>
<li>Unit Tests</li>
<li>Test Fixtures</li>
<li>Validation</li>
<li>Refactor</li>
<li>Conclusion</li>
</ol>


<h2>Objectives</h2>

<p>By the end of this tutorial, you will be able to&hellip;</p>

<ol>
<li>Discuss the benefits of automating tests</li>
<li>Set up a project with knex.js</li>
<li>Write schema migration files with knex to create new database tables</li>
<li>Generate <a href="https://en.wikipedia.org/wiki/Database_seeding">database seed</a> files with knex and apply the seeds to the database</li>
<li>Perform the basic CRUD functions on a RESTful resource with knex methods</li>
<li>Set up the testing structure with Mocha and Chai</li>
<li>Write integration tests</li>
<li>Write unit tests</li>
<li>Write tests, and then write just enough code to pass the tests</li>
<li>Create <a href="https://expressjs.com/en/guide/routing.html">Express routes</a></li>
<li>Practice test driven development</li>
<li>Create a CRUD app, following RESTful best practices</li>
<li>Generate fake test data (<a href="https://en.wikipedia.org/wiki/Test_fixture">test fixtures</a>) with <a href="https://github.com/marak/Faker.js/">faker.js</a></li>
<li>Validate request parameters with <a href="https://github.com/ctavan/express-validator">express-validator</a></li>
</ol>


<h2>Why Test?</h2>

<p>Are you currently manually testing your app?</p>

<p>When you push new code do you manually test all features in your app to ensure the new code doesn&rsquo;t break existing functionality? How about when you&rsquo;re fixing a bug? Do you manually test your app? How many times - ten, twenty, thirty times?</p>

<p>Stop wasting time!</p>

<p>If you do any sort of manual testing write an automated test instead. Your future self will thank you.</p>

<p>Need more convincing? Testing&hellip;</p>

<ol>
<li>Helps break down problems into manageable pieces</li>
<li>Forces you to write cleaner code</li>
<li>Prevents over coding</li>
<li>Let&rsquo;s you sleep at night (because you <em>actually</em> know that your code works)</li>
</ol>


<h2>Project Setup</h2>

<p>To quickly create an app boilerplate install the following <a href="https://www.npmjs.com/package/generator-galvanize-express">generator</a>:</p>

<pre><code class="sh">$ npm install -g generator-galvanize-express@1.0.5
</code></pre>

<p>Make sure you have <a href="http://mochajs.org/">Mocha</a>, <a href="http://chaijs.com/">Chai</a>, <a href="http://gulpjs.com/">Gulp</a>, and <a href="http://yeoman.io/">Yeoman</a> installed globally as well:</p>

<pre><code class="sh">$ npm install -g mocha@3.0.2 chai@3.5.0 yo@1.8.5 gulp@3.9.1
</code></pre>

<p>Create a new project directory, and then run the generator to scaffold a new app:</p>

<pre><code class="sh">$ yo galvanize-express
</code></pre>

<blockquote><p><strong>NOTE:</strong> Add your name for the MIT License and opt not to add Gulp Notify.</p></blockquote>

<p>Open the project in your favorite text editor, and then review the project structure as the dependencies are installed:</p>

<pre><code class="sh">$ npm install
</code></pre>

<p>Finally, let&rsquo;s run the app to make sure all is well:</p>

<pre><code class="sh">$ gulp
</code></pre>

<p>Navigate to <a href="http://localhost:3000/">http://localhost:3000/</a> in your favorite browser. You should see:</p>

<pre><code>Welcome to Express!
The sum is 3
</code></pre>

<h2>Database Setup</h2>

<p>Make sure the Postgres database server is running, and then create two new databases in <a href="http://postgresguide.com/utilities/psql.html">psql</a>, for development and testing:</p>

<pre><code class="sh"># create database express_tdd;
CREATE DATABASE
# create database express_tdd_testing;
CREATE DATABASE
#
</code></pre>

<p>Install Knex and <a href="https://github.com/brianc/node-postgres">pg</a>:</p>

<pre><code class="sh">$ npm install knex@0.11.10 pg@6.1.0 --save-dev
</code></pre>

<p>Run <code>knex init</code> to generate a new <em><a href="http://knexjs.org/#knexfile">knexfile.js</a></em> file in the project root, which is used to store database config. Update the file like so:</p>

<pre><code class="javascript">module.exports = {
  development: {
    client: 'postgresql',
    connection: 'postgres://localhost:5432/express_tdd',
    migrations: {
      directory: __dirname + '/src/server/db/migrations'
    },
    seeds: {
      directory: __dirname + '/src/server/db/seeds'
    }
  },
  test: {
    client: 'postgresql',
    connection: 'postgres://localhost:5432/express_tdd_testing',
    migrations: {
      directory: __dirname + '/src/server/db/migrations'
    },
    seeds: {
      directory: __dirname + '/src/server/db/seeds'
    }
  }
};
</code></pre>

<p>Here, different database configuration is used based on the app&rsquo;s environment, either <code>development</code> or <code>test</code>. The <a href="https://en.wikipedia.org/wiki/Environment_variable">environment variable</a> <code>NODE_ENV</code> is used to change the environment. <code>NODE_ENV</code> defaults to <code>development</code>, so when we run our tests, we&rsquo;ll need to update the variable to <code>test</code> in order to pull in the proper config.</p>

<p>Next, let&rsquo;s init the database connection. Create a new folder within &ldquo;server&rdquo; called &ldquo;db&rdquo; and then add a file called <em>knex.js</em>:</p>

<pre><code class="javascript">const environment = process.env.NODE_ENV;
const config = require('../../../knexfile.js')[environment];
module.exports = require('knex')(config);
</code></pre>

<p>The database connection is established by passing the proper environment (via the environment variable <code>NODE_ENV</code>) to <em>knexfile.js</em> which returns the associated object that is passed to the <code>knex</code> library in the third line above.</p>

<blockquote><p><strong>NOTE</strong>: Now is a great time to init a new git repo and make your first commit!</p></blockquote>

<h2>Test Structure</h2>

<p>With that complete, let&rsquo;s look at the current test structure. In the &ldquo;src&rdquo; directory, you&rsquo;ll notice a &ldquo;test&rdquo; directory, which as you probably guessed contains the test specs. Two sample tests have been created, plus there is some basic configuration set up for <a href="https://github.com/jshint/jshint">JSHint</a> and <a href="http://jscs.info/">JSCS</a> so that the code is linted against the style config and conventions defined in the <em>.jscsrc</em>  and <em>jshintrc</em> files, respectively.</p>

<p>Run the tests:</p>

<pre><code class="sh">$ npm test
</code></pre>

<p>They all should pass:</p>

<pre><code class="sh">jscs
  ✓ should pass for working directory (357ms)

routes : index
  GET /
    ✓ should render the index (88ms)
  GET /404
    ✓ should throw an error

jshint
  ✓ should pass for working directory (247ms)

controllers : index
  sum()
    ✓ should return a total
    ✓ should return an error


6 passing (724ms)
</code></pre>

<p>Glance at the sample tests. Notice how we updated the environment variable at the top of each test:</p>

<pre><code class="javascript">process.env.NODE_ENV = 'test';
</code></pre>

<p>Remember what this does? Scroll back up to the previous section if you forgot. Now, when we run the tests, knex is initialized with the <code>test</code> config.</p>

<h2>Schema Migrations</h2>

<p>To keep the code simple, let&rsquo;s use one CRUD resource - <code>users</code>:</p>

<table>
<thead>
<tr>
<th> Endpoint  </th>
<th> HTTP Method  </th>
<th> CRUD Method </th>
<th> Result               </th>
</tr>
</thead>
<tbody>
<tr>
<td> users     </td>
<td> GET          </td>
<td> CREATE      </td>
<td> get all users        </td>
</tr>
<tr>
<td> users/:id </td>
<td> GET          </td>
<td> CREATE      </td>
<td> get a single user    </td>
</tr>
<tr>
<td> users     </td>
<td> POST         </td>
<td> READ        </td>
<td> add a single user    </td>
</tr>
<tr>
<td> users/:id </td>
<td> PUT          </td>
<td> UPDATE      </td>
<td> update a single user </td>
</tr>
<tr>
<td> users/:id </td>
<td> DELETE       </td>
<td> DELETE      </td>
<td> delete a single user </td>
</tr>
</tbody>
</table>


<p>Init a new knex migration:</p>

<pre><code class="sh">$ knex migrate:make users
</code></pre>

<p>This command created a new migration file in the &ldquo;src/server/db/migrations&rdquo; folder. Now we can create the table along with the individual fields:</p>

<table>
<thead>
<tr>
<th> Field Name  </th>
<th> Data Type </th>
<th> Constraints                                 </th>
</tr>
</thead>
<tbody>
<tr>
<td> id          </td>
<td> integer   </td>
<td> not null, unique                            </td>
</tr>
<tr>
<td> username    </td>
<td> string    </td>
<td> not null, unique                            </td>
</tr>
<tr>
<td> email       </td>
<td> string    </td>
<td> not null, unique                            </td>
</tr>
<tr>
<td> created_at  </td>
<td> timestamp </td>
<td> Not null, default to current date and time  </td>
</tr>
</tbody>
</table>


<p>Add the following code to the migration file:</p>

<pre><code class="javascript">exports.up = (knex, Promise) =&gt; {
  return knex.schema.createTable('users', (table) =&gt; {
    table.increments();
    table.string('username').unique().notNullable();
    table.string('email').unique().notNullable();
    table.timestamp('created_at').defaultTo(knex.fn.now());
  });
};

exports.down = (knex, Promise) =&gt; {
  return knex.schema.dropTable('users');
};
</code></pre>

<p>Apply the migration:</p>

<pre><code class="sh">$ knex migrate:latest --env development
</code></pre>

<p>Make sure the schema was applied within psql:</p>

<pre><code class="sh"># \c express_tdd
You are now connected to database "express_tdd".
# \dt
                   List of relations
 Schema |         Name         | Type  |     Owner
--------+----------------------+-------+---------------
 public | knex_migrations      | table | michaelherman
 public | knex_migrations_lock | table | michaelherman
 public | users                | table | michaelherman
(3 rows)

# select * from users;
 id | username | email | created_at
----+----------+-------+------------
(0 rows)
</code></pre>

<h2>Database Seed</h2>

<p>We need to <a href="https://en.wikipedia.org/wiki/Database_seeding">seed</a> the database to add dummy data to the database so we have something to work with. Init a new seed, which will add a new seed file to &ldquo;src/server/db/seeds/&rdquo;:</p>

<pre><code class="sh">$ knex seed:make users
</code></pre>

<p>Update the file:</p>

<pre><code class="sh">exports.seed = (knex, Promise) =&gt; {
  // Deletes ALL existing entries
  return knex('users').del()
  .then(() =&gt; {
    return Promise.all([
      // Inserts seed entries
      knex('users').insert({
        username: 'michael',
        email: 'michael@mherman.org'
      }),
      knex('users').insert({
        username: 'michaeltwo',
        email: 'michael@realpython.org'
      })
    ]);
  });
};
</code></pre>

<p>Run the seed:</p>

<pre><code class="sh">$ knex seed:run --env development
</code></pre>

<p>Then make sure the data is in the database:</p>

<pre><code class="sh"># select * from users;
 id |  username  |         email          |          created_at
----+------------+------------------------+-------------------------------
  1 | michael    | michael@mherman.org    | 2016-09-08 15:08:00.31772-06
  2 | michaeltwo | michael@realpython.org | 2016-09-08 15:08:00.320299-06
(2 rows)
</code></pre>

<p>Set up complete.</p>

<h2>Integration Tests</h2>

<p>We&rsquo;ll be taking a test first approach to development, roughly following these steps for each endpoint:</p>

<ol>
<li>Write test</li>
<li>Run the test (it should fail)</li>
<li>Write code</li>
<li>Run the test (it should pass)</li>
</ol>


<p>Start by thinking about the expected input (JSON payload) and output (JSON object) for each RESTful endpoint:</p>

<table>
<thead>
<tr>
<th> Endpoint  </th>
<th> HTTP   </th>
<th> Input       </th>
<th> Output           </th>
</tr>
</thead>
<tbody>
<tr>
<td> users     </td>
<td> GET    </td>
<td> none        </td>
<td> array of objects </td>
</tr>
<tr>
<td> users/:id </td>
<td> GET    </td>
<td> none        </td>
<td> single object    </td>
</tr>
<tr>
<td> users     </td>
<td> POST   </td>
<td> user object </td>
<td> single object    </td>
</tr>
<tr>
<td> users/:id </td>
<td> PUT    </td>
<td> user object </td>
<td> single object    </td>
</tr>
<tr>
<td> users/:id </td>
<td> DELETE </td>
<td> none        </td>
<td> single object    </td>
</tr>
</tbody>
</table>


<p>The input user object will always look something like:</p>

<pre><code class="json">{
  "username": "michael",
  "email": "michael@herman.com"
}
</code></pre>

<p>Likewise, the output will always have the following structure:</p>

<pre><code class="json">{
  "status": "success",
  "data": "either an array of objects or a single object"
}
</code></pre>

<p>Create a new file in the &ldquo;test/integration&rdquo; directory called &ldquo;routes.users.test.js&rdquo; and add the following code:</p>

<pre><code class="javascript">process.env.NODE_ENV = 'test';

const chai = require('chai');
const should = chai.should();
const chaiHttp = require('chai-http');
chai.use(chaiHttp);

const server = require('../../src/server/app');
const knex = require('../../src/server/db/knex');

describe('routes : users', () =&gt; {

  beforeEach((done) =&gt; {
    knex.migrate.rollback()
    .then(() =&gt; {
      knex.migrate.latest()
      .then(() =&gt; {
        knex.seed.run()
        .then(() =&gt; {
          done();
        })
      });
    });
  });

  afterEach((done) =&gt; {
    knex.migrate.rollback()
    .then(() =&gt; {
      done();
    });
  });

});
</code></pre>

<p>What&rsquo;s happening here? Think about it on your own. Turn to Google if necessary. Still have questions? Comment below.</p>

<p>With that, let&rsquo;s start writing some code&hellip;</p>

<h3>GET ALL Users</h3>

<p>Add the first test:</p>

<pre><code class="javascript">describe('GET /api/v1/users', () =&gt; {
  it('should respond with all users', (done) =&gt; {
    chai.request(server)
    .get('/api/v1/users')
    .end((err, res) =&gt; {
      // there should be no errors
      should.not.exist(err);
      // there should be a 200 status code
      res.status.should.equal(200);
      // the response should be JSON
      res.type.should.equal('application/json');
      // the JSON response body should have a
      // key-value pair of {"status": "success"}
      res.body.status.should.eql('success');
      // the JSON response body should have a
      // key-value pair of {"data": [2 user objects]}
      res.body.data.length.should.eql(2);
      // the first object in the data array should
      // have the right keys
      res.body.data[0].should.include.keys(
        'id', 'username', 'email', 'created_at'
      );
      done();
    });
  });
});
</code></pre>

<p>Take note of the inline code comments. Need more explanation? Read over <a href="http://mherman.org/blog/2015/09/10/testing-node-js-with-mocha-and-chai/#.V9W8aJMrJE4">Testing Node.js With Mocha and Chai</a>. Run the test to make sure it fails. Now write the code to get the test pass, following these steps:</p>

<h4>Update the route config (src/server/config/route-config.js)</h4>

<pre><code class="javascript">(function (routeConfig) {

  'use strict';

  routeConfig.init = function (app) {

    // *** routes *** //
    const routes = require('../routes/index');
    const userRoutes = require('../routes/users');

    // *** register routes *** //
    app.use('/', routes);
    app.use('/api/v1/users', userRoutes);

  };

})(module.exports);
</code></pre>

<p>Now we have a new set of routes set up that we can use within <em>src/server/routes/users.js</em>, which we need to add&hellip;</p>

<h4>Set up new routes</h4>

<p>Create the <em>users.js</em> file in &ldquo;src/server/routes/&rdquo;, and then add in the route boilerplate:</p>

<pre><code class="javascript">const express = require('express');
const router = express.Router();

const knex = require('../db/knex');

module.exports = router;
</code></pre>

<p>Now we can add in the route handler with the knex methods for retrieving all users from the <code>users</code> table:</p>

<pre><code class="javascript">router.get('/', (req, res, next) =&gt; {
  knex('users').select('*')
  .then((users) =&gt; {
    res.status(200).json({
      status: 'success',
      data: users
    });
  })
  .catch((err) =&gt; {
    res.status(500).json({
      status: 'error',
      data: err
    });
  });
});
</code></pre>

<p>Run the tests:</p>

<pre><code class="sh">$ npm test
</code></pre>

<p>You should see the test passing:</p>

<pre><code class="sh">routes : users
  GET /api/v1/users
    ✓ should respond with all users
</code></pre>

<h3>GET Single User</h3>

<p>Moving on, we can just copy and paste the previous test and use that boilerplate to write the next test:</p>

<pre><code class="javascript">describe('GET /api/v1/users/:id', () =&gt; {
  it('should respond with a single user', (done) =&gt; {
    chai.request(server)
    .get('/api/v1/users/1')
    .end((err, res) =&gt; {
      // there should be no errors
      should.not.exist(err);
      // there should be a 200 status code
      res.status.should.equal(200);
      // the response should be JSON
      res.type.should.equal('application/json');
      // the JSON response body should have a
      // key-value pair of {"status": "success"}
      res.body.status.should.eql('success');
      // the JSON response body should have a
      // key-value pair of {"data": 1 user object}
      res.body.data[0].should.include.keys(
        'id', 'username', 'email', 'created_at'
      );
      done();
    });
  });
});
</code></pre>

<p>Run the test. Watch it fail. Write the code to get it to pass:</p>

<pre><code class="javascript">router.get('/:id', (req, res, next) =&gt; {
  const userID = parseInt(req.params.id);
  knex('users')
  .select('*')
  .where({
    id: userID
  })
  .then((users) =&gt; {
    res.status(200).json({
      status: 'success',
      data: users
    });
  })
  .catch((err) =&gt; {
    res.status(500).json({
      status: 'error',
      data: err
    });
  });
});
</code></pre>

<h3>POST</h3>

<p>Test:</p>

<pre><code class="javascript">describe('POST /api/v1/users', () =&gt; {
  it('should respond with a success message along with a single user that was added', (done) =&gt; {
    chai.request(server)
    .post('/api/v1/users')
    .send({
      username: 'ryan',
      email: 'ryan@ryan.com'
    })
    .end((err, res) =&gt; {
      // there should be no errors
      should.not.exist(err);
      // there should be a 201 status code
      // (indicating that something was "created")
      res.status.should.equal(201);
      // the response should be JSON
      res.type.should.equal('application/json');
      // the JSON response body should have a
      // key-value pair of {"status": "success"}
      res.body.status.should.eql('success');
      // the JSON response body should have a
      // key-value pair of {"data": 1 user object}
      res.body.data[0].should.include.keys(
        'id', 'username', 'email', 'created_at'
      );
      done();
    });
  });
});
</code></pre>

<p>Code:</p>

<pre><code class="javascript">// *** add a user *** //
router.post('/', (req, res, next) =&gt; {
  const newUsername = req.body.username;
  const newEmail = req.body.email;
  knex('users')
  .insert({
    username: newUsername,
    email: newEmail
  })
  .returning('*')
  .then((user) =&gt; {
    res.status(201).json({
      status: 'success',
      data: user
    });
  })
  .catch((err) =&gt; {
    res.status(500).json({
      status: 'error',
      data: err
    });
  });
});
</code></pre>

<h3>PUT</h3>

<p>Test:</p>

<pre><code class="javascript">describe('PUT /api/v1/users', () =&gt; {
  it('should respond with a success message along with a single user that was updated', (done) =&gt; {
    knex('users')
    .select('*')
    .then((user) =&gt; {
      const userObject = user[0];
      chai.request(server)
      .put(`/api/v1/users/${userObject.id}`)
      .send({
        username: 'updatedUser',
        email: 'updated@user.com'
      })
      .end((err, res) =&gt; {
        // there should be no errors
        should.not.exist(err);
        // there should be a 200 status code
        res.status.should.equal(200);
        // the response should be JSON
        res.type.should.equal('application/json');
        // the JSON response body should have a
        // key-value pair of {"status": "success"}
        res.body.status.should.eql('success');
        // the JSON response body should have a
        // key-value pair of {"data": 1 user object}
        res.body.data[0].should.include.keys(
          'id', 'username', 'email', 'created_at'
        );
        // ensure the user was in fact updated
        var newUserObject = res.body.data[0];
        newUserObject.username.should.not.eql(userObject.username);
        newUserObject.email.should.not.eql(userObject.email);
        // redundant
        newUserObject.username.should.eql('updatedUser');
        newUserObject.email.should.eql('updated@user.com');
        done();
      });
    });
  });
});
</code></pre>

<p>Code:</p>

<pre><code class="javascript">// *** update a user *** //
router.put('/:id', (req, res, next) =&gt; {
  const userID = parseInt(req.params.id);
  const updatedUsername = req.body.username;
  const updatedEmail = req.body.email;
  knex('users')
  .update({
    username: updatedUsername,
    email: updatedEmail
  })
  .where({
    id: userID
  })
  .returning('*')
  .then((user) =&gt; {
    res.status(200).json({
      status: 'success',
      data: user
    });
  })
  .catch((err) =&gt; {
    res.status(500).json({
      status: 'error',
      data: err
    });
  });
});
</code></pre>

<h3>DELETE</h3>

<p>Test:</p>

<pre><code class="javascript">describe('DELETE /api/v1/users/:id', () =&gt; {
  it('should respond with a success message along with a single user that was deleted', (done) =&gt; {
    knex('users')
    .select('*')
    .then((users) =&gt; {
      const userObject = users[0];
      const lengthBeforeDelete = users.length;
      chai.request(server)
      .delete(`/api/v1/users/${userObject.id}`)
      .end((err, res) =&gt; {
        // there should be no errors
        should.not.exist(err);
        // there should be a 200 status code
        res.status.should.equal(200);
        // the response should be JSON
        res.type.should.equal('application/json');
        // the JSON response body should have a
        // key-value pair of {"status": "success"}
        res.body.status.should.eql('success');
        // the JSON response body should have a
        // key-value pair of {"data": 1 user object}
        res.body.data[0].should.include.keys(
          'id', 'username', 'email', 'created_at'
        );
        // ensure the user was in fact deleted
        knex('users').select('*')
        .then((updatedUsers) =&gt; {
          updatedUsers.length.should.eql(lengthBeforeDelete - 1);
          done();
        });
      });
    });
  });
});
</code></pre>

<p>Code:</p>

<pre><code class="javascript">// *** delete a user *** //
router.delete('/:id', (req, res, next) =&gt; {
  const userID = parseInt(req.params.id);
  knex('users')
  .del()
  .where({
    id: userID
  })
  .returning('*')
  .then((user) =&gt; {
    res.status(200).json({
      status: 'success',
      data: user
    });
  })
  .catch((err) =&gt; {
    res.status(500).json({
      status: 'error',
      data: err
    });
  });
});
</code></pre>

<p>Run all your tests. All should pass.</p>

<h2>Unit Tests</h2>

<p>New business requirement!</p>

<p>We need a route to return all users created after a certain date. Since we already know how to write routes, let&rsquo;s add a helper function that takes an array of users and a year that then returns an array of users created on or after the specified date. We can then use this function in a future route handler.</p>

<p>Steps:</p>

<ol>
<li>Write a unit test</li>
<li>Run the tests (the unit test should fail)</li>
<li>Write the code to pass the test</li>
<li>Run the tests (all should pass!)</li>
</ol>


<h3>Write a unit test</h3>

<p>Create a new file called <em>controllers.users.test.js</em> within the &ldquo;test/unit/&rdquo; directory:</p>

<pre><code class="javascript">process.env.NODE_ENV = 'test';

const chai = require('chai');
const should = chai.should();

const usersController = require('../../src/server/controllers/users');

describe('controllers : users', () =&gt; {

  describe('filterByYear()', () =&gt; {
    // add code here
  });

});
</code></pre>

<p>Now add the body of the test:</p>

<pre><code class="javascript">const userArray = [
  {
    id: 1,
    username: 'michael',
    email: 'michael@mherman.org',
    created_at: '2016-09-10T16:44:28.015Z'
  },
  {
    id: 2,
    username: 'mike',
    email: 'mike@mherman.org',
    created_at: '2015-09-10T16:44:28.015Z'
  },
  {
    id: 3,
    username: 'mike',
    email: 'mike@mherman.org',
    created_at: '2014-09-10T16:44:28.015Z'
  }
];
it('should return all users created on or after (&gt;=) specified year',
(done) =&gt; {
  usersController.filterByYear(userArray, 2015, (err, total) =&gt; {
    should.not.exist(err);
    total.length.should.eql(2);
    done();
  });
});
</code></pre>

<h4>What&rsquo;s happening?</h4>

<p>Within the <code>it</code> block we passed in the <code>userArray</code>, a year, and a callback function to a function called <code>filterByYear()</code>. This then asserts that a error does not exist and that the length of the response (<code>total</code>) is 2.</p>

<p>Run the tests. Watch them fail. Add the code&hellip;</p>

<h3>Write the code to pass the unit test</h3>

<p>Create a new controller within &ldquo;src/server/controllers&rdquo; called <em>users.js</em>:</p>

<pre><code class="javascript">function filterByYear(arrayOfUsers, year, callback) {
  const response = arrayOfUsers.filter((user) =&gt; {
    const date = new Date(user.created_at);
    return date.getFullYear() &gt;= year;
  });
  callback(null, response);
}

module.exports = {
  filterByYear
};
</code></pre>

<p>Confused? Add an inline comment above each line, describing <em>what</em> the code does and, in some cases, <em>why</em> the code does what it does.</p>

<p>Run the tests. Do they pass? They should.</p>

<p>Now you can use that function in a new route to finish the business requirement. Do this on your own. Be sure to write the integration test first!</p>

<h2>Test Fixtures</h2>

<p><a href="https://github.com/marak/Faker.js/">faker.js</a> is a powerful library for generating fake data. In our case, we can use faker to generate test data
for our unit tests. Such data is often called a <a href="https://en.wikipedia.org/wiki/Test_fixture">test fixture</a>.</p>

<p>Install faker:</p>

<pre><code class="sh">npm install faker@3.1.0 --save-dev
</code></pre>

<h3>Code</h3>

<p>Since we don&rsquo;t really (or maybe <em>really</em> don&rsquo;t?) know what the test is going to look like, let&rsquo;s start with writing a quick script to generate test data. Create a new file within the &ldquo;test&rdquo; directory called <em>generate.test.data.js</em>, and then add the following code to it:</p>

<pre><code class="javascript">const faker = require('faker');

function createUserObject(
  yearOne, yearTwo, amountToCreate, callback) {
  const userArray = [];
  for (var i = 1; i &lt;= amountToCreate; i++) {
    userArray.push({
      id: faker.random.uuid(),
      username: faker.internet.userName(),
      email: faker.internet.email(),
      created_at: faker.date.between(yearOne, yearTwo)
    });
  }
  callback(null, userArray);
}
</code></pre>

<p>This function generates an array of user objects, each object is generated randomly using faker.js <a href="https://github.com/marak/Faker.js/#api">methods</a>. We could use that data directly in the test, but let&rsquo;s first save the data to a fixture file for easy use. Update the file like so:</p>

<pre><code class="javascript">const faker = require('faker');
const fs = require('fs');
const path = require('path');

function createUserObject(
  yearOne, yearTwo, amountToCreate, callback) {
  const userArray = [];
  for (var i = 1; i &lt;= amountToCreate; i++) {
    userArray.push({
      id: faker.random.uuid(),
      username: faker.internet.userName(),
      email: faker.internet.email(),
      created_at: faker.date.between(yearOne, yearTwo)
    });
  }
  callback(null, userArray);
}

createUserObject(2010, 2014, 10, (err, beforeDates) =&gt; {
  if (!err) {
    createUserObject(2015, 2016, 5, (err, onOrAfterDates) =&gt; {
      const userArray = beforeDates.concat(onOrAfterDates);
      fs.writeFile(
        path.join(__dirname, 'test.data.json'),
        JSON.stringify(userArray, null, 2),
        (err) =&gt; {
        if (!err) {
          return true;
        }
      });
    });
  }
  return false;
});
</code></pre>

<p>Now we can generate two arrays -</p>

<ol>
<li>One with data <em>before</em> a specific date</li>
<li>The other with data <em>on or after</em> that specific date</li>
</ol>


<p>Before saving to a file, we concatenated the two arrays into one. You&rsquo;ll see why this was necessary when the test is created. For now, run the script from the project root:</p>

<pre><code class="sh">$ node test/generate.test.data.js
</code></pre>

<p>You should see a new fixture file called <em>test.data.json</em> in the &ldquo;test&rdquo; folder. The data in this file can now be used in a test.</p>

<h3>Test</h3>

<p>Add the following test to <em>controllers.users.test.js</em>:</p>

<pre><code class="javascript">describe('filterByYear() with helper', () =&gt; {
  it('should return all users created on or after (&gt;=) specified year',
  (done) =&gt; {
    const testDataFile = path.join(
      __dirname, '..', 'test.data.json');
    fs.readFile(testDataFile, 'utf8', (err, data) =&gt; {
      usersController.filterByYear(
        JSON.parse(data), 2015, (err, total) =&gt; {
        should.not.exist(err);
        total.length.should.eql(5);
        done();
      });
    });
  });
});
</code></pre>

<p>Make sure to require in <code>fs</code> and <code>path</code> at the top:</p>

<pre><code class="javascript">const fs = require('fs');
const path = require('path');
</code></pre>

<p>Run the tests again!</p>

<h2>Validation</h2>

<p>Thus far we have not tested for possible errors. For example, what happens if the email address provided with a POST request is not properly formatted? Or if an invalid ID is used with a PUT request?</p>

<p>We can start by validating parameters with <a href="https://github.com/ctavan/express-validator">express-validator</a>.</p>

<h3>Install</h3>

<pre><code class="sh">$ npm install express-validator@2.20.8 --save
</code></pre>

<p>Then <code>require</code> the module at the top of <em>src/server/config/main-config.js</em>:</p>

<pre><code class="javascript">const expressValidator = require('express-validator');
</code></pre>

<p>Mount the validator to the app middleware just below the body parser:</p>

<pre><code class="javascript">app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: false }));
app.use(expressValidator());
</code></pre>

<h3>Test</h3>

<p>Add the first test to the <code>GET /api/v1/users/:id'</code> describe block:</p>

<pre><code class="javascript">it('should throw an error if the user id is null', (done) =&gt; {
  chai.request(server)
  .get(`/api/v1/users/${null}`)
  .end((err, res) =&gt; {
    res.status.should.equal(400);
    res.body.message.should.eql('Validation failed');
    res.body.failures.length.should.eql(1);
    done();
  });
});
</code></pre>

<p>Add the second test to the <code>POST /api/v1/users</code> describe block:</p>

<pre><code class="javascript">it('should throw an error when a username is not provided', (done) =&gt; {
  chai.request(server)
  .post('/api/v1/users')
  .send({
    username: null,
    email: '111111'
  })
  .end((err, res) =&gt; {
    res.status.should.equal(400);
    res.body.message.should.eql('Validation failed');
    res.body.failures.length.should.eql(2);
    // ensure the user was not added
    knex('users')
    .select('*')
    .where({
      email: '111111'
    })
    .then((user) =&gt; {
      user.length.should.eql(0);
      done();
    });
  });
});
</code></pre>

<h3>Code</h3>

<p>To add the proper validation, create a new file called <em>validation.js</em> within the &ldquo;routes&rdquo; directory:</p>

<pre><code class="javascript">function validateUserResources(req, res, next) {
  if (req.method === 'GET') {
    req.checkParams('id', 'Must be valid').notEmpty().isInt();
  } else if (req.method === 'POST') {
    req.checkBody('username', 'Username cannot be empty').notEmpty();
    req.checkBody('email', 'Must be a valid email').isEmail();
  } else if (req.method === 'PUT') {
    req.checkParams('id', 'Must be valid').notEmpty().isInt();
    req.checkBody('username', 'Username cannot be empty').notEmpty();
    req.checkBody('email', 'Must be a valid email').isEmail();
  } else if (req.method === 'DELETE') {
    req.checkParams('id', 'Must be valid').notEmpty().isInt();
  }
  const errors = req.validationErrors();
  if (errors) {
    return res.status(400).json({
      message: 'Validation failed',
      failures: errors
    });
  } else {
    return next();
  }
}

module.exports = validateUserResources;
</code></pre>

<p>Here, with express-validator, parameters are validated using either <code>req.checkParams</code> or <code>req.checkBody</code> and then errors are aggregated together with <code>req.validationErrors()</code>.</p>

<p>Require this module in the user routes:</p>

<pre><code class="javascript">const userQueries = require('../db/queries.users');
</code></pre>

<p>Add the <code>validateUserResources</code> to all the route handlers except the handler to GET ALL users, like so:</p>

<pre><code class="javascript">// *** GET SINGLE user *** //
router.get('/:id',
  validate.validateUserResources,
  (req, res, next) =&gt; {
    ...
  })
</code></pre>

<p>Finish the remaining route handlers, and then run the tests. All should pass:</p>

<pre><code class="sh">jscs
  ✓ should pass for working directory (633ms)

routes : index
  GET /
    ✓ should render the index (71ms)
  GET /404
    ✓ should throw an error

routes : users
  GET /api/v1/users
    ✓ should respond with all users (53ms)
  GET /api/v1/users/:id
    ✓ should respond with a single user
    ✓ should throw an error if the user id is null
  POST /api/v1/users
    ✓ should respond with a success message along with a single user that was added (129ms)
    ✓ should throw an error when a username is not provided
  PUT /api/v1/users/:id
    ✓ should respond with a success message along with a single user that was updated
  DELETE /api/v1/users/:id
    ✓ should respond with a success message along with a single user that was deleted

jshint
  ✓ should pass for working directory (661ms)

controllers : index
  sum()
    ✓ should return a total
    ✓ should return an error

controllers : users
  filterByYear()
    ✓ should return all users created on or after (&gt;=) specified year
  filterByYear() with helper
    ✓ should return all users created on or after (&gt;=) specified year

15 passing (3s)
</code></pre>

<p>We are still not handling all errors. What else could go wrong? Think about edge cases. Then write tests. Do this on your own.</p>

<h2>Refactor</h2>

<p>Finally, let&rsquo;s make our code a bit more modular by refactoring out unnecessary logic from the route handlers.</p>

<p>Within the &ldquo;db&rdquo; folder, add a file called <em>queries.users.js</em>:</p>

<pre><code class="javascript">const knex = require('./knex');

function getAllUsers(callback) {
  return knex('users').select('*')
  .then((users) =&gt; {
    callback(null, users);
  })
  .catch((err) =&gt; {
    callback(err);
  });
}

module.exports = {
  getAllUsers
};
</code></pre>

<p>This function now handles all the knex logic, and it can now be used anywhere in the project. Be sure to update the route handler:</p>

<pre><code class="javascript">// *** GET ALL users *** //
router.get('/', (req, res, next) =&gt; {
  userQueries.getAllUsers((err, users) =&gt; {
    if (err) {
      res.status(500).json({
        status: 'error',
        data: err
      });
    } else {
      res.status(200).json({
        status: 'success',
        data: users
      });
    }
  });
});
</code></pre>

<p>Don&rsquo;t forget to add the requirement:</p>

<pre><code class="javascript">const userQueries = require('../db/queries.users');
</code></pre>

<p>Run the tests again. They all should still pass! Notice how we were able to refactor with confidence (without fear of the code breaking) since we had proper test coverage. Finish refactoring out all of the knex logic to <em>queries.users.js</em>. Test again when done.</p>

<h2>Conclusion</h2>

<p>Turn back to the objectives. Read each aloud to yourself. Can you put each one into action?</p>

<p>The testing process may seem daunting and unnecessary at first, but you will soon just how necessary they are as your projects grow and become more complex. Continue to practice testing by incorporating tests whenever you begin a new project.</p>

<p>The full code can be found in the <a href="https://github.com/mjhea0/express-testing-mocha-knex">express-testing-mocha-knex</a> repository.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swagger and NodeJS]]></title>
    <link href="http://mherman.org/blog/2016/05/26/swagger-and-nodejs/"/>
    <updated>2016-05-26T07:22:46-06:00</updated>
    <id>http://mherman.org/blog/2016/05/26/swagger-and-nodejs</id>
    <content type="html"><![CDATA[<p><strong>This tutorial details how to describe a RESTFul API using <a href="http://swagger.io/">Swagger</a> along with Node and Express.</strong></p>

<div style="text-align:center;">
  <img src="http://mherman.org/images/node-swagger.png" style="max-width: 100%; border:0; box-shadow: none;" alt="node swagger api">
</div>


<p><br></p>

<p>By the end of this tutorial, you will be able to&hellip;</p>

<ol>
<li>Describe the purpose of Swagger</li>
<li>Generate a <a href="http://swagger.io/specification/">Swagger Spec</a> based on an existing RESTful API developed with Node, Express, and Postgres</li>
<li>Set up the <a href="https://github.com/swagger-api/swagger-ui">Swagger UI</a> for testing and interacting with the API</li>
</ol>


<h2>Swagger</h2>

<p>Swagger is a <a href="http://swagger.io/specification/">specification</a> for describing, producing, consuming, testing, and visualizing a RESTful API. It provides a number of <a href="http://swagger.io/tools/">tools</a> for automatically generating documentation based on a given endpoint.</p>

<p>Now when you make changes to your code, your documentation is updated and synchronized with the API so that consumers can quickly learn which resources are available, how to access them, and what to expect (status code, content-type, etc.) when interacting with the various endpoints.</p>

<h2>Getting Started</h2>

<h3>Starting a New Project</h3>

<p>If you&rsquo;re starting a new project, you can easily generate the <a href="http://swagger.io/specification/">Swagger Specification</a> and project boilerplate using the <a href="http://swagger.io/swagger-editor/">Swagger Editor</a>. Test it out <a href="http://editor.swagger.io/#/">here</a>.</p>

<p>If you don&rsquo;t like the generated project structure, you can just export the JSON (or YAML) spec file and then use a custom generator, like <a href="https://github.com/krakenjs/swaggerize-express">Swaggerize Express</a>, to generate the boilerplate. Then when you need to make changes to the API, you can just update the spec file. Simple.</p>

<h3>Updating an Existing Project</h3>

<p>For this tutorial, we will be generating the Swagger spec based on the code from a previously created project that has the following RESTful endpoints:</p>

<table style="font-size:18px;border-spacing:12px 0px;border-collapse:separate;border:1px solid black;">
<thead>
<tr>
<th style="text-align:center"><strong>URL</strong></th>
<th style="text-align:center"><strong>HTTP Verb</strong></th>
<th style="text-align:center"><strong>Action</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>/api/puppies</td>
<td>GET</td>
<td>Return ALL puppies</td>
</tr>
<tr>
<td>/api/puppies/:id</td>
<td>GET</td>
<td>Return a SINGLE puppy</td>
</tr>
<tr>
<td>/api/puppies</td>
<td>POST</td>
<td>Add a puppy</td>
</tr>
<tr>
<td>/api/puppies/:id</td>
<td>PUT</td>
<td>Update a puppy</td>
</tr>
<tr>
<td>/api/puppies/:id</td>
<td>DELETE</td>
<td>Delete a puppy</td>
</tr>
</tbody>
</table>


<p>Clone down the project:</p>

<pre><code class="sh">$ git clone https://github.com/mjhea0/node-postgres-promises.git node-swagger-api
$ cd node-swagger-api
$ git checkout tags/v1 -b swagger
$ npm install
</code></pre>

<blockquote><p>Want to learn how this project was created? Check out the <a href="http://mherman.org/blog/2016/03/13/designing-a-restful-api-with-node-and-postgres/#.V0N4PZMrJE4">Designing a RESTful API With Node and Postgres</a> post.</p></blockquote>

<p>This project uses Postgres, so run create the database and apply the schema:</p>

<pre><code class="sh">$ psql -f puppies.sql
</code></pre>

<p>Run the server, and then navigate to <a href="http://localhost:3000/api/puppies">http://localhost:3000/api/puppies</a> in your browser of choice. You should see:</p>

<pre><code class="json">{
  status: "success",
  data: [
    {
      id: 1,
      name: "Tyler",
      breed: "Shih-tzu",
      age: 3,
      sex: "M"
    }
  ],
  message: "Retrieved ALL puppies"
}
</code></pre>

<p>Test out each endpoint to make sure everything works before moving on.</p>

<h2>Generating the Swagger Spec</h2>

<p>To generate the <a href="http://swagger.io/specification/">Swagger specification</a>, we will be using <a href="https://github.com/Surnet/swagger-jsdoc">swagger-jsdoc</a>.</p>

<p>Install swagger-jsdoc:</p>

<pre><code class="sh">$ npm install swagger-jsdoc@1.3.0 --save
</code></pre>

<p>Add the requirement to <em>app.js</em>:</p>

<pre><code class="javascript">var swaggerJSDoc = require('swagger-jsdoc');
</code></pre>

<p>Then add the following code to <em>app.js</em> just below <code>var app = express();</code>:</p>

<pre><code class="javascript">// swagger definition
var swaggerDefinition = {
  info: {
    title: 'Node Swagger API',
    version: '1.0.0',
    description: 'Demonstrating how to describe a RESTful API with Swagger',
  },
  host: 'localhost:3000',
  basePath: '/',
};

// options for the swagger docs
var options = {
  // import swaggerDefinitions
  swaggerDefinition: swaggerDefinition,
  // path to the API docs
  apis: ['./routes/*.js'],
};

// initialize swagger-jsdoc
var swaggerSpec = swaggerJSDoc(options);
</code></pre>

<p>Take note of the comments above. This code essentially initializes swagger-jsdoc and adds the appropriate metadata to the Swagger specification.</p>

<p>Add the route to serve up the Swagger spec:</p>

<pre><code class="javascript">// serve swagger
app.get('/swagger.json', function(req, res) {
  res.setHeader('Content-Type', 'application/json');
  res.send(swaggerSpec);
});
</code></pre>

<p>Fire up the server and navigate to <a href="http://localhost:3000/swagger.json">http://localhost:3000/swagger.json</a> to see the basic spec:</p>

<pre><code class="json">{
  info: {
    title: "Node Swagger API",
    version: "1.0.0",
    description: "Demonstrating how to describe a RESTful API with Swagger"
  },
  host: "localhost:3000",
  basePath: "/",
  swagger: "2.0",
  paths: { },
  definitions: { },
  responses: { },
  parameters: { },
  securityDefinitions: { }
}
</code></pre>

<p>Now we need to update the routes&hellip;</p>

<h2>Updating the Route Handlers</h2>

<p>swagger-jsdoc uses <a href="http://usejsdoc.org/">JSDoc</a>-style comments to generate the Swagger spec. So, add such comments, in YAML, to the route handlers that describe their functionality.</p>

<h3>GET ALL</h3>

<p>Add the comments in <em>/routes/index.js</em> just above the handler, like so:</p>

<pre><code class="javascript">/**
 * @swagger
 * /api/puppies:
 *   get:
 *     tags:
 *       - Puppies
 *     description: Returns all puppies
 *     produces:
 *       - application/json
 *     responses:
 *       200:
 *         description: An array of puppies
 *         schema:
 *           $ref: '#/definitions/Puppy'
 */
router.get('/api/puppies', db.getAllPuppies);
</code></pre>

<p>This should be fairly self-explanatory. We have an <code>/api/puppies</code> endpoint that returns a 200 response to a GET request. The <code>$ref</code> is used to re-use definitions to keep the code DRY.</p>

<p>Add the following code above the previous code:</p>

<pre><code class="javascript">/**
 * @swagger
 * definition:
 *   Puppy:
 *     properties:
 *       name:
 *         type: string
 *       breed:
 *         type: string
 *       age:
 *         type: integer
 *       sex:
 *         type: string
 */
</code></pre>

<p>Now we can use that definition for each of the HTTP methods.</p>

<p>For more information and examples, please see the <a href="http://swagger.io/specification/">Swagger Specification</a>.</p>

<h3>GET Single</h3>

<pre><code class="javascript">/**
 * @swagger
 * /api/puppies/{id}:
 *   get:
 *     tags:
 *       - Puppies
 *     description: Returns a single puppy
 *     produces:
 *       - application/json
 *     parameters:
 *       - name: id
 *         description: Puppy's id
 *         in: path
 *         required: true
 *         type: integer
 *     responses:
 *       200:
 *         description: A single puppy
 *         schema:
 *           $ref: '#/definitions/Puppy'
 */
</code></pre>

<h3>POST</h3>

<pre><code class="javascript">/**
 * @swagger
 * /api/puppies:
 *   post:
 *     tags:
 *       - Puppies
 *     description: Creates a new puppy
 *     produces:
 *       - application/json
 *     parameters:
 *       - name: puppy
 *         description: Puppy object
 *         in: body
 *         required: true
 *         schema:
 *           $ref: '#/definitions/Puppy'
 *     responses:
 *       200:
 *         description: Successfully created
 */
</code></pre>

<h3>PUT</h3>

<pre><code class="javascript">/**
 * @swagger
 * /api/puppies/{id}:
 *   put:
 *     tags: Puppies
 *     description: Updates a single puppy
 *     produces: application/json
 *     parameters:
 *       name: puppy
 *       in: body
 *       description: Fields for the Puppy resource
 *       schema:
 *         type: array
 *         $ref: '#/definitions/Puppy'
 *     responses:
 *       200:
 *         description: Successfully updated
 */
</code></pre>

<h3>DELETE</h3>

<pre><code class="javascript">/**
 * @swagger
 * /api/puppies/{id}:
 *   delete:
 *     tags:
 *       - Puppies
 *     description: Deletes a single puppy
 *     produces:
 *       - application/json
 *     parameters:
 *       - name: id
 *         description: Puppy's id
 *         in: path
 *         required: true
 *         type: integer
 *     responses:
 *       200:
 *         description: Successfully deleted
 */
</code></pre>

<p>Check out the updated spec at <a href="http://localhost:3000/swagger.json">http://localhost:3000/swagger.json</a>.</p>

<h2>Adding Swagger UI</h2>

<p>Finally, download the <a href="https://github.com/swagger-api/swagger-ui">Swagger UI repo</a>, add the &ldquo;dist&rdquo; folder from the downloaded repo to the &ldquo;public&rdquo; folder in the project directory, and then rename the directory to &ldquo;api-docs&rdquo;.</p>

<p>Now within <em>index.html</em> inside the &ldquo;api-docs&rdquo; directory just update this line-</p>

<pre><code class="html">url = "http://petstore.swagger.io/v2/swagger.json";
</code></pre>

<p>To-</p>

<pre><code class="html">url = "http://localhost:3000/swagger.json";
</code></pre>

<p>Finally, navigate to <a href="http://localhost:3000/api-docs/">http://localhost:3000/api-docs/</a> in your browser to test out the API endpoints:</p>

<div style="text-align:center;">
  <img src="http://mherman.org/images/swagger-ui.png" style="max-width: 100%; border:0; box-shadow: none;" alt="Swagger UI">
</div>


<p><br><hr><br></p>

<p>Download the <a href="https://github.com/mjhea0/node-swagger-api">code</a> from the repo. Cheers!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test Driven Development With Node, Postgres, and Knex (Red/Green/Refactor)]]></title>
    <link href="http://mherman.org/blog/2016/04/28/test-driven-development-with-node/"/>
    <updated>2016-04-28T08:07:39-06:00</updated>
    <id>http://mherman.org/blog/2016/04/28/test-driven-development-with-node</id>
    <content type="html"><![CDATA[<p><strong>Today we will be developing a RESTful API with <a href="https://nodejs.org">Node</a>, <a href="http://expressjs.com/">Express</a>, <a href="http://knexjs.org/">Knex</a> - a SQL query builder - and <a href="http://www.postgresql.org/">PostgreSQL</a> using test driven development (TDD).</strong></p>

<p>This post assumes prior knowledge of:</p>

<ul>
<li>SQL</li>
<li>Node/Express</li>
<li>NPM Packages</li>
</ul>


<h2>Getting Started</h2>

<p>Before we can start testing and writing code we need to set up our project, a database, and all the required dependencies&hellip;</p>

<h3>Project Setup</h3>

<p>First, we need to create a basic boilerplate Express application. To do this, first install the <a href="http://expressjs.com/en/starter/generator.html">Express-Generator</a> globally:</p>

<pre><code class="sh">$ npm install express-generator@4.13.1 -g
</code></pre>

<p>We can now generate a basic Express application boilerplate:</p>

<pre><code class="sh">$ express mocha-chai-knex
$ cd mocha-chai-knex
$ npm install
</code></pre>

<p>Run <code>npm start</code> to ensure the application works. Once the server is running, navigate to <a href="http://localhost:3000/">http://localhost:3000/</a>, and you should see &lsquo;Welcome to Express&rsquo; on the main page.</p>

<h3>Database Setup</h3>

<p>Start by installing <a href="http://www.postgresql.org/">PostgreSQL</a> from the official <a href="http://www.postgresql.org/download/">download page</a>.</p>

<blockquote><p>If you&rsquo;re on a Mac we recommend using <a href="http://postgresapp.com/">Postgress.app</a>.</p></blockquote>

<p>As noted, we&rsquo;ll be using <a href="http://knexjs.org/">Knex</a> to interact with our database. Knex is a SQL query builder that we can use with PostgreSQL to handle migrations, manage the schema, and query the database.</p>

<p>Let&rsquo;s start by installing <a href="http://knexjs.org/">Knex</a> and <a href="https://github.com/brianc/node-postgres">pg</a>, a module for interacting with Postgres.</p>

<pre><code class="sh">$ npm install pg@4.5.3 knex@0.10.0 --save
$ npm install knex@0.10.0 -g
</code></pre>

<p>Next, we need to create two new databases, one for developing and the other for testing. Open <a href="http://www.postgresql.org/docs/9.5/static/app-psql.html">psql</a> in the terminal, and create a new database:</p>

<pre><code class="sh">$ psql
psql (9.4.5)
Type "help" for help.

# CREATE DATABASE mocha_chai_tv_shows;
CREATE DATABASE
# CREATE DATABASE mocha_chai_tv_shows_test;
CREATE DATABASE
# \q
</code></pre>

<p>With out database created we can initialize Knex.</p>

<h3>Knex Setup</h3>

<p>Run the following command to create <em>knexfile.js</em>, the <a href="http://knexjs.org/#knexfile">Knex configuration file</a>:</p>

<pre><code class="sh">$ knex init
Created ./knexfile.js
</code></pre>

<p>Update the default info to:</p>

<pre><code class="javascript">module.exports = {
  test: {
    client: 'pg',
    connection: 'postgres://localhost/mocha_chai_tv_shows_test',
    migrations: {
      directory: __dirname + '/db/migrations'
    },
    seeds: {
      directory: __dirname + '/db/seeds/test'
    }
  },
  development: {
    client: 'pg',
    connection: 'postgres://localhost/mocha_chai_tv_shows',
    migrations: {
      directory: __dirname + '/db/migrations'
    },
    seeds: {
      directory: __dirname + '/db/seeds/development'
    }
  },
  production: {
    client: 'pg',
    connection: process.env.DATABASE_URL,
    migrations: {
      directory: __dirname + '/db/migrations'
    },
    seeds: {
      directory: __dirname + '/db/seeds/production'
    }
  }
};
</code></pre>

<p>This sets up three different settings for our databases:</p>

<ol>
<li><code>test</code> - for testing on the local environment</li>
<li><code>development</code> - for developing, again on the local environment</li>
<li><code>production</code> - for the production environment</li>
</ol>


<p>Now, we can add schema migrations. <a href="https://en.wikipedia.org/wiki/Schema_migration">Migrations</a> allow us to define and update the database schema. We can create migrations in the terminal like so:</p>

<pre><code class="sh">$ knex migrate:make tv_shows
</code></pre>

<p>Now, knex has automatically added in a &ldquo;db/migrations&rdquo; folder, with a timestamped file inside of it. Here is where we define our schema. It should just contain two empty functions at the moment.</p>

<p> Let&rsquo;s add in our code to create and drop tables.</p>

<pre><code class="javascript">exports.up = function(knex, Promise) {
  return knex.schema.createTable('shows', function(table){
    table.increments();
    table.string('name').notNullable().unique();
    table.string('channel').notNullable();
    table.string('genre').notNullable();
    table.integer('rating').notNullable();
    table.boolean('explicit').notNullable();
  });
};

exports.down = function(knex, Promise) {
  return knex.schema.dropTable('shows');
};
</code></pre>

<p>Here, the <code>up</code> function creates the <code>shows</code> table while the <code>down</code> function drops the table. So we now have a schema defined, and a migration file ready to create that schema.</p>

<p>Create a new file called <em>knex.js</em> inside the &ldquo;db&rdquo; folder. In this file we specify the environment (<code>test</code>, <code>development</code>, or <code>production</code>), require the <em>knexfile.js</em>, and export the configuration (based on the environment) for our database:</p>

<pre><code class="javascript">var environment = process.env.NODE_ENV || 'development';
var config = require('../knexfile.js')[environment];

module.exports = require('knex')(config);
</code></pre>

<p>Apply the migrations to both databases:</p>

<pre><code class="sh">$ knex migrate:latest --env development
$ knex migrate:latest --env test
</code></pre>

<h3>Knex Seeds</h3>

<p><a href="https://en.wikipedia.org/wiki/Database_seeding">Seeding</a> is simply the process of populating the database with initial data. Knex utilizes <a href="http://knexjs.org/#Seeds-CLI">seed files</a> for this.</p>

<p>Run the following in your terminal to create a seed for development:</p>

<pre><code class="sh">$ knex seed:make shows_seed --env development
</code></pre>

<p>This will generate a folder called &ldquo;seeds/development&rdquo; in the &ldquo;db&rdquo; directory of your project, and in that file there will be a boilerplate setup for inserting data into the database:</p>

<pre><code class="javascript">exports.seed = function(knex, Promise) {
  return Promise.join(
    // Deletes ALL existing entries
    knex('table_name').del(),

    // Inserts seed entries
    knex('table_name').insert({id: 1, colName: 'rowValue'}),
    knex('table_name').insert({id: 2, colName: 'rowValue2'}),
    knex('table_name').insert({id: 3, colName: 'rowValue3'})
  );
};
</code></pre>

<p>Let&rsquo;s change the file so we&rsquo;re inserting relevant data. Notice how there&rsquo;s also built-in promises so that the data will be seeded in the order that we specify:</p>

<pre><code class="javascript">exports.seed = function(knex, Promise) {
  return knex('shows').del() // Deletes ALL existing entries
    .then(function() { // Inserts seed entries one by one in series
      return knex('shows').insert({
        name: 'Suits',
        channel: 'USA Network',
        genre: 'Drama',
        rating: 3,
        explicit: false
      });
    }).then(function () {
      return knex('shows').insert({
        name: 'Game of Thrones',
        channel: 'HBO',
        genre: 'Fantasy',
        rating: 5,
        explicit: true
      });
    }).then(function () {
      return knex('shows').insert({
        name: 'South Park',
        channel: 'Comedy Central',
        genre: 'Comedy',
        rating: 4,
        explicit: true
      });
    }).then(function () {
      return knex('shows').insert({
        name: 'Mad Men',
        channel: 'AMC',
        genre: 'Drama',
        rating: 3,
        explicit: false
      });
    });
};
</code></pre>

<p>Since JavaScript is asynchronous, the order that data is inserted can sometimes change. We want to make sure that the data is in the same order each time we run our seed file(s).</p>

<p>Run the seed file:</p>

<pre><code class="sh">$ knex seed:run --env development
</code></pre>

<p>Before moving on, follow the same process for the test seed. Just use the same data as the development seed.</p>

<h3>Mocha/Chai Setup</h3>

<p>With the database set up with data in it, we can start setting up our tests. Start by installing <a href="http://mochajs.org/">Mocha</a> (test runner) and <a href="http://chaijs.com/">Chai</a> (<a href="https://en.wikipedia.org/wiki/Assertion_(software_development">assertion</a>) as well as <a href="https://github.com/chaijs/chai-http">ChaiHTTP</a> (HTTP request module for integration testing). Make sure to also install mocha globally, so that we can run tests from the command line.</p>

<pre><code class="sh">$ npm install mocha@2.4.5 -g
$ npm install mocha@2.4.5 chai@3.5.0 chai-http@2.0.1 --save-dev
</code></pre>

<p>By default, Mocha searches for tests with a &ldquo;test&rdquo; folder.</p>

<blockquote><p>This configuration can be changed with a <a href="https://mochajs.org/#mochaopts">mocha.opts</a> file</p></blockquote>

<p>Add a &ldquo;test&rdquo; folder to the root directory, and in that folder add a file called <em>routes.spec.js</em>. Then update <em>routes/index.js</em>:</p>

<pre><code class="javascript">var express = require('express');
var router = express.Router();


// *** GET all shows *** //
router.get('/shows', function(req, res, next) {
  res.send('send shows back');
});


module.exports = router;
</code></pre>

<p>Then within <em>app.js</em> update this line-</p>

<pre><code class="javascript">app.use('/', routes);
</code></pre>

<p>-to-</p>

<pre><code class="javascript">app.use('/api/v1', routes);
</code></pre>

<p>Now every single route in that file will be prefixed with &lsquo;/api/v1&rsquo; Try it out. Fire up the server, and navigate to <a href="http://localhost:3000/api/v1/shows">http://localhost:3000/api/v1shows</a>. You should see the string &lsquo;send shows back&rsquo; in the browser.</p>

<p>Finally, update this line in <em>app.js</em>-</p>

<pre><code class="javascript">app.use(logger('dev'));
</code></pre>

<p>-to-</p>

<pre><code class="javascript">if (process.env.NODE_ENV !== 'test') {
  app.use(logger('dev'));
}
</code></pre>

<p>This <a href="http://stackoverflow.com/a/22710649/1799408">prevents</a> application log messages from displaying in the stdout when the tests are ran, making it much easier to read the output.</p>

<p>And make sure the error handlers return JSON:</p>

<pre><code class="javascript">// error handlers

// development error handler
// will print stacktrace
if (app.get('env') === 'development') {
  app.use(function(err, req, res, next) {
    res.status(err.status || 500);
    res.json({
      message: err.message,
      error: err
    });
  });
}

// production error handler
// no stacktraces leaked to user
app.use(function(err, req, res, next) {
  res.status(err.status || 500);
  res.json({
    message: err.message,
    error: {}
  });
});
</code></pre>

<h2>Developing via TDD</h2>

<p>The premise behind Test Driven Development (TDD) is that you write tests first that fail which you then make pass. This process is often referred to as <a href="https://github.com/mjhea0/flaskr-tdd#test-driven-development">Red/Green/Refactor</a>.</p>

<h3>Test Setup</h3>

<p>In our test file, we&rsquo;ll need to start by including the necessary requirements for testing:</p>

<pre><code class="javascript">process.env.NODE_ENV = 'test';

var chai = require('chai');
var should = chai.should();
var chaiHttp = require('chai-http');
var server = require('../app');



chai.use(chaiHttp);

describe('API Routes', function() {

});
</code></pre>

<p>The first line sets the <code>NODE_ENV</code> to <code>test</code> so that the correct Knex config is used from <em>knexfile.js</em>. The next line requires <code>chai</code>, the assertion module, giving us access to all the <code>chai</code> methods - like <code>should()</code>.</p>

<blockquote><p>By utilizing <code>should()</code> we are using the <a href="http://chaijs.com/guide/styles/#should">should</a> assertion style. This is a personal preference. You could also use <a href="http://chaijs.com/guide/styles/#expect">expect</a> or <a href="http://chaijs.com/guide/styles/#assert">assert</a>.</p></blockquote>

<p>Then we require <code>chai-http</code>. This module allows us make http requests from within our test file. Next, we link to our app so that we can test the request-response cycle. Finally, the <code>describe</code> block underneath the requirements is the wrapper for the tests. Keep in mind that you can nest <code>describe</code> <a href="http://samwize.com/2014/02/08/a-guide-to-mochas-describe-it-and-setup-hooks/">blocks</a> to better organize your test structure by grouping similar tests together.</p>

<h3>GET all shows</h3>

<h4>Red</h4>

<p>In the first test case, which is nested inside the first <code>describe</code> block, we want to get ALL shows in our database:</p>

<pre><code class="javascript">describe('GET /api/v1/shows', function() {
  it('should return all shows', function(done) {
    chai.request(server)
    .get('/api/v1/shows')
    .end(function(err, res) {
    res.should.have.status(200);
    res.should.be.json; // jshint ignore:line
    res.body.should.be.a('array');
    res.body.length.should.equal(4);
    res.body[0].should.have.property('name');
    res.body[0].name.should.equal('Suits');
    res.body[0].should.have.property('channel');
    res.body[0].channel.should.equal('USA Network');
    res.body[0].should.have.property('genre');
    res.body[0].genre.should.equal('Drama');
    res.body[0].should.have.property('rating');
    res.body[0].rating.should.equal(3);
    res.body[0].should.have.property('explicit');
    res.body[0].explicit.should.equal(false);
    done();
    });
  });
});
</code></pre>

<p>So, we have a <code>describe</code> block, and within that block, we have a single <code>it</code> statement. An <code>it</code> statement defines a specific test case. Here we hit the route &lsquo;/api/v1/shows&rsquo; with a GET request and test that the actual response is the same as the expected response.</p>

<p>Let&rsquo;s break this test down&hellip;</p>

<p>First, by removing the test conditions, we can look at the basic test structure:</p>

<pre><code class="javascript">it('should return all shows', function(done) {
  chai.request(server)
  .get('/api/v1/shows')
  .end(function(err, res) {
    done();
  });
});
</code></pre>

<p>Since this is an asynchronous test, we need some way of telling the callback function that the test is complete. This is where the <code>done()</code> callback method comes into play. Once called (or if a two second timer is exceeded), Mocha knows that the test is finished running, and it can move on to the next test.</p>

<p>Now let&rsquo;s look at the assertions:</p>

<pre><code class="javascript">res.should.have.status(200);
res.should.be.json; // jshint ignore:line
res.body.should.be.a('array');
res.body.length.should.equal(4);
res.body[0].should.have.property('name');
res.body[0].name.should.equal('Suits');
res.body[0].should.have.property('channel');
res.body[0].channel.should.equal('USA Network');
res.body[0].should.have.property('genre');
res.body[0].genre.should.equal('Drama');
res.body[0].should.have.property('rating');
res.body[0].rating.should.equal(3);
res.body[0].should.have.property('explicit');
res.body[0].explicit.should.equal(false);
</code></pre>

<p>The first thing we generally want to do, is test that the response has a status of 200. After that, these tests will change depending on what we return in the route handler. In this case, we are expecting that the content type is JSON and that the response body will be an array (of objects) and have a length equal to four (since there are four rows in the database). Finally, we are testing the keys and values within the first object of the array.</p>

<p>Try it out:</p>

<pre><code class="sh">$ mocha
</code></pre>

<p>If all went well you should see this:</p>

<pre><code class="sh">  API Routes
    GET /api/v1/shows
      1) should return all shows


  0 passing (59ms)
  1 failing

  1) API Routes GET /api/v1/shows should return all shows:
     Uncaught AssertionError: expected 'text/html; charset=utf-8'
     to include 'application/json'
</code></pre>

<p>Essentially, the second assertion - <code>res.should.be.json;</code> - failed since we are sending plain text back. This is good! Remember: Red-Green-Refactor!</p>

<p>We just need to update the route to get the test to pass.</p>

<h4>Green</h4>

<p>Before updating the route, let&rsquo;s create a queries module for handling, well, the database queries. Create a new file called <em>queries.js</em> with the &ldquo;db&rdquo; folder, and add the following code:</p>

<pre><code class="javascript">var knex = require('./knex.js');

function Shows() {
  return knex('shows');
}

// *** queries *** //

function getAll() {
  return Shows().select();
}


module.exports = {
  getAll: getAll
};
</code></pre>

<p>Here, we made a reference to our database via the Knex config file, added a helper function for simplifying each individual query, and finally queried the database to get ALL shows.</p>

<p>Update the route:</p>

<pre><code class="javascript">var express = require('express');
var router = express.Router();

var queries = require('../db/queries');


// *** GET all shows *** //
router.get('/shows', function(req, res, next) {
  queries.getAll()
  .then(function(shows) {
    res.status(200).json(shows);
  })
  .catch(function(error) {
    next(error);
  });
});


module.exports = router;
</code></pre>

<p>Run mocha again and see what happens:</p>

<pre><code class="sh">API Routes
  GET /api/v1/shows
    ✓ should return all shows (128ms)


1 passing (164ms)
</code></pre>

<p>Awesome! Just don&rsquo;t forget the last step - refactor.</p>

<h4>Refactor</h4>

<p>What&rsquo;s happening in the test database?</p>

<pre><code class="sh"># psql
psql (9.4.5)
Type "help" for help.

# \c mocha_chai_tv_shows_test
You are now connected to database "mocha_chai_tv_shows".
mocha_chai_tv_shows=# SELECT * FROM shows;
 id |      name       |    channel     |  genre  | rating | explicit
----+-----------------+----------------+---------+--------+----------
  1 | Suits           | USA Network    | Drama   |      3 | f
  2 | Game of Thrones | HBO            | Fantasy |      5 | t
  3 | South Park      | Comedy Central | Comedy  |      4 | t
  4 | Mad Men         | AMC            | Drama   |      3 | f
(4 rows)

#\q
</code></pre>

<p>Since we seeded the database earlier, there&rsquo;s data already in there, which could affect other tests (especially when rows are added, changed, and/or dropped). In the test, we are asserting that the length of the array is four. Well, if we add an item then that&rsquo;s going to change the length, and that first test will fail.</p>

<p>Tests should be isolated from each other. So, we really should rollback the migrations before and after each test is ran, and then apply the migrations and re-seed the database before the next test is ran.</p>

<p>This is where <code>beforeEach</code> and <code>afterEach</code> come into play:</p>

<pre><code class="javascript">process.env.NODE_ENV = 'test';

var chai = require('chai');
var chaiHttp = require('chai-http');
var server = require('../app');
var knex = require('../db/knex');

var should = chai.should();

chai.use(chaiHttp);

describe('API Routes', function() {

  beforeEach(function(done) {
    knex.migrate.rollback()
    .then(function() {
      knex.migrate.latest()
      .then(function() {
        return knex.seed.run()
        .then(function() {
          done();
        });
      });
    });
  });

  afterEach(function(done) {
    knex.migrate.rollback()
    .then(function() {
      done();
    });
  });

  describe('Get all shows', function() {
    it('should get all shows', function(done) {
      chai.request(server)
      .get('/api/v1/shows')
      .end(function(err, res) {
        res.should.have.status(200);
        res.should.be.json; // jshint ignore:line
        res.body.should.be.a('array');
        res.body.length.should.equal(4);
        res.body[0].should.have.property('name');
        res.body[0].name.should.equal('Suits');
        res.body[0].should.have.property('channel');
        res.body[0].channel.should.equal('USA Network');
        res.body[0].should.have.property('genre');
        res.body[0].genre.should.equal('Drama');
        res.body[0].should.have.property('rating');
        res.body[0].rating.should.equal(3);
        res.body[0].should.have.property('explicit');
        res.body[0].explicit.should.equal(false);
        done();
      });
    });
  });

});
</code></pre>

<p>Now, the migrations will run and the database will be re-seeded before each nested <code>describe</code> block, and the migrations will be rolled back after each block (which will also drop the data).</p>

<blockquote><p>Why rollback before each test? If any errors occur during a test, it won&rsquo;t reach the <code>afterEach</code> block. So we want to make sure that if an error occurs we still rollback the database.</p></blockquote>

<p>Run the tests again:</p>

<pre><code class="sh">API Routes
  GET /api/v1/shows
    ✓ should return all shows (52ms)


1 passing (325ms)
</code></pre>

<p>1 down, 4 to go!!!</p>

<blockquote><p>Did you notice how the overall time is slightly slower? 325ms vs 164ms. This is because of the <code>beforeEach</code> and <code>afterEach</code>. Think about what&rsquo;s happening, and why this would slow down the tests.</p></blockquote>

<h3>GET single show</h3>

<p>We have our route and test built to get All shows, so the next step is to just get one show back.</p>

<h4>Red</h4>

<p>Based on our test seed, the first show that should (you never know for certain with async code) is <code>Suits</code>:</p>

<pre><code class="javascript">{
  name: 'Suits',
  channel: 'USA Network',
  genre: 'Drama',
  rating: 3,
  explicit: false
}
</code></pre>

<p>We can write out a test for a new route that will return just a single show and the meta information about it. Remember our last test? It returned an array of objects. This time it should be a <em>single</em> object since we will be searching for a <em>single</em> item in the database.</p>

<pre><code class="javascript">describe('GET /api/v1/shows/:id', function() {
  it('should return a single show', function(done) {
    chai.request(server)
    .get('/api/v1/shows/1')
    .end(function(err, res) {
      res.should.have.status(200);
      res.should.be.json; // jshint ignore:line
      res.body.should.be.a('object');
      res.body.should.have.property('name');
      res.body.name.should.equal('Suits');
      res.body.should.have.property('channel');
      res.body.channel.should.equal('USA Network');
      res.body.should.have.property('genre');
      res.body.genre.should.equal('Drama');
      res.body.should.have.property('rating');
      res.body.rating.should.equal(3);
      res.body.should.have.property('explicit');
      res.body.explicit.should.equal(false);
      done();
    });
  });
});
</code></pre>

<p>This is very similar to the previous test. We&rsquo;re still testing for a status code of 200, and the response should be JSON. This time, we expect that <code>res.body</code> is an object. Each of the properties afterwards should be the properties of the item with id &lsquo;1&rsquo; in the database. So now if we run the tests, the first assertion should fail because we haven&rsquo;t written our route yet:</p>

<pre><code class="sh">API Routes
  GET /api/v1/shows
    ✓ should return all shows
  GET /api/v1/shows/:id
    1) should return a single show


1 passing (383ms)
1 failing

1) API Routes GET /api/v1/shows/:id should return a single show:
   Uncaught AssertionError: expected { Object (domain, _events, ...) }
   to have status code 200 but got 404
</code></pre>

<h4>Green</h4>

<p>Add the query to <em>queries.js</em>, making sure to update <code>module.exports</code>:</p>

<pre><code class="javascript">function getSingle(showID) {
  return Shows().where('id', parseInt(showID)).first();
}


module.exports = {
  getAll: getAll,
  getSingle: getSingle
};
</code></pre>

<p>Then build out the route:</p>

<pre><code class="javascript">// *** GET single show *** //
router.get('/shows/:id', function(req, res, next) {
  queries.getSingle(req.params.id)
  .then(function(show) {
    res.status(200).json(show);
  })
  .catch(function(error) {
    next(error);
  });
});
</code></pre>

<p>Now run mocha, and let&rsquo;s see if that worked:</p>

<pre><code class="sh">API Routes
  GET /api/v1/shows
    ✓ should return all shows (54ms)
  GET /api/v1/shows/:id
    ✓ should return a single show


2 passing (499ms)
</code></pre>

<p>Two routes down, two tests passing.</p>

<h3>POST</h3>

<p>We now want to add an item to our database.</p>

<h4>Red</h4>

<p>For time&rsquo;s sake, write the test assuming you will get a JSON object back that contains the data added to the database:</p>

<pre><code class="javascript">describe('POST /api/v1/shows', function() {
  it('should add a show', function(done) {
    chai.request(server)
    .post('/api/v1/shows')
    .send({
      name: 'Family Guy',
      channel : 'Fox',
      genre: 'Comedy',
      rating: 4,
      explicit: true
    })
    .end(function(err, res) {
      res.should.have.status(200);
      res.should.be.json; // jshint ignore:line
      res.body.should.be.a('object');
      res.body.should.have.property('name');
      res.body.name.should.equal('Family Guy');
      res.body.should.have.property('channel');
      res.body.channel.should.equal('Fox');
      res.body.should.have.property('genre');
      res.body.genre.should.equal('Comedy');
      res.body.should.have.property('rating');
      res.body.rating.should.equal(4);
      res.body.should.have.property('explicit');
      res.body.explicit.should.equal(true);
      done();
    });
  });
  });
</code></pre>

<p>You can see here that our test block is slightly different than the previous two since we need to send information with the request to replicate how a client might send information to the server.</p>

<h4>Green</h4>

<p>With the test written and failing (did you remember to run the tests?), we can write the query and add the route (notice the pattern yet?).</p>

<p>Query:</p>

<pre><code class="javascript">function add() {
  return Shows().insert(show, 'id');
}
</code></pre>

<p>Route:</p>

<pre><code class="javascript">// *** add show *** //
router.post('/shows', function(req, res, next) {
  queries.add(req.body)
  .then(function(showID) {
    return queries.getSingle(showID);
  })
  .then(function(show) {
    res.status(200).json(show);
  })
  .catch(function(error) {
    next(error);
  });
});
</code></pre>

<p><code>.insert()</code> returns an array containing the unique ID of the newly added item, so in order to return the actual data, we utilized the <code>getSingle()</code> query. This also ensures that the data has been inserted into the database correctly.</p>

<p>Do the tests pass?</p>

<pre><code class="sh">API Routes
  GET /api/v1/shows
    ✓ should return all shows (50ms)
  GET /api/v1/shows/:id
    ✓ should return a single show
  POST /api/v1/shows
    ✓ should add a show (71ms)


3 passing (791ms)
</code></pre>

<p>Excellent. Just two routes left to go.</p>

<h3>PUT</h3>

<p>We need to test the edit route.</p>

<h4>Red</h4>

<p>Similar to our POST route we will need to send data to the server. In this case, we&rsquo;ll utilize the ID of an existing show in the database and send along an object with the updated fields. Then we&rsquo;ll assert that the show has been updated correctly.</p>

<pre><code class="javascript">describe('PUT /api/v1/shows/:id', function() {
  it('should update a show', function(done) {
    chai.request(server)
    .put('/api/v1/shows/1')
    .send({
      rating: 4,
      explicit: true
    })
    .end(function(err, res) {
      res.should.have.status(200);
      res.should.be.json; // jshint ignore:line
      res.body.should.be.a('object');
      res.body.should.have.property('name');
      res.body.name.should.equal('Suits');
      res.body.should.have.property('channel');
      res.body.channel.should.equal('USA Network');
      res.body.should.have.property('genre');
      res.body.genre.should.equal('Drama');
      res.body.should.have.property('rating');
      res.body.rating.should.equal(4);
      res.body.should.have.property('explicit');
      res.body.explicit.should.equal(true);
      done();
    });
  });
});
</code></pre>

<p>So here we are stating that the response body should contain the updated object from the database.</p>

<h4>Green</h4>

<p>You know the drill - Start with the query:</p>

<pre><code class="javascript">function update(showID, updates) {
  return Shows().where('id', parseInt(showID)).update(updates);
}
</code></pre>

<p>Then update the route:</p>

<pre><code class="javascript">// *** update show *** //
router.put('/shows/:id', function(req, res, next) {
  queries.update(req.params.id, req.body)
  .then(function() {
    return queries.getSingle(req.params.id);
  })
  .then(function(show) {
    res.status(200).json(show);
  })
  .catch(function(error) {
    next(error);
  });
});
</code></pre>

<p>Here, we again make two calls to the database. Once we&rsquo;ve updated the item, we then nest another query to get that same item - which we then check to ensure that it has in fact been updated correctly.</p>

<p>The tests should pass.</p>

<h4>Refactor</h4>

<p>What happens if we try to change the ID? Update the test:</p>

<pre><code class="javascript">describe('PUT /api/v1/shows/:id', function() {
  it('should update a show', function(done) {
    chai.request(server)
    .put('/api/v1/shows/1')
    .send({
      id: 20,
      rating: 4,
      explicit: true
    })
    .end(function(err, res) {
      res.should.have.status(200);
      res.should.be.json; // jshint ignore:line
      res.body.should.be.a('object');
      res.body.should.have.property('name');
      res.body.name.should.equal('Suits');
      res.body.should.have.property('channel');
      res.body.channel.should.equal('USA Network');
      res.body.should.have.property('genre');
      res.body.genre.should.equal('Drama');
      res.body.should.have.property('rating');
      res.body.rating.should.equal(4);
      res.body.should.have.property('explicit');
      res.body.explicit.should.equal(true);
      done();
    });
  });
});
</code></pre>

<p>Run the tests now and they should fail:</p>

<pre><code class="sh">API Routes
  GET /api/v1/shows
    ✓ should return all shows (43ms)
  GET /api/v1/shows/:id
    ✓ should return a single show
  POST /api/v1/shows
    ✓ should add a show (50ms)
  PUT /api/v1/shows/:id
    1) should update a show


3 passing (804ms)
1 failing

1) API Routes PUT /api/v1/shows/:id should update a show:
   Uncaught AssertionError: expected '' to be an object
</code></pre>

<p>Why? Because the updated ID of the test does not equal the ID passed in as a query parameter. What does this all mean? The unique ID should never change (unless it&rsquo;s removed altogether).</p>

<pre><code class="javascript">// *** update show *** //
router.put('/shows/:id', function(req, res, next) {
  if(req.body.hasOwnProperty('id')) {
    return res.status(422).json({
      error: 'You cannot update the id field'
    });
  }
  queries.update(req.params.id, req.body)
  .then(function() {
    return queries.getSingle(req.params.id);
  })
  .then(function(show) {
    res.status(200).json(show);
  })
  .catch(function(error) {
    next(error);
  });
});
</code></pre>

<p>Now, let&rsquo;s revert the changes in the test, by removing <code>id: 20,</code>,  and add a new test:</p>

<pre><code class="javascript">describe('PUT /api/v1/shows/:id', function() {
  it('should update a show', function(done) {
    chai.request(server)
    .put('/api/v1/shows/1')
    .send({
      rating: 4,
      explicit: true
    })
    .end(function(err, res) {
      res.should.have.status(200);
      res.should.be.json; // jshint ignore:line
      res.body.should.be.a('object');
      res.body.should.have.property('name');
      res.body.name.should.equal('Suits');
      res.body.should.have.property('channel');
      res.body.channel.should.equal('USA Network');
      res.body.should.have.property('genre');
      res.body.genre.should.equal('Drama');
      res.body.should.have.property('rating');
      res.body.rating.should.equal(4);
      res.body.should.have.property('explicit');
      res.body.explicit.should.equal(true);
      done();
    });
  });
  it('should NOT update a show if the id field is part of the request', function(done) {
    chai.request(server)
    .put('/api/v1/shows/1')
    .send({
      id: 20,
      rating: 4,
      explicit: true
    })
    .end(function(err, res) {
      res.should.have.status(422);
      res.should.be.json; // jshint ignore:line
      res.body.should.be.a('object');
      res.body.should.have.property('error');
      res.body.error.should.equal('You cannot update the id field');
      done();
    });
  });
});
</code></pre>

<p>Run the tests:</p>

<pre><code class="sh">API Routes
  GET /api/v1/shows
    ✓ should return all shows (49ms)
  GET /api/v1/shows/:id
    ✓ should return a single show
  POST /api/v1/shows
    ✓ should add a show (51ms)
  PUT /api/v1/shows/:id
    ✓ should update a show
    ✓ should NOT update a show if the id field is part of the request
</code></pre>

<p>Boom!</p>

<h3>DELETE</h3>

<p>Now on to the final test - the delete.</p>

<h4>Red</h4>

<p>Again, let&rsquo;s use the ID of the first item in our database as the starting point for the test:</p>

<pre><code class="javascript">describe('DELETE /api/v1/shows/:id', function() {
  it('should delete a show', function(done) {
    chai.request(server)
    .delete('/api/v1/shows/1')
    .end(function(error, response) {
      response.should.have.status(200);
      response.should.be.json; // jshint ignore:line
      response.body.should.be.a('object');
      response.body.should.have.property('name');
      response.body.name.should.equal('Suits');
      response.body.should.have.property('channel');
      response.body.channel.should.equal('USA Network');
      response.body.should.have.property('genre');
      response.body.genre.should.equal('Drama');
      response.body.should.have.property('rating');
      response.body.rating.should.equal(3);
      response.body.should.have.property('explicit');
      response.body.explicit.should.equal(false);
      chai.request(server)
      .get('/api/v1/shows')
      .end(function(err, res) {
        res.should.have.status(200);
        res.should.be.json; // jshint ignore:line
        res.body.should.be.a('array');
        res.body.length.should.equal(3);
        res.body[0].should.have.property('name');
        res.body[0].name.should.equal('Game of Thrones');
        res.body[0].should.have.property('channel');
        res.body[0].channel.should.equal('HBO');
        res.body[0].should.have.property('genre');
        res.body[0].genre.should.equal('Fantasy');
        res.body[0].should.have.property('rating');
        res.body[0].rating.should.equal(5);
        res.body[0].should.have.property('explicit');
        res.body[0].explicit.should.equal(true);
        done();
      });
    });
  });
});
</code></pre>

<p>The test ensure that the deleted show is returned and that the database no longer contains the show.</p>

<h4>Green</h4>

<p>Query:</p>

<pre><code class="javascript">function deleteItem(showID) {
  return Shows().where('id', parseInt(showID)).del();
}
</code></pre>

<p>Route:</p>

<pre><code class="javascript">// *** delete show *** //
router.delete('/shows/:id', function(req, res, next) {
  queries.getSingle(req.params.id)
  .then(function(show) {
    queries.deleteItem(req.params.id)
    .then(function() {
      res.status(200).json(show);
    })
    .catch(function(error) {
      next(error);
    });
  }).catch(function(error) {
    next(error);
  });
});
</code></pre>

<p>The Knex <code>delete()</code> function returns a number indicating the number of rows in the database that have been affected, so to return the deleted object, we must query for it first.</p>

<p>Let&rsquo;s run those tests!!</p>

<pre><code class="sh">API Routes
  GET /api/v1/shows
    ✓ should return all shows (69ms)
  GET /api/v1/shows/:id
    ✓ should return a single show
  POST /api/v1/shows
    ✓ should add a show (54ms)
  PUT /api/v1/shows/:id
    ✓ should update a show
    ✓ should NOT update a show if the id field is part of the request
  DELETE /api/v1/shows/:id
    ✓ should delete a show


6 passing (1s)
</code></pre>

<p>6 tests written. 5 routes built. All tests passing!</p>

<h2>Conclusion</h2>

<p>So there you have it: A test-first approach to developing a RESTful API. Are we done? Not quite since we are not handling or testing for all possible errors.</p>

<p>For example, what would happen if we tried to POST an item without all the required fields? Or if we tried to delete an item that isn&rsquo;t in the database? Sure the <code>catch()</code> methods will handle these, but they are simply passing the request to the built-in error handlers. We should handle these better in the routes and throw back appropriate error messages and status codes.</p>

<p>Try this out on your own. Be sure to grab the code from the <a href="https://github.com/mjhea0/mocha-chai-knex">repository</a>. Cheers!</p>

<p><br></p>

<p style="font-size: 14px;">
  <em>Edits made by <a href="https://www.linkedin.com/in/bbouley">Bradley Bouley</a>. Thank you!</em>
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Designing a RESTful API With Node and Postgres]]></title>
    <link href="http://mherman.org/blog/2016/03/13/designing-a-restful-api-with-node-and-postgres/"/>
    <updated>2016-03-13T07:56:00-06:00</updated>
    <id>http://mherman.org/blog/2016/03/13/designing-a-restful-api-with-node-and-postgres</id>
    <content type="html"><![CDATA[<p><strong>In this tutorial we&rsquo;ll create a RESTful web service with JavaScript, Node, Express, Postgres, and pg-promise.</strong></p>

<div style="text-align:center;">
  <img src="http://mherman.org/images/node-restful-api.png" style="max-width: 100%; border:0; box-shadow: none;" alt="node restful api">
</div>


<p><br><hr></p>

<p>Our app will include the following endpoints:</p>

<table style="font-size:18px;border-spacing:12px 0px;border-collapse:separate;border:1px solid black;">
<thead>
<tr>
<th style="text-align:center"><strong>URL</strong></th>
<th style="text-align:center"><strong>HTTP Verb</strong></th>
<th style="text-align:center"><strong>Action</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>/api/puppies</td>
<td>GET</td>
<td>Return ALL puppies</td>
</tr>
<tr>
<td>/api/puppies/:id</td>
<td>GET</td>
<td>Return a SINGLE puppy</td>
</tr>
<tr>
<td>/api/puppies</td>
<td>POST</td>
<td>Add a puppy</td>
</tr>
<tr>
<td>/api/puppies/:id</td>
<td>PUT</td>
<td>Update a puppy</td>
</tr>
<tr>
<td>/api/puppies/:id</td>
<td>DELETE</td>
<td>Delete a puppy</td>
</tr>
</tbody>
</table>


<p><br></p>

<blockquote><p>This tutorial uses the following tools and technologies - Node.js v<a href="https://nodejs.org/en/blog/release/v4.3.1/">4.3.1</a>, express-generator v<a href="https://github.com/expressjs/generator/releases/tag/v4.13.1">4.13.1</a>, pg-promise v<a href="https://github.com/vitaly-t/pg-promise/releases/tag/v.3.2.3">3.2.3</a>, PostgreSQL v<a href="http://www.postgresql.org/docs/9.4/static/release.html">9.4</a>, and Bluebird v<a href="http://bluebirdjs.com">3.3.4</a></p></blockquote>

<h2>Project setup</h2>

<p>Install the Express Generator (if necessary):</p>

<pre><code class="sh">$ npm install express-generator@4.13.1 -g
</code></pre>

<p>Create a new project and install the required dependencies:</p>

<pre><code class="sh">$ express node-postgres-promises
$ cd node-postgres-promises
$ npm install
</code></pre>

<p>Test!</p>

<pre><code class="sh">$ npm start
</code></pre>

<p>Navigate to <a href="http://localhost:3000">http://localhost:3000</a> in your browser, and you should see the familiar &ldquo;Welcome to Express&rdquo; text. Kill the server when done. Now let&rsquo;s set up the Postgres bindings via <a href="https://www.npmjs.com/package/pg-promise">pg-promise</a>&hellip;</p>

<p>Install <code>pg-promise</code></p>

<pre><code class="sh">$ npm install pg-promise@3.2.3 --save
</code></pre>

<p>Why <code>pg-promise</code> instead of <code>pg</code>? Put simply, pg-promise abstracts away much of the difficult, low-level connection management, allowing you to focus on the business logic. Further, the library includes a powerful <a href="https://www.npmjs.com/package/pg-promise#queries-and-parameters">query formatting engine</a> and support for <a href="https://www.npmjs.com/package/pg-promise#transactions">automated transactions</a>.</p>

<p>Finally, create a new file in the project root called <em>queries.js</em>:</p>

<pre><code class="javascript">var promise = require('bluebird');

var options = {
  // Initialization Options
  promiseLib: promise
};

var pgp = require('pg-promise')(options);
var connectionString = 'postgres://localhost:5432/puppies';
var db = pgp(connectionString);

// add query functions

module.exports = {
  getAllPuppies: getAllPuppies,
  getSinglePuppy: getSinglePuppy,
  createPuppy: createPuppy,
  updatePuppy: updatePuppy,
  removePuppy: removePuppy
};
</code></pre>

<p>Here, we created an instance of <code>pg-promise</code> and assigned it to a variable, <code>pgp</code>.</p>

<p>Did you notice that we passed an object, <code>options</code>, during the initialization process? This is required, even if you do not pass any properties/<a href="https://www.npmjs.com/package/pg-promise#initialization-options">initialization options</a> to the object. In this case, we <a href="https://www.npmjs.com/package/pg-promise#promiselib">overrode</a> pg-promise&rsquo;s default promise library - ES6 Promises - with <a href="http://bluebirdjs.com">Bluebird</a> by setting the <code>promiseLib</code> property in the <code>options</code> object.</p>

<blockquote><p>Why Bluebird? It&rsquo;s loaded with features and reputed to be <a href="http://programmers.stackexchange.com/questions/278778/why-are-native-es6-promises-slower-and-more-memory-intensive-than-bluebird">faster</a> than ES6 Promises.</p></blockquote>

<p>Don&rsquo;t forget to install Bluebird:</p>

<pre><code class="sh">$ npm install bluebird@3.3.4 --save
</code></pre>

<p>Next, we defined a connection string, and then passed it to the pg-promise instance to create a global connection instance.</p>

<p>Done!</p>

<h2>Postgres setup</h2>

<p>Create a new file also in the root called <em>puppies.sql</em> and then add the following code:</p>

<pre><code class="sql">DROP DATABASE IF EXISTS puppies;
CREATE DATABASE puppies;

\c puppies;

CREATE TABLE pups (
  ID SERIAL PRIMARY KEY,
  name VARCHAR,
  breed VARCHAR,
  age INTEGER,
  sex VARCHAR
);

INSERT INTO pups (name, breed, age, sex)
  VALUES ('Tyler', 'Retrieved', 3, 'M');
</code></pre>

<p>Run the file to create the database, apply the schema, and add one row to the newly created database:</p>

<pre><code class="sh">$ psql -f puppies.sql

DROP DATABASE
CREATE DATABASE
CREATE TABLE
INSERT 0 1
</code></pre>

<h2>Routes</h2>

<p>Now we can set up the route handlers in <em>index.js</em>:</p>

<pre><code class="javascript">var express = require('express');
var router = express.Router();

var db = require('../queries');


router.get('/api/puppies', db.getAllPuppies);
router.get('/api/puppies/:id', db.getSinglePuppy);
router.post('/api/puppies', db.createPuppy);
router.put('/api/puppies/:id', db.updatePuppy);
router.delete('/api/puppies/:id', db.removePuppy);


module.exports = router;
</code></pre>

<h2>Queries</h2>

<p>Next, let&rsquo;s add the SQL queries to the <em>queries.js</em> file&hellip;</p>

<h3>GET All Puppies</h3>

<pre><code class="javascript">function getAllPuppies(req, res, next) {
  db.any('select * from pups')
    .then(function (data) {
      res.status(200)
        .json({
          status: 'success',
          data: data,
          message: 'Retrieved ALL puppies'
        });
    })
    .catch(function (err) {
      return next(err);
    });
}
</code></pre>

<p>In the above code, we utilized the <code>any</code> <a href="https://www.npmjs.com/package/pg-promise#query-result-mask">Query Result Mask</a> to query the database, which returns a promise object. This method is used to indicate that we are expecting any number of results back. Success and failures are then handled by <code>.then()</code> and <code>.catch()</code>.</p>

<p>Besides, <code>any</code>, you can use the following <a href="https://www.npmjs.com/package/pg-promise#query-result-mask">Query Result Masks</a> (just to name a few):</p>

<ul>
<li><code>one</code> - a single row is expected</li>
<li><code>many</code> - one or more rows are expected</li>
<li><code>none</code> - no rows are expected</li>
<li><code>result</code> - passes the original object when resolved (we&rsquo;ll look at an example of this shortly)</li>
</ul>


<p>Test the request out in the browser - <a href="http://localhost:3000/api/puppies">http://localhost:3000/api/puppies</a>:</p>

<pre><code class="json">{
  status: "success",
  data: [
    {
      id: 1,
      name: "Tyler",
      breed: "Shih-tzu",
      age: 3,
      sex: "M"
    }
  ],
  message: "Retrieved ALL puppies"
}
</code></pre>

<h3>GET Single Puppy</h3>

<pre><code class="javascript">function getSinglePuppy(req, res, next) {
  var pupID = parseInt(req.params.id);
  db.one('select * from pups where id = $1', pupID)
    .then(function (data) {
      res.status(200)
        .json({
          status: 'success',
          data: data,
          message: 'Retrieved ONE puppy'
        });
    })
    .catch(function (err) {
      return next(err);
    });
}
</code></pre>

<p>Again, test in the browser: <a href="http://localhost:3000/api/puppies/1">http://localhost:3000/api/puppies/1</a></p>

<pre><code class="json">{
  status: "success",
  data: {
    id: 1,
    name: "Tyler",
    breed: "Shih-tzu",
    age: 3,
    sex: "M"
  },
  message: "Retrieved ONE puppy"
}
</code></pre>

<h3>POST</h3>

<pre><code class="javascript">function createPuppy(req, res, next) {
  req.body.age = parseInt(req.body.age);
  db.none('insert into pups(name, breed, age, sex)' +
      'values(${name}, ${breed}, ${age}, ${sex})',
    req.body)
    .then(function () {
      res.status(200)
        .json({
          status: 'success',
          message: 'Inserted one puppy'
        });
    })
    .catch(function (err) {
      return next(err);
    });
}
</code></pre>

<p>Test with curl in a new terminal window:</p>

<pre><code class="sh">$ curl --data "name=Whisky&amp;breed=annoying&amp;age=3&amp;sex=f" \
http://127.0.0.1:3000/api/puppies
</code></pre>

<p>You should see:</p>

<pre><code class="sh">{
  "status": "success",
  "message": "Inserted one puppy"
}
</code></pre>

<p>Double check the GET ALL route in your browser to ensure that the new puppy is now part of the collection.</p>

<h3>PUT</h3>

<pre><code class="javascript">function updatePuppy(req, res, next) {
  db.none('update pups set name=$1, breed=$2, age=$3, sex=$4 where id=$5',
    [req.body.name, req.body.breed, parseInt(req.body.age),
      req.body.sex, parseInt(req.params.id)])
    .then(function () {
      res.status(200)
        .json({
          status: 'success',
          message: 'Updated puppy'
        });
    })
    .catch(function (err) {
      return next(err);
    });
}
</code></pre>

<p>Test!</p>

<pre><code class="sh">$ curl -X PUT --data "name=Hunter&amp;breed=annoying&amp;age=33&amp;sex=m" \
http://127.0.0.1:3000/api/puppies/1
</code></pre>

<h3>Delete</h3>

<pre><code class="javascript">function removePuppy(req, res, next) {
  var pupID = parseInt(req.params.id);
  db.result('delete from pups where id = $1', pupID)
    .then(function (result) {
      /* jshint ignore:start */
      res.status(200)
        .json({
          status: 'success',
          message: `Removed ${result.rowCount} puppy`
        });
      /* jshint ignore:end */
    })
    .catch(function (err) {
      return next(err);
    });
}
</code></pre>

<p>So, we used the <code>result</code> <a href="https://www.npmjs.com/package/pg-promise#query-result-mask">Query Result Mask</a>, in order to get the number of records affected by the query.</p>

<pre><code class="sh">$ curl -X DELETE http://127.0.0.1:3000/api/puppies/1
</code></pre>

<p>Result:</p>

<pre><code class="sh">{
  "status": "success",
  "message": "Removed 1 puppy"
}
</code></pre>

<h2>Error Handling</h2>

<p>Update the error handlers in <em>app.js</em> to serve up JSON:</p>

<pre><code class="javascript">// development error handler
// will print stacktrace
if (app.get('env') === 'development') {
  app.use(function(err, req, res, next) {
    res.status( err.code || 500 )
    .json({
      status: 'error',
      message: err
    });
  });
}

// production error handler
// no stacktraces leaked to user
app.use(function(err, req, res, next) {
  res.status(err.status || 500)
  .json({
    status: 'error',
    message: err.message
  });
});
</code></pre>

<h2>Conclusion</h2>

<p>We now have a basic RESTful API built with Node, Express, and pg-promise. Be sure to comment below if you have any questions.</p>

<p>Grab the code from the <a href="https://github.com/mjhea0/node-postgres-promises">repo</a>.</p>
]]></content>
  </entry>
  
</feed>
