<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: node | Michael Herman]]></title>
  <link href="http://mjhea0.github.com/blog/categories/node/atom.xml" rel="self"/>
  <link href="http://mjhea0.github.com/"/>
  <updated>2015-03-06T07:55:39-07:00</updated>
  <id>http://mjhea0.github.com/</id>
  <author>
    <name><![CDATA[Michael Herman]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[User Authentication with Passport and Express 4]]></title>
    <link href="http://mjhea0.github.com/blog/2015/01/27/local-authentication-with-passport-and-express-4/"/>
    <updated>2015-01-27T07:07:00-07:00</updated>
    <id>http://mjhea0.github.com/blog/2015/01/27/local-authentication-with-passport-and-express-4</id>
    <content type="html"><![CDATA[<p>This post demonstrate how to add user authentication to Node/Express with Passport.js.</p>

<blockquote><p>If you're interested in social authentication via Passport, please check out <a href="http://mherman.org/blog/2013/11/10/social-authentication-with-passport-dot-js/">this</a> blog post. Looking for an Express 3 authentication tutorial? Check out this <a href="http://mherman.org/blog/2013/11/11/user-authentication-with-passport-dot-js/">post</a>.</p></blockquote>

<p>Before you start, make sure you have <a href="http://nodejs.org/download/">Node</a> installed for your specific operating system. This tutorial also uses the following tools/technologies:</p>

<ul>
<li><a href="https://www.npmjs.com/package/express">Express</a> v4.11.1</li>
<li><a href="https://www.npmjs.com/package/mongoose">Mongoose</a> v3.8.22</li>
<li><a href="https://www.npmjs.com/package/passport">Passport</a> v0.2.1</li>
<li><a href="https://www.npmjs.com/package/passport-local">Passport-local</a>: v1.0.0</li>
<li><a href="https://www.npmjs.com/package/passport-local-mongoose">Passport-local-mongoose</a>: v1.0.0</li>
</ul>


<h2>Contents</h2>

<ol>
<li>Project Setup</li>
<li>Edit app.js</li>
<li>Mongoose</li>
<li>Add Routes</li>
<li>Test</li>
<li>Views</li>
<li>Test Redux</li>
<li>Unit Tests</li>
<li>Error Handling</li>
<li>Conclusion</li>
</ol>


<h2>Project Setup</h2>

<p>Start by installing the Express generator, which we'll use to generate a basic project boilerplate:</p>

<p><code>sh
$ npm install -g express-generator@4
</code></p>

<blockquote><p>The <code>-g</code> flag means that we're installing this globally, on our entire system.</p></blockquote>

<p>Navigate to a convenient directory, like your "Desktop" or "Documents", then create your app:</p>

<p><code>sh
$ express passport-local-express4
</code></p>

<p>Check out the project structure:</p>

<p>```
├── app.js
├── bin
│   └── www
├── package.json
├── public
│   ├── images
│   ├── javascripts
│   └── stylesheets
│       └── style.css
├── routes
│   ├── index.js
│   └── users.js
└── views</p>

<pre><code>├── error.jade
├── index.jade
└── layout.jade
</code></pre>

<p>```</p>

<p>This took care of the heavy lifting, adding common files and functions associated with all apps.</p>

<h3>Install/Update Dependencies</h3>

<p>Update the <em>package.json</em> file to reference the correct dependencies:</p>

<p>```json
{
  "name": "passport-local-express4",
  "version": "0.0.0",
  "private": true,
  "scripts": {</p>

<pre><code>"start": "node ./bin/www"
</code></pre>

<p>  },
  "repository": {</p>

<pre><code>"type": "git",
"url": "git@github.com:mjhea0/passport-local-express4.git"
</code></pre>

<p>  },
  "author": "Michael Herman <a href="&#x6d;&#97;&#x69;&#108;&#116;&#111;&#x3a;&#109;&#105;&#x63;&#x68;&#97;&#x65;&#x6c;&#x40;&#109;&#x68;&#101;&#x72;&#109;&#x61;&#x6e;&#46;&#x6f;&#114;&#x67;">&#109;&#105;&#99;&#104;&#97;&#x65;&#108;&#x40;&#x6d;&#104;&#x65;&#x72;&#x6d;&#97;&#110;&#46;&#111;&#x72;&#x67;</a>",
  "license": "MIT",
  "dependencies": {</p>

<pre><code>"body-parser": "^1.10.2",
"chai": "~1.8.1",
"cookie-parser": "^1.3.3",
"express": "^4.11.1",
"express-session": "^1.10.1",
"jade": "^1.9.1",
"mocha": "~1.14.0",
"mongoose": "^3.8.22",
"morgan": "^1.5.1",
"passport": "^0.2.1",
"passport-local": "^1.0.0",
"passport-local-mongoose": "^1.0.0",
"should": "~2.1.0",
"serve-favicon": "^2.2.0",
"debug": "^2.1.1"
</code></pre>

<p>  }
}
```</p>

<p>Now install the dependencies:</p>

<p><code>sh
$ cd express-local-express4
$ npm install
</code></p>

<h3>Sanity Check</h3>

<p>Let's test our setup by running the app:</p>

<p><code>sh
$ node ./bin/www
</code></p>

<p>Navigate to <a href="http://localhost:3000/">http://localhost:3000/</a> in your browser and you should see the "Welcome to Express" text staring back.</p>

<h3>Setup MongoDB</h3>

<p>Install:</p>

<p><code>sh
$ npm install -g mongodb
</code></p>

<p>Then, in a new terminal window, start the MongoDB daemon:</p>

<p><code>sh
$ sudo mongod
</code></p>

<h2>Edit <em>app.js</em></h2>

<h3>Update the Requirements</h3>

<p>Add the following requirements:</p>

<p><code>javascript
var mongoose = require('mongoose');
var passport = require('passport');
var LocalStrategy = require('passport-local').Strategy;
</code></p>

<h3>Update <em>app.js</em></h3>

<p>Update all of <em>app.js</em> with the following code (check the comments for a brief explanation):</p>

<p>```javascript
// dependencies
var express = require('express');
var path = require('path');
var favicon = require('serve-favicon');
var logger = require('morgan');
var cookieParser = require('cookie-parser');
var bodyParser = require('body-parser');
var mongoose = require('mongoose');
var passport = require('passport');
var LocalStrategy = require('passport-local').Strategy;</p>

<p>var routes = require('./routes/index');
var users = require('./routes/users');</p>

<p>var app = express();</p>

<p>// view engine setup
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'jade');</p>

<p>// uncomment after placing your favicon in /public
//app.use(favicon(__dirname + '/public/favicon.ico'));
app.use(logger('dev'));
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(require('express-session')({</p>

<pre><code>secret: 'keyboard cat',
resave: false,
saveUninitialized: false
</code></pre>

<p>}));
app.use(passport.initialize());
app.use(passport.session());
app.use(express.static(path.join(__dirname, 'public')));</p>

<p>app.use('/', routes);</p>

<p>// passport config
var Account = require('./models/account');
passport.use(new LocalStrategy(Account.authenticate()));
passport.serializeUser(Account.serializeUser());
passport.deserializeUser(Account.deserializeUser());</p>

<p>// mongoose
mongoose.connect('mongodb://localhost/passport_local_mongoose_express4');</p>

<p>// catch 404 and forward to error handler
app.use(function(req, res, next) {</p>

<pre><code>var err = new Error('Not Found');
err.status = 404;
next(err);
</code></pre>

<p>});</p>

<p>// error handlers</p>

<p>// development error handler
// will print stacktrace
if (app.get('env') === 'development') {</p>

<pre><code>app.use(function(err, req, res, next) {
    res.status(err.status || 500);
    res.render('error', {
        message: err.message,
        error: err
    });
});
</code></pre>

<p>}</p>

<p>// production error handler
// no stacktraces leaked to user
app.use(function(err, req, res, next) {</p>

<pre><code>res.status(err.status || 500);
res.render('error', {
    message: err.message,
    error: {}
});
</code></pre>

<p>});</p>

<p>module.exports = app;
```</p>

<h2>Mongoose</h2>

<p>Let's get the Mongoose up and running. Add a new file called <em>account.js</em> to a new directory called "models" with the following code:</p>

<p>```javascript
var mongoose = require('mongoose');
var Schema = mongoose.Schema;
var passportLocalMongoose = require('passport-local-mongoose');</p>

<p>var Account = new Schema({</p>

<pre><code>username: String,
password: String
</code></pre>

<p>});</p>

<p>Account.plugin(passportLocalMongoose);</p>

<p>module.exports = mongoose.model('Account', accounts);
```</p>

<p>You may be wondering about password security, specifically salting/hashing the password. Fortunately, the <a href="https://github.com/saintedlama/passport-local-mongoose">passport-local-mongoose</a> package automatically takes care of salting and hashing the password for us. More on this further down.</p>

<h3>Sanity Check</h3>

<p>Again, test the app:</p>

<p><code>sh
$ node ./bin/www
</code></p>

<p>Make sure you stil see the same "Welcome to Express" text.</p>

<h2>Add Routes</h2>

<p>Within the "routes" folder, add the following code to the <em>index.js</em> file:</p>

<p>```javascript
var express = require('express');
var passport = require('passport');
var Account = require('../models/account');
var router = express.Router();</p>

<p>router.get('/', function (req, res) {</p>

<pre><code>res.render('index', { user : req.user });
</code></pre>

<p>});</p>

<p>router.get('/register', function(req, res) {</p>

<pre><code>res.render('register', { });
</code></pre>

<p>});</p>

<p>router.post('/register', function(req, res) {</p>

<pre><code>Account.register(new Account({ username : req.body.username }), req.body.password, function(err, account) {
    if (err) {
        return res.render('register', { account : account });
    }

    passport.authenticate('local')(req, res, function () {
        res.redirect('/');
    });
});
</code></pre>

<p>});</p>

<p>router.get('/login', function(req, res) {</p>

<pre><code>res.render('login', { user : req.user });
</code></pre>

<p>});</p>

<p>router.post('/login', passport.authenticate('local'), function(req, res) {</p>

<pre><code>res.redirect('/');
</code></pre>

<p>});</p>

<p>router.get('/logout', function(req, res) {</p>

<pre><code>req.logout();
res.redirect('/');
</code></pre>

<p>});</p>

<p>router.get('/ping', function(req, res){</p>

<pre><code>res.status(status).send("pong!", 200);
</code></pre>

<p>});</p>

<p>module.exports = router;
```</p>

<h2>Test</h2>

<p>Fire up the server. Navigate to <a href="http://localhost:3000/ping">http://localhost:3000/ping</a>. Make sure you do not get any errors and that you see the word "pong!".</p>

<h2>Views</h2>

<h3><em>layout.jade</em></h3>

<p>Update:</p>

<p>```
doctype html
html
  head</p>

<pre><code>title= title
meta(name='viewport', content='width=device-width, initial-scale=1.0')
link(href='http://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/css/bootstrap.min.css', rel='stylesheet', media='screen')
link(rel='stylesheet', href='http://mjhea0.github.com/stylesheets/style.css')
</code></pre>

<p>  body</p>

<pre><code>block content
</code></pre>

<p>  script(src='http://code.jquery.com/jquery.js')
  script(src='http://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/js/bootstrap.min.js')
```</p>

<h3>index.jade</h3>

<p>Update:</p>

<p>```jade
extends layout</p>

<p>block content
  if (!user)</p>

<pre><code>a(href="/login") Login
br
a(href="/register") Register
</code></pre>

<p>  if (user)</p>

<pre><code>p You are currently logged in as #{user.username}
a(href="/logout") Logout
</code></pre>

<p>```</p>

<h3>login.jade</h3>

<p>Add a new file called <em>login.jade</em> to the views:</p>

<p>```jade
extends layout</p>

<p>block content
  .container</p>

<pre><code>h1 Login Page
p.lead Say something worthwhile here.
br
form(role='form', action="/login",method="post", style='max-width: 300px;')
  .form-group
      input.form-control(type='text', name="username", placeholder='Enter Username')
  .form-group
    input.form-control(type='password', name="password", placeholder='Password')
  button.btn.btn-default(type='submit') Submit
  &amp;nbsp;
  a(href='/')
    button.btn.btn-primary(type="button") Cancel
</code></pre>

<p>```</p>

<h3>register.jade</h3>

<p>Add another file called <em>register.jade</em> to the views:</p>

<p>```javascript
extends layout</p>

<p>block content
  .container</p>

<pre><code>h1 Register Page
p.lead Say something worthwhile here.
br
form(role='form', action="/register",method="post", style='max-width: 300px;')
  .form-group
      input.form-control(type='text', name="username", placeholder='Enter Username')
  .form-group
    input.form-control(type='password', name="password", placeholder='Password')
  button.btn.btn-default(type='submit') Submit
  &amp;nbsp;
  a(href='/')
    button.btn.btn-primary(type="button") Cancel
</code></pre>

<p>```</p>

<h2>Test redux</h2>

<p>Fire up the server and test! Register, and then login.</p>

<p>Remember how I said that we'd look at salting and hashing a password again? Well, let's check our Mongo database to ensure that it's working.</p>

<p>When I tested the user registration, I used "michael" for both my username and password.</p>

<p>Let's see what this looks like in the database:</p>

<p>```sh
$ mongo
MongoDB shell version: 2.4.6
connecting to: test</p>

<blockquote><p>use passport_local_mongoose_express4
switched to db passport_local_mongoose_express4
db.accounts.find()
{ "salt" : "9ffd63f2bcce58bf79691cacfaae678f690dd73ef778445bf79f97c41934189b", "hash" : "17eabe62d459acdb4f3d8eaab7369a1e989c6150e231d1e87a7cf1c31dfc7eafc0616732a6db8f08c413dcbec06c95d512cef55503a1fe9a7ed5dc15ecf5cf67c114af5a659c79bb47039082a3af933e1c32dd2519b8be11596a775e1d262fd53437927e0fd948b76e738f342904a598e6c533445351c9b3d629aa118adfbe0646a80539e816c06248e353b1787dbd8c646a2ed018bbf5e58fb6a6cc1f32c6ea61b3e52230cfdf75a9f4b7ba20b3d3ae3b86f5816f5df9c48f9d1bb4a9c42e30bf646c3810d050847c1905e5a95f53c81078090e42ba58799187a61b047376def48fb640a4f48eca4c7f35610eafc2c770e61172b11c7e98c36281983de56414fa95e0708c9a6458a903baaf3818a3e4675b39418b358f51f45aca792e606f692e0a7d3667d111d00d0f521257d3486cbcff250dc7d9859ab80f9d56a3d272fb0ebb2e7dd969c0749361153c6bde62ad50b3d47233424034b959c78225db000cc1416aa0d555016f1b666d2da709e69c5030ee39753597a1d06ec0a4e001e22bff37947c1b993794d21667dc6c65e4116dd5ca216a161aa9026063e0b12e1165ffa5c827a6803df6765766cc55bcca122cd4d9f572353a988f90200ffc4a610d9eca83df01d6f30af78f9ec476fc974bc1d3a5fd2759a56486795bd7d993462a8d2f9b9c42d3197cd7b9855f17eaac4073a4d843d56b5c9a75b86cc1bb8b27ec", "username" : "michael", "_id" : ObjectId("54c7bbbfaf54064909921a36"), "__v" : 0 }</p>

<p>```</p></blockquote>

<p>So, you can see that we have a document with five keys:</p>

<ul>
<li><code>username</code> is as we expected - "michael"</li>
<li><code>_id</code> pertains to the unique id associated with that document.</li>
<li><code>__v</code> is the <a href="http://mongoosejs.com/docs/guide.html#versionKey">version #</a> for that specific documents.</li>
<li>Finally, instead of a password key we have both a salt and a hash key. For more on how these are generated, please refer to the <a href="https://github.com/saintedlama/passport-local-mongoose#hash-algorithm">passport-local-mongoose</a> documentation.</li>
</ul>


<h2>Unit tests</h2>

<p>First, update the <code>scripts</code> object in <em>package.json</em>:</p>

<p><code>json
"scripts": {
  "start": "node ./bin/www",
  "test": "make test"
 },
</code></p>

<p>Now add a Makefile to the root and include the following code:</p>

<p>```
test:</p>

<pre><code>@./node_modules/.bin/mocha
</code></pre>

<p>.PHONY: test
```</p>

<blockquote><p>Take note of the spacing on the second line. This <strong>must</strong> be a tab or you will see an error.</p></blockquote>

<p>Run <code>make test</code> from the command line. If all is well, you should see - <code>0 passing (1ms)</code>. Now we just need to add some tests...</p>

<h3>Add tests</h3>

<p>Create a new folder called "tests", and then adde a new file called *test.user.js":</p>

<p>```javascript
var should = require("should");
var mongoose = require('mongoose');
var Account = require("../models/account.js");
var db;</p>

<p>describe('Account', function() {</p>

<pre><code>before(function(done) {
    db = mongoose.connect('mongodb://localhost/test');
        done();
});

after(function(done) {
    mongoose.connection.close();
    done();
});

beforeEach(function(done) {
    var account = new Account({
        username: '12345',
        password: 'testy'
    });

    account.save(function(error) {
        if (error) console.log('error' + error.message);
        else console.log('no error');
        done();
    });
});

it('find a user by username', function(done) {
    Account.findOne({ username: '12345' }, function(err, account) {
        account.username.should.eql('12345');
        console.log("   username: ", account.username);
        done();
    });
});

afterEach(function(done) {
    Account.remove({}, function() {
        done();
    });
 });
</code></pre>

<p>});
```</p>

<p>No run <code>make tests</code>. You should see that it passed - <code>1 passing (43ms)</code>.</p>

<h2>Error handling</h2>

<p>Right now we have some poorly handled errors that are confusing to the end user. For example, try to register a name that already exists, or login with a username that doesn't exist. This can and <em>should</em> be handled better.</p>

<h3>Registration</h3>

<p>First, update the <code>/register</code> route so an error is thrown, which gets sent to Jade template, if a user tries to register a username that already exists:</p>

<p>```javascript
router.post('/register', function(req, res) {</p>

<pre><code>Account.register(new Account({ username : req.body.username }), req.body.password, function(err, account) {
    if (err) {
      return res.render("register", {info: "Sorry. That username already exists. Try again."});
    }

    passport.authenticate('local')(req, res, function () {
        res.redirect('/');
    });
});
</code></pre>

<p>});
```</p>

<p>Then add the following code to the bottom of the "register.jade" template:</p>

<p><code>jade
br
h4= info
</code></p>

<p>Test this out.</p>

<p>Next, if you try to login with a username and password combo that does not exist, the user is redirected to a page with just the word "Unauthorized" on it. This is confusing and unhelpful. See if you can fix this on your own. Cheers!</p>

<h2>Conclusion</h2>

<p>That's it. Grab the code from the <a href="need%20to%20add%20link">repository</a>. Cheers!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Node, Express, and MongoDB - a primer]]></title>
    <link href="http://mjhea0.github.com/blog/2014/12/31/node-and-mongoose-a-primer/"/>
    <updated>2014-12-31T02:28:00-07:00</updated>
    <id>http://mjhea0.github.com/blog/2014/12/31/node-and-mongoose-a-primer</id>
    <content type="html"><![CDATA[<p>Welcome. Using Node, Express, and Mongoose, let's create an interactive form.</p>

<blockquote><p>Before you start, make sure you have <a href="http://nodejs.org/download/">Node</a> installed for your specific operating system. This tutorial also uses <a href="http://expressjs.com/">Express</a> v4.9.0 and <a href="http://mongoosejs.com/">Mongoose</a> v3.8.21.</p></blockquote>

<h2>Project Setup</h2>

<p>Start by installing the Express generator, which will be used to create a basic project for us:</p>

<p><code>sh
$ npm install -g express-generator@4
</code></p>

<blockquote><p>The <code>-g</code> flag means that we're installing this on our entire system.</p></blockquote>

<p>Navigate to a convenient directory, like your "Desktop" or "Documents", then create your app:</p>

<p><code>sh
$ express node-mongoose-form
</code></p>

<p>Check out the project structure:</p>

<p>```
├── app.js
├── bin
│   └── www
├── package.json
├── public
│   ├── images
│   ├── javascripts
│   └── stylesheets
│       └── style.css
├── routes
│   ├── index.js
│   └── users.js
└── views</p>

<pre><code>├── error.jade
├── index.jade
└── layout.jade
</code></pre>

<p>```</p>

<p>Don't worry about the files and folders for now. Just know that we have created a boilerplate that could be used for a number of Node applications. This took care of the heavy lifting, adding common files and functions associated with all apps.</p>

<p>Notice the <em>package.json</em> file. This stores your project's dependencies, which we still need to install:</p>

<p><code>sh
$ cd node-mongoose-form
$ npm install
</code></p>

<p>Now let's install one last dependency:</p>

<p><code>sh
$ npm install mongoose --save
</code></p>

<blockquote><p>The <code>--save</code> flag adds the dependencies and their versions to the <em>package.json</em> file. Take a look.</p></blockquote>

<h2>Sanity check</h2>

<p>Let's test our setup by running the app:</p>

<p><code>sh
$ npm start
</code></p>

<p>Navigate to <a href="http://localhost:3000/">http://localhost:3000/</a> in your browser and you should see the "Welcome to Express" text.</p>

<h3>Supervisor</h3>

<p>I highly recommend setting up <a href="https://github.com/isaacs/node-supervisor">Supervisor</a> so that you can run your app and watch for code changes. Check out the above link to learn more.</p>

<p><code>sh
$ npm install supervisor -g
</code></p>

<p>Kill the server by pressing CTRL-C.</p>

<p>Once installed, let's update the <em>package.json</em> file to utilize Supervisor to run our program.</p>

<p>Simply change this-</p>

<p><code>javascript
"scripts": {
  "start": "node ./bin/www"
},
</code></p>

<p>To this:</p>

<p><code>javascript
"scripts": {
  "start": "supervisor ./bin/www"
},
</code></p>

<p>Let's test again:</p>

<p><code>sh
$ npm start
</code></p>

<p>In your terminal you should see:</p>

<p><code>sh
Watching directory 'node-mongoose-form' for changes.
</code></p>

<p>If you see that, you know it's working right. Essentially, Supervisor is watching that directory for code changes, and if they do occur, then it will refresh your app for you so you don't have to constantly kill the server then start it back up. It saves a lot of time and keystrokes.</p>

<p>Awesome. With the setup out of the way, let's get our hands dirty and actually build something!</p>

<h2>Routes</h2>

<p>Grab your favorite text editor, and then open the main file, <em>app.js</em>, which houses all of the business logic. Take a look at the routes:</p>

<p><code>javascript
app.use('/', routes);
app.use('/users', users);
</code></p>

<p>Understanding how routes work as well as how to trace all the files associated with an individual route is an important skill to learn. You'll be able to approach most applications and understand how they work just by starting with the routes.</p>

<p>Let's look at this route:</p>

<p><code>javascript
app.use('/users', users)
</code></p>

<p>Here, we know that this route is associated with the <code>/users</code> endpoint. What's an endpoint? Simply navigate to <a href="http://localhost:3000/users">http://localhost:3000/users</a>.</p>

<p>So the end user navigates to that endpoint and expects <em>something</em> to happen. That could mean some HTML is rendered or perhaps JSON is returned. That's not important at this point. For now, let's look at how Node handles that logic for "handling routes".</p>

<p>Also, within that route, you can see the variable <code>users</code>. Where is that in this file? It's at the top, and it loads in another file within our app:</p>

<p><code>javascript
var users = require('./routes/users');
</code></p>

<p>Open that file:</p>

<p>```javascript
var express = require('express');
var router = express.Router();</p>

<p>/<em> GET users listing. </em>/
router.get('/', function(req, res) {
  res.send('respond with a resource');
});</p>

<p>module.exports = router;
```</p>

<p>What's happening here? We won't touch everything but essentially when that endpoint is hit it responds by sending text in the form of a response to the end user - "respond with a resource". Now, of course you don't always have to send text. You could respond with a template or view like a Jade file that gets rendered into HTML. We'll look at how this works in just a minute when we add our own routes.</p>

<p><strong>Make sure you understand everything in this section before moving on. This is very important</strong>.</p>

<h3>Add a new route</h3>

<p>Let's now add a new route that renders an HTML form to the end user.</p>

<p>Start by adding the route handler in the <em>app.js</em> file:</p>

<p><code>javascript
app.use('/form', form);
</code></p>

<blockquote><p>Remember this simply means <code>app.use('/ENDPOINT', VARIABLE_NAME);</code>,</p></blockquote>

<p>Use the <code>form</code> variable to require a JS file within our routes folder.</p>

<p><code>javascript
var form = require('./routes/form');
</code></p>

<p>Take a look in the terminal. You should see an error, indicating Node can't find that './routes/form' module. We need to create it!</p>

<p>Create that JS file/module by saving an empty file called <em>form.js</em> to the "routes" directory. Add the following code:</p>

<p>```javascript
var express = require('express');
var router = express.Router();</p>

<p>/<em> GET form. </em>/
router.get('/', function(req, res) {
  res.send('My funky form');
});</p>

<p>module.exports = router;
```</p>

<blockquote><p>Remember what this code <code>res.send('My funky form');</code> should do? If not, review the previous section.</p></blockquote>

<p>Navigate to <a href="http://localhost:3000/form">http://localhost:3000/form</a>. You should see the text "'My funky form" on the page. Sweet.</p>

<h2>Jade</h2>

<p>Jade is a templating language, which compiles down to HTML. It makes it easy to separate logic from markup.</p>

<p>Take a quick look at the <em>layout.jade</em> and <em>index.jade</em> files with the "views" folder. There's a relationship between those two files. It's called inheritance. We define the base structure in the <em>layout</em> file, which contains common structure that can be reused in multiple places.</p>

<p>Do you see the <code>block</code> keyword?</p>

<p>What really happens when the <em>index</em> file is rendered is that it first inherits the base template because of the <code>extends</code> keywords. So, the <em>layout</em> template then gets rendered, which eventually pulls in the child template, overwriting the <code>block</code> keyword with:</p>

<p><code>html
h1= title
  p Welcome to #{title}
</code></p>

<p>Hope that makes sense. If not, check out <a href="http://www.learnjade.com/tour/template-inheritance/">this</a> resource for more info.</p>

<h3>Setup <em>form.jade</em></h3>

<p>Create a new file called "form.jade" in the "views" directory, and then add the following code:</p>

<p>```html
extends layout</p>

<p>block content
  h1= title
  p Welcome to #{title}
```</p>

<p>The same thing is happening here with inheritance. If you're unfamiliar with Jade syntax, <code>title</code> is essentially a variable, which we can pass in from <code>./routes/form.js</code>.</p>

<p>Update <code>./routes/form.js</code> by changing-</p>

<p><code>javascript
res.send('My funky form');
</code></p>

<p>To:</p>

<p><code>javascript
res.render('form', { title: 'My funky form' });
</code></p>

<p>This just says, "When a user hits the <code>/form</code> endpoint, render the <em>form.jade</em> file and pass in <code>My funky form</code> as the title."</p>

<blockquote><p>Keep in mind that all Jade files are converted to HTML. Browsers can't read the Jade syntax, so it must be in HTML by the time the end user sees it.</p></blockquote>

<p>Ready to test? Simple refresh <a href="http://localhost:3000/form">http://localhost:3000/form</a>.</p>

<p>Did it work? If yes, move on. If not, go back through this section and review. Look in you terminal as well to see the error(s). If you're having problems, don't beat yourself up. It's all part of learning!</p>

<h3>Update <em>form.jade</em></h3>

<p>So, let's update the Jade syntax to load a form.</p>

<p>```html
extends layout</p>

<p>block content
  //- passed into layout.jade when form.jade is rendered
  block content</p>

<pre><code>h1= title
form(method="post" action="/create")
  label(for="comment") Got something to say:
  input(type="text", name="comment", value=comment)
  input(type="submit", value="Save")
</code></pre>

<p>```</p>

<p>I'm not going to touch on all the Jade syntax, but essentially, we have just a basic HTML form to submit comments.</p>

<p>Refresh your browser. Do you see the form? Try clicking save. What happens? Well, you just tried to send a POST request to the <code>/create</code> endpoint, which does not exist. Let's set it up.</p>

<h2>Add route handler for <code>/create</code></h2>

<p>Open <em>app.js</em> and add a new route:</p>

<p><code>javascript
app.use('/create', form);
</code></p>

<blockquote><p>Notice how we're using the same <code>form</code> variable. What does this mean?</p></blockquote>

<p>Open <em>form.js</em> to add the logic for this new route:</p>

<p>```javascript
var express = require('express');
var router = express.Router();</p>

<p>/<em> GET form. </em>/
router.get('/', function(req, res) {
  res.render('form', { title: 'My funky form' });
});</p>

<p>/<em> POST form. </em>/
router.post('/', function(req, res) {
  console.log(req.body.comment);
  res.redirect('form');
});</p>

<p>module.exports = router;
```</p>

<p>1Test this out again. Now, when you submit the form, we have the <code>/create</code> endpoint setup, which then grabs the text from the input box via <code>req.body.comment</code>. Make sure the text is consoled to your terminal.</p>

<p>Okay. So, we are handling the routes, rendering the right template, let's now setup Mongoose to save the data from our form.</p>

<h2>Setup Mongoose</h2>

<p><a href="http://mongoosejs.com/">Mongoose</a> is awesome. Start with defining the Schema, which the maps to a collection in Mongo. It utilizes OOP.</p>

<p>Create a file called <em>database.js</em> in your app's root directory, then add the following code:</p>

<p>```javascript
var mongoose = require('mongoose');
var Schema   = mongoose.Schema;</p>

<p>var Comment = new Schema({</p>

<pre><code>title : String,
</code></pre>

<p>});</p>

<p>mongoose.model('comments', Comment);</p>

<p>mongoose.connect('mongodb://localhost/node-comment');
```</p>

<p>Here, we required/included the Mongoose library along with a reference to the <code>Schema()</code> method. As said, you always start with defining the schema, then we linked it to collection called "comments". Finally, we opened a connection to an instance of our local MongoDB.</p>

<blockquote><p>If you don't have the MongoDB server running. Do so now. Open a new terminal window, and run the command <code>sudo mongod</code>.</p></blockquote>

<p>Next, open <em>app.js</em> and require the Mongoose config at the very top of the file:</p>

<p><code>javascript
// mongoose config
require('./database');
</code></p>

<p>With Mongoose setup, we need to update <em>form.js</em> to create (via POST) and read (via GET) data from the Mongo collection.</p>

<h2>Handling form GET requests</h2>

<p>Open <em>form.js</em>. Require Mongoose as well as the <code>comments</code> model, which we already created:</p>

<p><code>javascript
var mongoose = require('mongoose');
var Comment = mongoose.model('comments');
</code></p>

<p>Now, update the function handling GET requests:</p>

<p>```javascript
/<em> GET form. </em>/
router.get('/', function(req, res) {
  Comment.find(function(err, comments){</p>

<pre><code>console.log(comments)
res.render(
  'form',
  {title : 'My funky form', comments : comments}
);
</code></pre>

<p>  });
});
```</p>

<p><code>Comment.find()</code> grabs all comments from the Mongo collection, which we assign to the variable <code>comments</code>. We can now use that variable in our Jade file.</p>

<h2>Update <em>form.jade</em> to display comments</h2>

<p>Let's add a loop to iterate through the comments and then display the <code>title</code> key from the collection.</p>

<p>```html
extends layout</p>

<p>block content
  //- passed into layout.jade when form.jade is rendered
  block content</p>

<pre><code>h1= title
form(method="post" action="/create")
  label(for="comment") Got something to say:
  input(type="text", name="comment", value=comment)
  input(type="submit", value="Save")
br
- for comment in comments
  p= comment.title
</code></pre>

<p>```</p>

<blockquote><p>Do you remember where we set the <code>title</code> key? Check out the database schema in <em>database.js</em>.</p></blockquote>

<p>Before this will actually work - e.g., display comments - we first need to add the logic to insert data into the Mongo collection.</p>

<h2>Handling form POST requests</h2>

<p>Back in <em>form.js</em>, update the function handling POST requests:</p>

<p>```javascript
/<em> POST form. </em>/
router.post('/', function(req, res) {
  new Comment({title : req.body.comment})
  .save(function(err, comment) {</p>

<pre><code>console.log(comment)
res.redirect('form');
</code></pre>

<p>  });
});
```</p>

<p>The simply saves a new comment, which again is grabbed from the form via <code>req.body.comment</code>.</p>

<h2>Sanity Check</h2>

<p>Refresh you app. Add some comments. If you've done everything correctly, the comments should be displayed beneath the form.</p>

<h2>Conclusion</h2>

<p>That's it. Grab the code from the <a href="https://github.com/mjhea0/node-form-refresh">repository</a>. Cheers!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Handling AJAX Calls With Node.js and Express (part 5)]]></title>
    <link href="http://mjhea0.github.com/blog/2014/04/15/handling-ajax-calls-with-node-dot-js-and-express-part-5/"/>
    <updated>2014-04-15T20:34:00-06:00</updated>
    <id>http://mjhea0.github.com/blog/2014/04/15/handling-ajax-calls-with-node-dot-js-and-express-part-5</id>
    <content type="html"><![CDATA[<p>Articles in the series:</p>

<ul>
<li>Part 1: <a href="http://mherman.org/blog/2013/10/20/handling-ajax-calls-with-node-dot-js-and-express-scraping-craigslist/">Scraping Craigslist</a></li>
<li>Part 2: <a href="http://mherman.org/blog/2013/11/01/handling-ajax-calls-with-node-dot-js-and-express-part-2/">Adding Handlebars</a></li>
<li>Part 3: <a href="http://mherman.org/blog/2013/12/21/handling-ajax-calls-with-node-dot-js-and-express-part-3/">User Authentication with Passport and MongoDB</a></li>
<li>Part 4: <a href="http://mherman.org/blog/2014/04/15/handling-ajax-calls-with-node-dot-js-and-express-part-4/">Refactoring, Adding styles</a></li>
<li>Part 5: <a href="http://mherman.org/blog/2014/04/15/handling-ajax-calls-with-node-dot-js-and-express-part-5">Saving Jobs</a> <strong>&lt;&lt; CURRENT</strong></li>
</ul>


<p>Last <a href="http://mherman.org/blog/2014/04/15/handling-ajax-calls-with-node-dot-js-and-express-part-4/">time</a> we refactored our code to make it more modular as well as added some styles. This time we'll add our next feature: <em>The ability to save jobs so that users can apply to them later.</em></p>

<h2>User Workflow</h2>

<p>From an end user's perspective, after logging in and then searching for jobs, one can simply click a button next to each job to save the job to a new Mongo collection. That job is then removed from the list of jobs retrieved from the search. Let's start with that.</p>

<h3>What do we need to do?</h3>

<ol>
<li>Add a "save" button next to each job.</li>
<li>Develop the necessary code to "grab" the job when the button is clicked, sending it to the server side.</li>
<li>Create a new collection in the database.</li>
<li>Insert the data in the newly created Mongo collection.</li>
<li>Use jQuery to remove the job from the DOM and alert the user that job has been added.</li>
</ol>


<p>Let's get started.</p>

<h2>Add a save button</h2>

<p>Start by adding the "save" button to the Handlebars template:</p>

<p>
```html</p>

<script id="search-results" type="text/x-handlebars-template">
    {{#each resultsArray}}
      <li>
        <button type="button" class="btn btn-primary btn-xs save-btn">Save</button>
        <a href={{about}}>{{title}}</a><br>{{desc}}>
      </li>
    {{/each}}
    <br>
    </ul>
</script>


<p>```
</p>

<p>Moving right along ...</p>

<h2>Client Side Javascript</h2>

<p>Next, let's add an event handler to <em>main.js</em> that captures the button when clicked:</p>

<p><code>javascript
$('.save-btn').on('click', function() {
  console.log("whee!")
});
</code></p>

<p>Your file should now look like this:</p>

<p>```javascript
$(function(){
  var source = $("#search-results").html();
  var dataTemplate = Handlebars.compile(source);
  $results = $('#results')</p>

<p>  $('#search').on('keyup', function(e){</p>

<pre><code>if(e.keyCode === 13) {
  var parameters = { search: $(this).val() };
  $.get('/searching', parameters, function(data){
    if (data instanceof Array) {
      $results.html(dataTemplate({resultsArray:data}));
    } else {
      $results.html(data);
    };
  });
};
</code></pre>

<p>  });
  $('.save-btn').on('click', function() {</p>

<pre><code>console.log("whee!")
</code></pre>

<p>  });
});
```</p>

<p>Do a quick sanity check. Fire up the server. Login. Search for some jobs. You should see the "save" button next to each job. Open up your Javascript console so you can see the console log when it fires. Now try to click a button.</p>

<p>Nothing. Right? What's going on? We have the right selector. The event is a click. It should be working.</p>

<p>The problem is fairly simple: On the initial loading of the DOM, those selectors - <code>.save-btn</code> - are not present. In fact, they only become present after we append all the jobs to the DOM. Since the selectors are not present to begin with though, our event handler in its current state won't find them. Fortunately, this is an easy fix.</p>

<p>We can simply attach a listener to a parent element, then once the event is fired, it will search for the child selector, <code>.save-btn</code>. It will obviously only find that selector once it exists in the DOM.</p>

<p>This is called event delegation. If interested, check <a href="https://learn.jquery.com/events/event-delegation/">this</a> article out for more info.</p>

<p>Update the code:</p>

<p><code>javascript
$('#results').on('click', '.save-btn', function() {
  console.log("whee!")
});
</code></p>

<p>So, the listener is set to the <code>#results</code> selector, which when fired (by the button click), searches the DOM for the child selector, <code>.save-btn</code>. Test it out. It should work.</p>

<p><img src="https://raw.githubusercontent.com/mjhea0/node-express-ajax-craigslist/master/img/delegated-events.png" alt="delegated-events" /></p>

<p>Next, instead of just outputting the text "whee!", we need to grab the job title and URL by replacing the current console log with:</p>

<p><code>javascript
var jobTitle = $(this).next('a').text()
var jobURL = $(this).next('a').attr('href')
console.log(jobTitle, jobURL)
</code></p>

<p>Notice the <code>this</code> keyword? It's extremely powerful yet it can be difficult to use. In this case, it refers to the DOM element that the event handler is triggered on.</p>

<p>Don't believe me? Test it out: update the <code>console.log()</code> to <code>console.log($(this))</code>. Test it out.</p>

<p>To learn more about <code>this</code>, check out the jQuery <a href="https://learn.jquery.com/javascript-101/this-keyword/">docs</a> and Javascript <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this">docs</a>.</p>

<p>Now what happens when you click the save button?</p>

<p><img src="https://raw.githubusercontent.com/mjhea0/node-express-ajax-craigslist/master/img/this-keyword.png" alt="this-keyword" /></p>

<p>Finally, we need to pass the data to the server.</p>

<p><code>javascript
var parameters = { title: jobTitle, url: jobURL };
console.log(parameters)
$.get( '/save', parameters, function(data) {
  console.log("whee!")
});
</code></p>

<p>You should remember how to do this, and understand what's happening here. If not, review <a href="http://mherman.org/blog/2013/10/20/handling-ajax-calls-with-node-dot-js-and-express-scraping-craigslist/#.U1AdiuZdWYU">Part 1</a> of this series.</p>

<h2>Server Side Javascript</h2>

<p>On the server side, we need to setup a <code>/save</code> route. Again, if you have questions on this, check out <a href="http://mherman.org/blog/2013/10/20/handling-ajax-calls-with-node-dot-js-and-express-scraping-craigslist/#.U1AdiuZdWYU">Part 1</a>.</p>

<p>Update <code>app.js</code>:</p>

<p><code>javascript
app.get('/save', ensureAuthenticated, routes.save)
</code></p>

<p>Now update the routes file, <code>index.js</code>:</p>

<p><code>javascript
exports.save = function(req, res){
  var title = req.query.title;
  var url = req.query.url;
  console.log(title, url);
};
</code></p>

<p>Test this out. You should see:</p>

<p><img src="https://raw.githubusercontent.com/mjhea0/node-express-ajax-craigslist/master/img/back-end.png" alt="backend" /></p>

<h2>Update Mongo</h2>

<p>Now that we have the data in our possession, let's add it to the database.</p>

<h3>Add a new schema</h3>

<p>Create a new file in the "models" directory called <em>job.js</em>, then add the following code to the file:</p>

<p>```javascript
var mongoose = require('mongoose');
var config = require('../config');</p>

<p>console.log(config);</p>

<p>// create a job model
var userSchema = new mongoose.Schema({
  title: String,
  url: String,
});</p>

<p>module.exports = mongoose.model('Job', jobSchema);
```</p>

<h3>Insert Data</h3>

<p>With the schema set up, we can now add our data to the Mongo collection. Within your routes, add the following code to the <code>/save</code> route:</p>

<p>```javascript
exports.save = function(req, res){
  var title = req.query.title;
  var url = req.query.url;
  console.log(title, url);
  var newJob = new job();
  newJob.title = title;
  newJob.url = url;
  console.log(newJob);
  newJob.save(function(err){</p>

<pre><code>if(err){
  throw err;
}
console.log("New job, " + newJob.title + ", was added to mongo");
</code></pre>

<p>  });
};
```</p>

<p>Here, we are simply creating a new record assigned to the variable <code>newJob</code>, then adding the appropriate data, and finally saving the job to our job collection within Mongo.</p>

<p>Make sure to require the config and Mongoose schema files:</p>

<p><code>javascript
var config = require('../config');
var job = require('../models/job');
</code></p>

<p>Test it out!</p>

<p><img src="https://raw.githubusercontent.com/mjhea0/node-express-ajax-craigslist/master/img/save_job_to_mongo.png" alt="save_job_to_mongo" /></p>

<p>Now check out the results in Mongo:</p>

<p><img src="https://raw.githubusercontent.com/mjhea0/node-express-ajax-craigslist/master/img/saved_job_mongo.png" alt="saved_job_mongo" /></p>

<p>Before moving on, let's add a line of code to search the Mongo collection to see if a job exists, then within a conditional we can setup logic for only adding a job if it doesn't already exist in the collection:</p>

<p>```javascript
exports.save = function(req, res){
  var title = req.query.title;
  var url = req.query.url;
  console.log(title, url);
  var newJob = new job();
  job.findOne({'title': title}, function (err, job) {</p>

<pre><code>if (job) {
  console.log('Job already in database.');
} else {
  newJob.title = title;
  newJob.url = url;
  console.log(newJob);
  newJob.save(function(err){
    if(err){
      throw err;
    }
    console.log("New job, " + newJob.title + ", was added to mongo");
  });
};
</code></pre>

<p>  });
};
```</p>

<p>So, we search the database for the job - <code>job.findOne({'title': title}</code> - then if it's found we output a message to the console - <code>console.log('Job already in database.');</code>. And if it's not found, we obviously add the data to the database. We should alert the user if a job is already in the database in a more direct way than just a message to the console. After all, how many users browse the Internet with their console open? We'll address that in a bit. Right now, let's finish with Mongo first.</p>

<h3>One to Many Relationship</h3>

<p>We need set up a one to many relationship (one user, many jobs) using <a href="http://docs.mongodb.org/manual/tutorial/model-referenced-one-to-many-relationships-between-documents/">document references</a> within Mongo to associate a job to a user. This takes literally two lines of code.</p>

<p>Update the jobs schema:</p>

<p>```
var user = require('../models/user');</p>

<p>var jobSchema = new mongoose.Schema({
  title: String,
  url: String,
  user: {type: mongoose.Schema.Types.ObjectId, ref: user}
});
```</p>

<p>Then updated <em>index.js</em> so that when you add a job it includes the currently logged in user:</p>

<p>```
newJob.title = title;
newJob.url = url;
newJob.user = req.user._id
console.log(newJob);
newJob.save(function(err){
  if(err){</p>

<pre><code>throw err;
</code></pre>

<p>  }
```</p>

<p>Test this out, then check out the object in Mongo:</p>

<p><code>javascript
{ "user" : ObjectId("534cb94fd4b72d7618000001"), "url" : "http://sfbay.craigslist.org/sfc/eng/4423216760.html", "title" : "Principal Web Engineer", "_id" : ObjectId("5351f3a1cc6813119e000001"), "__v" : 0 }
</code></p>

<p>The object now includes the user id.</p>

<h2>Client Side Javascript Redux</h2>

<p>Okay. Back on the client side, we need to do three things before we're finally done:</p>

<ol>
<li>Remove the job the user saved</li>
<li>Display messages from the server side, indicating whether the job was added to the database or not</li>
<li>Display all saved jobs to the user</li>
</ol>


<h3>Remove job from the DOM</h3>

<p>Add the following line of code to <em>main.js</em> right before we send the data to the server side:</p>

<p><code>javascript
$(this).parent().remove()
</code></p>

<p>Updated code:</p>

<p>```javascript
$('#results').on('click', '.save-btn', function() {
  var jobTitle = $(this).next('a').text()
  var jobURL = $(this).next('a').attr('href')
  var parameters = { title: jobTitle, url: jobURL };
  console.log(parameters)
  $(this).parent().remove()
  $.get( '/save', parameters, function(data) {</p>

<pre><code>console.log('test',data)
</code></pre>

<p>  });
});
```</p>

<h3>Display Messages</h3>

<p>First, within <em>index.js</em> update the following two lines of code.</p>

<p>From:</p>

<p><code>javascript
console.log('Job already in database.');
console.log("New job, " + newJob.title + ", was added to mongo");
</code></p>

<p>To:</p>

<p><code>javascript
res.send('Job already in database.');
res.send("New job, " + newJob.title + ", was added to mongo");
</code></p>

<p>Updated function:</p>

<p>```javascript
exports.save = function(req, res){
  var title = req.query.title;
  var url = req.query.url;
  console.log(title, url);
  var newJob = new job();
  job.findOne({'title': title}, function (err, job) {</p>

<pre><code>if (job) {
  res.send('Job already in database.');
} else {
  newJob.title = title;
  newJob.url = url;
  console.log(newJob);
  newJob.save(function(err){
    if(err){
      throw err;
    }
    res.send("New job, " + newJob.title + ", was added to mongo");
  });
};
</code></pre>

<p>  });
};
```</p>

<p>The <code>res.send()</code> method is used to send a response back to the client side. You can read more <a href="http://expressjs.com/4x/api.html#res.send">here</a>. Now, we need to capture that reponse and append the actual message to the DOM.</p>

<p>First, add a new element, <code>p#alert</code>, to <em>search.jade</em> where you want the message to go:</p>

<p>```html
extends layout</p>

<p>block content</p>

<pre><code>h1 Search SF Jobs
.lead Welcome, #{user}
form(METHOD="LINK", ACTION="logout")
    input(type="submit", value="Logout", class='btn btn-sm btn-primary')
br
br
p#alert
input#search(type="search", placeholder="search...")
br
br
ul#results
include template.html

script(src="//cdnjs.cloudflare.com/ajax/libs/jquery/2.0.3/jquery.min.js")
script(src="//cdnjs.cloudflare.com/ajax/libs/handlebars.js/1.0.0/handlebars.min.js")
script(src="/javascripts/main.js")
</code></pre>

<p>```</p>

<p>Next update <em>main.js</em>:</p>

<p><code>javascript
$.get( '/save', parameters, function(data) {
  $('#alert').html(data)
  console.log(data)
});
</code></p>

<p><code>$('#alert').html(data)</code> adds the message to the DOM between the <code>&lt;p&gt;</code> tags that have the id "results".</p>

<p>Check it out live.</p>

<h3>Display saved jobs</h3>

<p>This is actually a fairly large task, so we'll tackle this in the next part, along with re-organizing the entire search page and adding some more styles.</p>

<p>You can grab the code <a href="https://github.com/mjhea0/node-express-ajax-craigslist">here</a>.</p>

<p>See you next time!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Handling AJAX Calls With Node.js and Express (part 4)]]></title>
    <link href="http://mjhea0.github.com/blog/2014/04/15/handling-ajax-calls-with-node-dot-js-and-express-part-4/"/>
    <updated>2014-04-15T15:27:00-06:00</updated>
    <id>http://mjhea0.github.com/blog/2014/04/15/handling-ajax-calls-with-node-dot-js-and-express-part-4</id>
    <content type="html"><![CDATA[<p>Articles in the series:</p>

<ul>
<li>Part 1: <a href="http://mherman.org/blog/2013/10/20/handling-ajax-calls-with-node-dot-js-and-express-scraping-craigslist/">Scraping Craigslist</a></li>
<li>Part 2: <a href="http://mherman.org/blog/2013/11/01/handling-ajax-calls-with-node-dot-js-and-express-part-2/">Adding Handlebars</a></li>
<li>Part 3: <a href="http://mherman.org/blog/2013/12/21/handling-ajax-calls-with-node-dot-js-and-express-part-3/">User Authentication with Passport and MongoDB</a></li>
<li>Part 4: <a href="http://mherman.org/blog/2014/04/15/handling-ajax-calls-with-node-dot-js-and-express-part-4/">Refactoring, Adding styles</a> <strong>&lt;&lt; CURRENT</strong></li>
<li>Part 5: <a href="http://mherman.org/blog/2014/04/15/handling-ajax-calls-with-node-dot-js-and-express-part-5">Saving Jobs</a></li>
</ul>


<p>If you've been following along with this series, you should have a basic application for searching and scraping Craigslist for jobs in San Francisco. The end goal is to have an application that users can login to, then search for jobs. From there the end user can either apply for jobs or save jobs they may be interested in.</p>

<p>Before adding any additional functionality, we need to refactor the code a bit by moving some code out of <em>app.js</em> and into separate modules so that the entire app is more modular.</p>

<h2>Configuration</h2>

<p>First, move the config settings into a separate file, outside the main project. It's always a good idea to separate configuration from actual code so that other users who wish to use your project can easily make it their own by quickly adding their own configuration.</p>

<p>Create a <em>config.js</em> file and add the following code:</p>

<p>```javascript
module.exports = {
  google: {</p>

<pre><code>returnURL: 'http://127.0.0.1:3000/auth/google/callback',
realm: 'http://127.0.0.1:3000'
</code></pre>

<p>  },
  mongoUrl: 'mongodb://localhost/craigslist'
};
```</p>

<p>Then make sure to include the file as part of <em>app.js</em>'s dependencies:</p>

<p><code>javascript
var config = require('./config');
</code></p>

<p>Finally, update these two areas within <em>app.js</em>:</p>

<p><code>javascript
// connect to the database
mongoose.connect(config.mongoUrl);
</code></p>

<p>And:</p>

<p><code>javascript
passport.use(new GoogleStrategy({
  returnURL: config.google.returnURL,
  realm: config.google.realm
},
</code></p>

<h2>User Model</h2>

<p>Next, update the user schema for mongoose.</p>

<p>Create a new folder called "models" and add a file called <em>user.js</em> to hold the user schema:</p>

<p>```javascript
var mongoose = require('mongoose');
var config = require('../config');</p>

<p>console.log(config);</p>

<p>// create a user model
var userSchema = new mongoose.Schema({
  name: String,
  email: {type: String, lowercase: true }
});</p>

<p>module.exports = mongoose.model('User', userSchema);
```</p>

<p>Add this to the dependencies:</p>

<p><code>javascript
var user = require('./models/user');
</code></p>

<p>Then update <em>app.js</em>:</p>

<p>```javascript
// passport settings
passport.serializeUser(function(user, done) {
  console.log('serializeUser: ' + user.id)
  done(null, user.id);
});
passport.deserializeUser(function(id, done) {
  user.findOne({_id : id}, function(err, user) {</p>

<pre><code>console.log(user)
if(!err) done(null, user);
else done(err, null)
</code></pre>

<p>  });
});</p>

<p>passport.use(new GoogleStrategy({
  returnURL: config.google.returnURL,
  realm: config.google.realm
},
  function(identifier, profile, done) {</p>

<pre><code>console.log(profile.emails[0].value)
process.nextTick(function() {
  var query = user.findOne({'email': profile.emails[0].value});
  query.exec(function(err, oldUser) {
    if(oldUser) {
      console.log("Found registered user: " + oldUser.name + " is logged in!");
      done(null, oldUser);
    } else {
      var newUser = new user();
      newUser.name = profile.displayName;
      newUser.email = profile.emails[0].value;
      console.log(newUser);
      newUser.save(function(err){
        if(err){
          throw err;
        }
        console.log("New user, " + newUser.name + ", was created");
        done(null, newUser);
      });
    }
  });
});
</code></pre>

<p>  }
));
```</p>

<p>The Passport code searches the database to see if a user already exists before creating a new one - which is no different from last time. However, see if you can dig a bit deeper and see the subtle differences.</p>

<h2>Routes</h2>

<p>Next, move the main routing into a separate module by adding the following code to <em>routes/index.js</em>:</p>

<p>```javascript
var request = require('request');</p>

<p>exports.index = function(req, res){
  res.render('index', { user: req.user });
};</p>

<p>exports.search = function(req, res) {
  res.render('search', { user: req.user.name });
};</p>

<p>exports.searching = function(req, res){
  // input value from search
  var val = req.query.search;
  // url used to search yql
  var url = "http://query.yahooapis.com/v1/public/yql?q=select%20*%20from%20craigslist.search" +
  "%20where%20location%3D%22sfbay%22%20and%20type%3D%22jjj%22%20and%20query%3D%22" + val + "%22&amp;format=" +
  "json&amp;diagnostics=true&amp;env=store%3A%2F%2Fdatatables.org%2Falltableswithkeys";</p>

<p>  requests(url,function(data){</p>

<pre><code>res.send(data);
</code></pre>

<p>  });
};</p>

<p>function requests(url, callback) {
  // request module is used to process the yql url and return the results in JSON format
  request(url, function(err, resp, body) {</p>

<pre><code>var resultsArray = [];
body = JSON.parse(body);
// console.log(body.query.results.RDF.item)
// logic used to compare search results with the input from user
if (!body.query.results.RDF.item) {
  results = "No results found. Try again.";
  callback(results);
} else {
  results = body.query.results.RDF.item;
  for (var i = 0; i &lt; results.length; i++) {
    resultsArray.push(
      {title:results[i].title[0], about:results[i]["about"], desc:results[i]["description"]}
    );
  };
};
// pass back the results to client side
callback(resultsArray);
</code></pre>

<p>  });
};
```</p>

<p>Again, add the dependency: <code>var routes = require('./routes');</code></p>

<p>The routes section in <em>app.js</em> should now look like this:</p>

<p>```javascript
// user routes
app.get('/', routes.index);
app.get('/search', ensureAuthenticated, routes.search);
app.get('/searching', ensureAuthenticated, routes.searching);
app.get('/logout', function(req, res){
  req.logOut();
  res.redirect('/');
});</p>

<p>// auth routes
app.get('/auth/google',
  passport.authenticate('google'),
  function(req, res){
});
app.get('/auth/google/callback',
passport.authenticate('google', { failureRedirect: '/' }),
  function(req, res) {</p>

<pre><code>res.redirect('/search');
</code></pre>

<p>  }
);</p>

<p>// test authentication
function ensureAuthenticated(req, res, next) {
  if (req.isAuthenticated()) { return next(); }
  res.redirect('/')
}
```</p>

<h2>Passport</h2>

<p>Now, move the main authentication code to a separate file.</p>

<p>Create a new file called <em>authentication.js</em> and add the following code:</p>

<p>```javascript
// authentication</p>

<p>var passport = require('passport')
var GoogleStrategy = require('passport-google').Strategy;
var config = require('./config');
var user = require('./models/user');</p>

<p>// passport settings
passport.serializeUser(function(user, done) {
  console.log('serializeUser: ' + user.id)
  done(null, user.id);
});
passport.deserializeUser(function(id, done) {
  user.findOne({_id : id}, function(err, user) {</p>

<pre><code>console.log(user)
if(!err) done(null, user);
else done(err, null)
</code></pre>

<p>  });
});</p>

<p>passport.use(new GoogleStrategy({
  returnURL: config.google.returnURL,
  realm: config.google.realm
},
  function(identifier, profile, done) {</p>

<pre><code>console.log(profile.emails[0].value)
process.nextTick(function() {
  var query = user.findOne({'email': profile.emails[0].value});
  query.exec(function(err, oldUser) {
    if(oldUser) {
      console.log("Found registered user: " + oldUser.name + " is logged in!");
      done(null, oldUser);
    } else {
      var newUser = new user();
      newUser.name = profile.displayName;
      newUser.email = profile.emails[0].value;
      console.log(newUser);
      newUser.save(function(err){
        if(err){
          throw err;
        }
        console.log("New user, " + newUser.name + ", was created");
        done(null, newUser);
      });
    }
  });
});
</code></pre>

<p>  }
));</p>

<p>module.exports = passport;
```</p>

<p>Then back in <em>app.js</em>, make sure to import that module back in by adding it as a dependency:</p>

<p><code>javascript
var passport = require('./authentication');
</code></p>

<p>Fire up the server, and test your app out. If it all went well, everything should still work properly.</p>

<p>Finally, let's update the styles.</p>

<h2>Styles</h2>

<p>First, add in a <a href="http://getbootstrap.com/">Bootstrap</a> stylesheet to the <em>layout.jade</em> file:</p>

<p><code>html
link(rel='stylesheet', href='http://mjhea0.github.com//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css')
</code></p>

<h3>index.jade</h3>

<p>```html
extends layout</p>

<p>block content</p>

<pre><code>h1 Search Login
.lead Please login to search
br
form(METHOD="LINK", ACTION="/auth/google")
    input(type="submit", value="Login with Google", class='btn btn-large btn-primary')

script(src="//cdnjs.cloudflare.com/ajax/libs/jquery/2.0.3/jquery.min.js")
script(src="//cdnjs.cloudflare.com/ajax/libs/handlebars.js/1.0.0/handlebars.min.js")
script(src="/javascripts/main.js")
</code></pre>

<p>```</p>

<h3>search.jade</h3>

<p>```html
extends layout</p>

<p>block content</p>

<pre><code>h1 Search SF Jobs
.lead Welcome, #{user}
form(METHOD="LINK", ACTION="logout")
    input(type="submit", value="Logout", class='btn btn-sm btn-primary')
br
br
input#search(type="search", placeholder="search...")
br
br
ul#results
include template.html

script(src="//cdnjs.cloudflare.com/ajax/libs/jquery/2.0.3/jquery.min.js")
script(src="//cdnjs.cloudflare.com/ajax/libs/handlebars.js/1.0.0/handlebars.min.js")
script(src="/javascripts/main.js")
</code></pre>

<p>```</p>

<p>Wait? How did we capture the user's name? Go back and look at the <code>/searching</code> route.</p>

<p>Looks a little better. :)</p>

<p><img src="https://raw.githubusercontent.com/mjhea0/node-express-ajax-craigslist/master/img/part4.png" alt="part-4" /></p>

<p>Alright, next time we'll expand the app's functionality to allow users to save jobs they may be interested in applying to at a later date. Until then, check out the latest code <a href="https://github.com/mjhea0/node-express-ajax-craigslist">here</a>. Cheers!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Node Twitter Sentiment - Part 2]]></title>
    <link href="http://mjhea0.github.com/blog/2014/03/18/node-twitter-sentiment-part-2/"/>
    <updated>2014-03-18T11:55:00-06:00</updated>
    <id>http://mjhea0.github.com/blog/2014/03/18/node-twitter-sentiment-part-2</id>
    <content type="html"><![CDATA[<p>This is for the <a href="http://www.meetup.com/Node-js-Denver-Boulder/">Node-js-Denver-Boulder</a> Meetup &lt;3 Cheers!</p>

<blockquote><p>Miss part 1? Check it out <a href="http://mherman.org/blog/2014/02/19/node-twitter-sentiment/">here</a>.</p></blockquote>

<p>Let's begin ...</p>

<p>Before adding additional functionality to the <a href="https://github.com/mjhea0/node-twitter-sentiment">Node Twitter Sentiment Analysis</a> application, we need to refactor the code. Frankly, there are some mistakes that were made on purpose to highlight an issue that many new developers overlook when first working with Node.</p>

<p>Remember this function from <em>index.js</em> in the routes folder:</p>

<p>```javascript
exports.search = function(req, res) {
  // grab the request from the client
  var choices = JSON.parse(req.body.choices);
  // grab the current date
  var today = new Date();
  // establish the twitter config (grab your keys at dev.twitter.com)
  var twitter = new twit({</p>

<pre><code>consumer_key: config.consumer_key,
consumer_secret: config.consumer_secret,
access_token: config.access_token,
access_token_secret: config.access_token_secret
</code></pre>

<p>  });
  // set highest score
  var highestScore = -Infinity;
  // set highest choice
  var highestChoice = null;
  // create new array
  var array = [];
  // set score
  var score = 0;
  console.log("----------")</p>

<p>  // iterate through the choices array from the request
  for(var i = 0; i &lt; choices.length; i++) {</p>

<pre><code>(function(i) {
// add choice to new array
array.push(choices[i])
// grad 20 tweets from today
twitter.get('search/tweets', {q: '' + choices[i] + ' since:' + today.getFullYear() + '-' + 
  (today.getMonth() + 1) + '-' + today.getDate(), count:20}, function(err, data) {
    // perform sentiment analysis (see below)
    score = performAnalysis(data['statuses']);
    console.log("score:", score)
    console.log("choice:", choices[i])
    //  determine winner
    if(score &gt; highestScore) {
      highestScore = score;
      highestChoice = choices[i];
      console.log("winner:",choices[i])
    }
    console.log("")
  });
})(i)
</code></pre>

<p>  }
  // send response back to the server side; why the need for the timeout?
  setTimeout(function() { res.end(JSON.stringify({'score': highestScore, 'choice': highestChoice})) }, 5000); <br/>
};
```</p>

<p>Essentially we're grabbing the user inputted data, pulling tweets based on the inputs, and then calculating the sentiment of those tweets. The timeout is necessary because of how Node <a href="http://stackoverflow.com/questions/7931537/whats-the-difference-between-asynchronous-non-blocking-event-base-architectu/9489547#9489547">works</a>. Because Node is asynchronous, functions do not block other functions from running. Without the 5 second time-out, the next function will append the results to the DOM without waiting for the function to finish running. Essentially, nothing is appended. Make sense?</p>

<p>Put another way, when functions run that are blocking, they wait there for the result to come back before another function fires. Node, on the other hand, will continue executing the code that comes after it (because it's functions are non-blocking(, then jump back when the result is available.</p>

<p>So, why won't a timeout work then?</p>

<p>Again, the code has a function that sends the results in 5 seconds, regardless as to the execution state of the call to twitter. What happens though, if we run the program without a network connection? Or if Twitter is down? Or if we pulled in 10,000 tweets instead of 20?</p>

<p>It's still going to return results after 5 seconds. This is not what we want, obviously. So, how do we fix it? There's a number of different methods, none of which fully solve it in an elegant manner. In this post, we'll look at:</p>

<table width="800">
<colgroup>
<col style="text-align:left;"/>
<col style="text-align:left;"/>
<col style="text-align:left;"/>
</colgroup>

<thead>
<tr>
    <th style="text-align:center;">Method</th>
    <th style="text-align:center;">URL</th>
    <th style="text-align:center;">Library</th>
</tr>
</thead>

<tbody>
<tr>
    <td style="text-align:left;">Async</td>
    <td style="text-align:left;"><a href="https://github.com/Nodejs-Colorado/node-twitter-sentiment-async">node-twitter-sentiment-async</a></td>
    <td style="text-align:left;"><a href="https://github.com/caolan/async">https://github.com/caolan/async</a></td>
</tr>
<tr>
    <td style="text-align:left;">Promises</td>
    <td style="text-align:left;"><a href="https://github.com/Nodejs-Colorado/node-twitter-sentiment-promises">node-twitter-sentiment-promises</a></td></td>
    <td style="text-align:left;"><a href="https://github.com/kriskowal/q">https://github.com/kriskowal/q</a></td>
</tr>
<tr>
    <td style="text-align:left;">Generators</td>
    <td style="text-align:center;">n/a</td>
    <td style="text-align:center;">n/a</td>
</tr>
<tr>
    <td style="text-align:left;">IcedCoffeeScript</td>
    <td style="text-align:center;">n/a</td>
    <td style="text-align:left;"><a href="https://github.com/maxtaco/coffee-script">https://github.com/maxtaco/coffee-script</a></td>
</tr>
</tbody>
</table>


<h2>Async</h2>

<p><strong>Thanks to <a href="http://www.meetup.com/Node-js-Denver-Boulder/members/8358230/">Manish Vachharajani</a> for developing the code for this example.</strong></p>

<p>One solution is to use the <a href="https://github.com/caolan/async">Async</a>. This is often the go-to solution, since the syntax is simple, it's totally straightforward, and it uses call backs. In fact, in order to use Async, you must follow the convention of providing the callback as the last argument of the Async function. Thus, for users used to callbacks, this is an extremely easy solution.</p>

<h3>Basics</h3>

<p>Start by installing the package:</p>

<p><code>sh
$ npm install async
</code></p>

<p>In our code we will be using the <code>map()</code> helper method, which takes an array, a filter function, and a callback. The filter function is an async function that takes a callback.</p>

<p>Simple example:</p>

<p>```javascript
var async = require('async');</p>

<p>var names = ["michael","richard","john","jennifer","ben","julie"];</p>

<p>async.map(names, getInfo, function (err, result) {
if(!err) {
  console.log('Finished: ' + result);
} else {
  console.log('Error: ' + err);
}</p>

<p>});</p>

<p>function getInfo(name, callback) {
setTimeout(function() {
  callback(null, name.toUpperCase());
}, 1000);
}
```</p>

<p>Test it out <a href="http://runnable.com/UyXKBzE8BKUZRnR5/node-async-map-example-for-node-js">here</a>.</p>

<p>Basically, we have an array of names, in lower case, which we are converting to uppercase, then outputting via a <code>console.log</code>. Let's say that another function depended on the results of <code>getInfo</code>, if <code>getInfo</code> was long-running, then the other function could fire before <code>getInfo</code> returned the results. Thus, the need to suspend the function until the results are returned.</p>

<h3>Update Node-Twitter-Sentiment</h3>

<p>We just need to update the <em>index.js</em> file in the "routes" folder:
```javascript
"use strict";</p>

<p>var path = require("path");
var twit = require('twit');
var sentimental = require('Sentimental');
var config = require("../config");
var async = require('async');</p>

<p>exports.index = function(req, res){
  res.render('index', { title: "Twit-Decision"});
};</p>

<p>exports.ping = function(req, res){
  res.send("pong!", 200);
};</p>

<p>exports.search = function(req, res) {
  // grab the request from the client
  var choices = JSON.parse(req.body.choices);
  // grab the current date
  var today = new Date();
  // establish the twitter config (grab your keys at dev.twitter.com)
  var twitter = new twit({</p>

<pre><code>consumer_key: config.consumer_key,
consumer_secret: config.consumer_secret,
access_token: config.access_token,
access_token_secret: config.access_token_secret
</code></pre>

<p>  });
  console.log("----------")</p>

<p>  // grade 20 tweets from today with keyword choice and call callback
  // when done
  function getAndScoreTweets(choice, callback) {</p>

<pre><code>twitter.get('search/tweets', {q: '' + choice + ' since:' + today.getFullYear() + '-' + 
  (today.getMonth() + 1) + '-' + today.getDate(), count:20}, function(err, data) {
    // perform sentiment analysis (see below)
  if(err) {
    console.log(err);
    callback(err.message, undefined);
    return;
  }
  var score = performAnalysis(data['statuses']);
  console.log("score:", score)
  console.log("choice:", choice)
  callback(null, score);
});
</code></pre>

<p>  }
  //Grade tweets for each choice in parallel and compute winner when
  //all scores are collected
  async.map(choices, getAndScoreTweets, function(err, scores) {</p>

<pre><code>if(err) {
  console.log("Unable to score all tweets");
  res.end(JSON.stringify(err));
}
var highestChoice = choices[0];
var highestScore = scores.reduce(function(prev, cur, index) { 
  if(prev &lt; cur) {
    highestChoice = choices[index];
    return cur;
  } else {
    return prev;
  }
});
res.end(JSON.stringify({'score': highestScore, 'choice': highestChoice}));
</code></pre>

<p>  });           <br/>
}</p>

<p>function performAnalysis(tweetSet) {
  //set a results variable
  var results = 0;
  // iterate through the tweets, pulling the text, retweet count, and favorite count
  for(var i = 0; i &lt; tweetSet.length; i++) {</p>

<pre><code>var tweet = tweetSet[i]['text'];
var retweets = tweetSet[i]['retweet_count'];
var favorites = tweetSet[i]['favorite_count'];
// remove the hashtag from the tweet text
tweet = tweet.replace('#', '');
// perform sentiment on the text
var score = sentimental.analyze(tweet)['score'];
// calculate score
results += score;
if(score &gt; 0){
  if(retweets &gt; 0) {
    results += (Math.log(retweets)/Math.log(2));
  }
  if(favorites &gt; 0) {
    results += (Math.log(favorites)/Math.log(2));
  }
}
else if(score &lt; 0){
  if(retweets &gt; 0) {
    results -= (Math.log(retweets)/Math.log(2));
  }
  if(favorites &gt; 0) {
    results -= (Math.log(favorites)/Math.log(2));
  }
}
else {
  results += 0;
}
</code></pre>

<p>  }
  // return score
  results = results / tweetSet.length;
  return results
}
```</p>

<h4>What's going on?</h4>

<p>Let's look at the specific changes:</p>

<p>```javascript
// grade 20 tweets from today with keyword choice and call callback
// when done
function getAndScoreTweets(choice, callback) {
  twitter.get('search/tweets', {q: '' + choice + ' since:' + today.getFullYear() + '-' +</p>

<pre><code>(today.getMonth() + 1) + '-' + today.getDate(), count:20}, function(err, data) {
  // perform sentiment analysis (see below)
if(err) {
  console.log(err);
  callback(err.message, undefined);
  return;
}
var score = performAnalysis(data['statuses']);
console.log("score:", score)
console.log("choice:", choice)
callback(null, score);
</code></pre>

<p>  });
}
//Grade tweets for each choice in parallel and compute winner when
//all scores are collected
async.map(choices, getAndScoreTweets, function(err, scores) {
  if(err) {</p>

<pre><code>console.log("Unable to score all tweets");
res.end(JSON.stringify(err));
</code></pre>

<p>  }
  var highestChoice = choices[0];
  var highestScore = scores.reduce(function(prev, cur, index) {</p>

<pre><code>if(prev &lt; cur) {
  highestChoice = choices[index];
  return cur;
} else {
  return prev;
}
</code></pre>

<p>  });
  res.end(JSON.stringify({'score': highestScore, 'choice': highestChoice}));
});           <br/>
```</p>

<p>We pass in the <code>choices</code> array, the <code>getAndScoreTweets()</code> function (which handles the calculating of sentiment), then the results are serialized and sent back to the client. <code>async.map()</code> suspends the <code>getAndScoreTweets()</code> function until it's done running. Thus, the results are not sent back to the client until Sentiment is done.</p>

<p>Further, <code>async.map()</code> allows you to do a long delay operation on each array element because of the fact that the mapped function must call "callback" - which happens in the <code>getInfo()</code> function.</p>

<p>Simple, right?</p>

<p>Check out the final code here: <a href="https://github.com/mjhea0/node-twitter-sentiment-async">https://github.com/mjhea0/node-twitter-sentiment-async</a></p>

<h2>Promises</h2>

<p><strong>Thanks to <a href="http://www.meetup.com/Node-js-Denver-Boulder/members/23013171/">Richard Lucas</a> for developing the code and writing the following explanation.</strong></p>

<p>Promises are not the easiest JavaScript concept to wrap your head around, so do not feel bad if this concept takes time to understand.  It certainly has taken a lot of time for myself, and I still get caught up and confused in using some of the methods.  In this example, I tried to just use a simple (and hopefully easy to understand) pattern of deferreds using the Q promise library.  You may also have experience with jQuery deferreds via the <code>$.Deferred</code> object.  They are very similar.</p>

<h3>What are promises (from the Q <a href="https://github.com/kriskowal/q">documentation</a>)</h3>

<blockquote><p>If a function cannot return a value or throw an exception without blocking, it can return a promise instead. A promise is an object that represents the return value or the thrown exception that the function may eventually provide. A promise can also be used as a proxy for a remote object to overcome latency.</p></blockquote>

<h3>Here are some great resources for learning more about promises</h3>

<ol>
<li><a href="http://promises-aplus.github.io/promises-spec/">Promises A+ Spec</a></li>
<li><a href="http://documentup.com/kriskowal/q/">Q Library</a></li>
<li><a href="http://www.promisejs.org/">Promisesjs.org - Great introduction</a></li>
<li><a href="http://nodeschool.io/#promiseitwonthurt">Promises by Nodeschool.io</a></li>
<li><a href="http://mattgreer.org/articles/promises-in-wicked-detail/?utm_source=javascriptweekly&amp;utm_medium=email">Javascript Promises in Wicked Detail</a></li>
<li><a href="http://strongloop.com/strongblog/promises-in-node-js-with-q-an-alternative-to-callbacks/">Promises in Node.js</a></li>
<li><a href="https://github.com/bellbind/using-promise-q/">Using Promises with Q</a></li>
<li><a href="http://shop.oreilly.com/product/0636920030508.do">Using jQuery Deferreds - Book from O'Reilly</a></li>
</ol>


<h3>Pattern used</h3>

<p>Here the deferred pattern was used, which goes something like this:</p>

<p>```javascript
var promise = function(err, result) {
  var deferred = Q.defer();
  if (err) {</p>

<pre><code>deferred.reject(new Error(err));
</code></pre>

<p>  } else {</p>

<pre><code>deferred.resolve(result);
</code></pre>

<p>  }
  return deferred.promise;
}
```</p>

<p>You then go on to using the <code>then</code> and <code>done</code> methods:</p>

<p><code>javascript
promise.then(function(data) {
  return doSomething(data);
}).done(function(data) {
  return finishSomething(data);
});
</code></p>

<h3>How they were implemented</h3>

<p>```javascript
var searchTweets = function(choice) {
  var deferred = Q.defer(), // declare the deferred</p>

<pre><code> ...
</code></pre>

<p>  twitter.get('search/tweets',
  {</p>

<pre><code>q: '' + choice + ' since:' + dateString,
count: 20
</code></pre>

<p>  }, function(err, data) {</p>

<pre><code>  if (err) {
    deferred.reject(new Error(err)); //reject it in the callback
  } else {
    ...
    choiceData['choice'] = choice;
    choiceData['score'] = score;
    deferred.resolve(choiceData); //resolve it in the callback
  }
  console.log("");
});
</code></pre>

<p>  return deferred.promise; //return the promise object
};
```</p>

<p>The search function.  Note the promise chain:</p>

<p>```javascript
exports.search = function(req, res) {
  var choices = JSON.parse(req.body.choices),</p>

<pre><code>  choiceArray = [];
</code></pre>

<p>  var promise = function(choices) {</p>

<pre><code>var deferred = Q.defer();
choices.forEach(function(choice, index) {
  searchTweets(choice)
    .fail(function(error) {
      throw new Error(error);
    })
    .done(function(data) {
      choiceArray.push(data);
      if (choiceArray.length === choices.length) {
        deferred.resolve(choiceArray);
      }
    });
});
return deferred.promise;
</code></pre>

<p>  };</p>

<p>  promise(choices).then(function(data) {</p>

<pre><code>  return scoreCompare(data);
}).done(function(result) {
  console.log('final_result', result);
  res.send(result);
});
</code></pre>

<p>};
```</p>

<p>Have Fun!</p>

<h2>Generators</h2>

<p>Generators are the new kid on the block, but they look the most promising. Essentially, they make it easy to suspend/pause a function then resume it with the <code>yield</code> function.</p>

<blockquote><p>Make sure you are using a browser that supports ES6: <a href="http://kangax.github.io/es5-compat-table/es6/#Generators_(yield">http://kangax.github.io/es5-compat-table/es6/#Generators_(yield)</a>). I personally use <a href="https://www.google.com/intl/en/chrome/browser/canary.html">Chrome Canary</a>, with experimental Javasctipt enabled: "chrome://flags/#enable-javascript-harmony".</p></blockquote>

<p>... also ...</p>

<blockquote><p>As of Node v0.11.3, you must use the <code>--harmony_generators</code> flag for running applications that contain generator examples in order to enable ES6 experimental features - e.g., <code>node --harmony_generators app.js</code>.</p></blockquote>

<p>Let's look at a quick example.</p>

<h3>Example</h3>

<p>Open the Javascript console, then enter this generator function:
```javascript
function* naturalNumbers(){
  var n = 1;
  while (true){</p>

<pre><code>yield n++;
</code></pre>

<p>  }
}
```</p>

<p>Next, you can call the function with this line:</p>

<p><code>javascript
var numbers = naturalNumbers();
</code></p>

<p>Finally, you can generate an object with the returned values by calling <code>numbers.next()</code></p>

<p><img src="https://raw.github.com/mjhea0/node-twitter-sentiment/master/es6-generators.png" alt="es6-generators" /></p>

<p>So, how do we add this to our Sentiment project? I'm not sure. :)</p>

<h2>IcedCoffeeScript</h2>

<h3>Example</h3>

<p><code>coffeescript
et = require 'errTo'
{get} = require 'request'
fn = (done) -&gt;
  await get 'http://foo.com', et done, defer resp, body
  await get 'http://bar.com', et done, defer resp, body
  do done
await fn defer err
throw err if err
</code></p>

<p>So, how do we ad this to our Sentiment project? I'm not sure. :)</p>

<h2>Data Binding</h2>

<blockquote><p>This isn't a method of handling the non-blocking function issue, but it instead shows how easily update the front end. We are using Async again to address the function issue. Check out the code <a href="https://github.com/Nodejs-Colorado/node-twitter-sentiment-databinding">here</a>.</p></blockquote>

<p><strong>Thanks to <a href="http://www.meetup.com/Node-js-Denver-Boulder/members/103374712/">Aaron Vandrey</a> for developing the code and writing the following explanation.</strong></p>

<p>Although there are a number of front-end MV* frameworks that could be used, we chose the <a href="https://github.com/knockout/knockout">KnockoutJS</a> data binding library for simplicity. KnockoutJS uses "observables" to enable two-way data binding from the View (HTML) back to the View-model (JavaScript).</p>

<p>From [10 things to know about KnockoutJS on day one])http://www.knockmeout.net/2011/06/10-things-to-know-about-knockoutjs-on.html)":</p>

<blockquote><p>Observables are functions. The actual value and subscribers to the observable are cached internally by the function. You set an observable’s value by passing the new value as the only argument to the function and you read the value by passing no arguments.</p></blockquote>

<p>We can use these functions to read the values from the form directly, hide and expose DIVs and change text on the screen.</p>

<p>From the KnockoutJS data-binding <a href="http://knockoutjs.com/documentation/binding-syntax.html">page</a>:</p>

<blockquote><p>Knockout’s declarative binding system provides a concise and powerful way to link data to the UI. It’s generally easy and obvious to bind to simple data properties or to use a single binding.
…
A binding consists of two items, the binding name and value, separated by a colon.</p></blockquote>

<h3>Server Side Code</h3>

<h4>Views</h4>

<p>Combining the functions in our <em>main.js</em> (more on this later), on the client side, with Knockout’s declarative data-binding syntax, we can set up the Jade template in the manner shown below.</p>

<p>In the original Jade template there are placeholder DIVs set up that we then use jQuery to interact with - to display the error messages and results. We also used jQuery to update the styles applied to the DIVs. Since we are using data binding in this example, we will go ahead and set up the DIVs for errors and results and have their HTML and styles in the DOM at all times. Then using the "visible" data binding on the DIVs we can hide and expose them as needed. In the example below we have a couple of data-bind attributes that KnockoutJS will use to handle the two-way communication from the View to the ViewModel and vise-versa.</p>

<p>```html
.form-container
  form(action='', method='post', data-bind='submit: formSubmit')</p>

<pre><code>input#choice1.choice(type='text', placeholder='Choice #1...', name='choice1', data-bind='value: inputOne')
input#choice2.choice(type='text', placeholder='Choice #2...', name='choice2', data-bind='value: inputTwo')
input#decision.btn.btn-success.btn-lg(type='submit', value='Submit' data-bind='enable: !hasResults()')
</code></pre>

<p>.decision-container
  p(class='alert alert-danger' data-bind='visible: error, text: error')
  div(class='progress progress-striped active' data-bind='visible: isProcessing()')</p>

<pre><code>div(class='progress-bar progress-bar-primary' role='progressbar' aria-valuenow='100' aria-valuemin='0' aria-valuemax='100' style='width: 100%')
  span(class='sr-only')
</code></pre>

<p>  div(class='panel panel-lg panel-success' data-bind='visible: hasResults()')</p>

<pre><code>div(class='panel-heading')
  h3(class='panel-title') Decision Results
div(class='panel-body')
  p(class='decision-text', data-bind='html: results')
  div(class='text-center')
    input#decision.btn.btn-success.btn-sm.text-center(type='button', value='Again?' data-bind='click: tryAgain')
</code></pre>

<p>```</p>

<p>In the highlighted text we can see just a few of the many <a href="http://knockoutjs.com/documentation/introduction.html">data-binding</a> possibilities.</p>

<p>The <code>submit</code> binding will handle both the "click" event of the submit button as well as a user hitting the "enter" key. In the background KnockoutJS will also perform a "preventDefault" so that the form does not attempt to submit the form to the server.</p>

<p>The <code>value</code> binding will update the ViewModel with the values entered into the text boxes. A form submit is not needed to consume these values, though in this case we are using a form submit. Alternatively we could use KnockoutJS to <code>subscribe</code> to the change event for these form values and begin our processing when our inputs passed validation.</p>

<p>The <code>text</code> binding will both display values in the View propagated from the ViewModel, as well and send values from the View back to the ViewModel.</p>

<p>The <code>enable</code> binding will disable the submit button when the ViewModel reports back to the View that it has results back from the Twitter Sentiment Analysis.</p>

<h3>Client Side Code</h3>

<h4>Client Side Javascript (<em>main.js</em>)</h4>

<p>The biggest difference to <em>/public/javascripts/main.js</em> is to create a ViewModel, and at the ViewModels closure, call KnockoutJS’s <code>applyBindings</code> method to enable all the two-way data binding goodness.</p>

<p>```javascript
function ViewModel() {</p>

<pre><code>…
</code></pre>

<p>}
ko.applyBindings(new ViewModel());
```</p>

<p>In order to grab the two choices from the form we write a small method that will take use the KnockoutJS observable’s ‘no parameter’ signature to return the values.</p>

<p>```javascript
self.formSubmit = function(){</p>

<pre><code>// some error handling
if(!self.inputOne() || !self.inputTwo()){
    self.error(getError('requiredInputsError'));
} else if(self.inputOne() === self.inputTwo()) {
    self.error(getError('sameInputError'));
} else {
    choices.push(self.inputOne());
    choices.push(self.inputTwo());
    getDecision();
    self.error('');
    self.isProcessing(true);
}
</code></pre>

<p>};
```</p>

<p>The error handling will remain the same, however in the data-binding example we set the value of our <code>error()</code> observable. The act of setting the value of the error observable causes it to change from being a "falsey" value to being a "truthy" value, which cause the <code>visible</code> data binding to also change from <code>visible = false</code> to <code>visible = true</code>. This changes the visibility of the DIV formatted for error reporting as well as set the text of the specific error we encountered.</p>

<p><code>javascript
p(class='alert alert-danger' data-bind='visible: error, text: error')
</code></p>

<p>If no errors are encountered on subsequent submissions we can set up the array we need in the call to Twitter. We also blank out the <code>error()</code> observable that will hide the error reporting DIV and also set the <code>isProcessing()</code> observable to true which will expose the "processing" animation.</p>

<p>We finish up processing the results. This logic to this is essentially unchanged, however, it is shown here to further exemplify how values are set and retrieved in KnockoutJS.</p>

<p>```javascript
function getDecision(){</p>

<pre><code>$.post('/search', { 'choices': JSON.stringify(choices) }, function(data) {
    choices.length = 0;
    var results = JSON.parse(data);

    self.results(RESULTS_START_HTML + results.choice + RESULTS_END_HTML + results.score);
    self.hasResults(true);
    self.isProcessing(false);
});  
</code></pre>

<p>}
```</p>

<p>The logic required to turn off the "processing" animation, expose the DIV formatted to successful results, and display the results are achieved by manipulating more observables. The <code>isProcssing()</code> observable is set to false to hide the animation, the <code>hasResults()</code> observable is set to true to expose the results DIV and finally, by setting the <code>results()</code> observable to some friendly copy we let the user know the outcome of the sentiment analysis. When writing this value out the page we use the <code>html</code> binding rather than the <code>text</code> binding so that we can inject HTML into the copy we are writing to the screen. If the <code>text</code> binding had been used, rather than the <code>html</code> binding,  the HTML would have been encoded and we would have had the literal string <code>&lt;strong&gt;</code> written to the screen - which obviously is not what we want in this case.</p>

<h4>main.js:</h4>

<p><code>javascript
self.RESULTS_START_HTML = 'and the winner is ... &lt;strong&gt;';
self.RESULTS_END_HTML = '&lt;/strong&gt; ... with a score of ';
</code></p>

<h4>index.jade:</h4>

<p><code>html
p(class='decision-text', data-bind='html: results')
</code></p>

<h3>Refactor</h3>

<p>After submitting this code it we determined that the data-binding could have been used even better by not having an error DIV and a results DIV. By taking advantage of the <code>css</code> binding and a KnockoutJS <code>computed</code> observable (an observable that can watch multiple observables and return one value) the Bootstrap class could have easily been changed from <code>danger</code> to <code>success</code> and the title and copy changed using existing observables.</p>

<p>Here <code>shouldShowMessages</code> is a computed observable that will return true if either we have an error or if we have results, otherwise it will return false. Similarly, <code>messageType</code> is a computed observable that will return "error" unless we have successfully received results, at which point it will return "success".</p>

<h4>index.jade</h4>

<p>```html
div(class='panel panel-lg' data-bind='visible: shouldShowMessages, css: "panel-" + messageType()')
  div(class='panel-heading')</p>

<pre><code>h3(class='panel-title' data-bind='text: messageTitle')
</code></pre>

<p>  div(class='panel-body')</p>

<pre><code>p(class='decision-text', data-bind='html: results')
p(class='text-danger', data-bind='text: error')
div(class='text-center')
  input#decision.btn.btn-success.btn-sm.text-center(type='button', value='Again?' data-bind='visible: hasResults(), click: tryAgain')
</code></pre>

<p>```</p>

<h4>main.js:</h4>

<p>```javascript
self.shouldShowMessages = ko.computed(function(){</p>

<pre><code>var returnValue = false;

if (!self.isProcessing() &amp;&amp; (self.hasResults() || self.error() &gt; '')) {
    returnValue = true;
}

return returnValue;
</code></pre>

<p>});
self.messageType = ko.computed(function(){</p>

<pre><code>var returnValue = 'danger';

self.messageTitle(ERROR_TITLE);
if (self.hasResults()) {
    returnValue = 'success';
    self.messageTitle(SUCCESS_TITLE);
}

return returnValue;
</code></pre>

<p>});
```</p>

<p>It should be noted that <em>most</em> data-bindings will make a call to <code>ko.utils.unwrapObservable()</code> behind the scenes. This allows us to make the data-bind safely on both observables and non-observables. However, if you take a look at where the <code>messageType</code> observable is used you will notice that we are referencing the observable as a function (with parentheses). This is because we are accessing the observable inside an expression.</p>

<h2>Conclusion</h2>

<p>Thanks to <a href="http://www.meetup.com/Node-js-Denver-Boulder/members/74687302/">John Rosendahl</a> for help with writing the intro.</p>

<p>Pull requests are welcomed/encouraged/needed. Enjoy!</p>
]]></content>
  </entry>
  
</feed>
