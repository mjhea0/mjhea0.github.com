<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: node | Michael Herman]]></title>
  <link href="http://mjhea0.github.com/blog/categories/node/atom.xml" rel="self"/>
  <link href="http://mjhea0.github.com/"/>
  <updated>2015-11-01T05:50:05-07:00</updated>
  <id>http://mjhea0.github.com/</id>
  <author>
    <name><![CDATA[Michael Herman]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Migrations with Sequelize]]></title>
    <link href="http://mjhea0.github.com/blog/2015/10/26/migrations-with-sequelize/"/>
    <updated>2015-10-26T20:25:00-06:00</updated>
    <id>http://mjhea0.github.com/blog/2015/10/26/migrations-with-sequelize</id>
    <content type="html"><![CDATA[]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Node, Postgres, and Sequelize]]></title>
    <link href="http://mjhea0.github.com/blog/2015/10/22/node-postgres-sequelize/"/>
    <updated>2015-10-22T10:52:00-06:00</updated>
    <id>http://mjhea0.github.com/blog/2015/10/22/node-postgres-sequelize</id>
    <content type="html"><![CDATA[<p><strong>Let&#39;s build a CRUD app with Node (v4.1.1), Express (v4.13.1), Sequelize (v3.12.2), and PostgreSQL (9.4.4).</strong></p>

<div style="text-align:center;">
  <img src="http://mjhea0.github.com/images/node-sequelize.png" style="max-width: 100%; border:0;" alt="node sequelize">
</div>

<p><strong>Updates</strong>:<br>
  - <em>November 1st, 2015</em> - Added Database Migrations</p>

<blockquote>
<p>This a follow-up to <a href="http://mherman.org/blog/2015/02/12/postgresql-and-nodejs/#.ViVUDxNViko">PostgreSQL and NodeJS</a>.</p>
</blockquote>

<h2>Getting Started</h2>

<p>Grab the initial boilerplate and install the dependencies:</p>

<p><code>sh<br>
$ git clone git@github.com:mjhea0/node-postgres-sequelize.git<br>
$ git checkout tags/v1<br>
$ npm install<br>
</code></p>

<p>Now run a quick sanity check:</p>

<p><code>sh<br>
$ gulp<br>
</code></p>

<p>If all went well, a new browser window should have opened to <a href="http://localhost:5000/">http://localhost:5000/</a> and you should see the &quot;Welcome to Express.&quot; text.</p>

<h2>Sequelize</h2>

<p>With Postgres listening on port 5432, we can make a connection to it using the <a href="http://docs.sequelizejs.com/en/latest/">Sequelize</a> library, <em>an Object Relational Mapper (ORM), written in JavaScript, which supports MySQL, PostgreSQL, SQLite, and MariaDB</em>.</p>

<blockquote>
<p>Need to set up Postgres? On a Mac? Check out <a href="http://postgresapp.com/">Postgres.app</a>.</p>
</blockquote>

<p>Install Sequelize, <a href="https://www.npmjs.com/package/pg">pg</a> (for making the database connection), and <a href="https://www.npmjs.com/package/pg-hstore">pg-hstore</a> (for serializing and deserializing JSON into the <a href="http://www.postgresql.org/docs/9.0/static/hstore.html">Postgres hstore key/value pair format</a>):</p>

<p><code>sh<br>
$ npm install sequelize@3.12.2 pg@4.4.3 pg-hstore@2.3.2 --save<br>
</code></p>

<h2>Migrations</h2>

<p>The <a href="https://github.com/sequelize/cli">Sequelize CLI</a> is used to bootstrap a new project and handle <a href="https://en.wikipedia.org/wiki/Schema_migration">database migrations</a> directly from the terminal.</p>

<blockquote>
<p>Read more about the Sequelize CLI from the official <a href="http://docs.sequelizejs.com/en/latest/docs/migrations/">documentation</a>.</p>
</blockquote>

<h3>Init</h3>

<p>Start by installing the package:</p>

<p><code>sh<br>
$ npm install sequelize-cli@2.1.0 --save<br>
</code></p>

<p>Next, create a config file called <em>.sequelizerc</em> in your project root to specify the paths to specific files required by Sequelize:</p>

<p>```javascript<br>
var path = require(&#39;path&#39;);</p>

<p>module.exports = {<br>
  &#39;config&#39;: path.resolve(&#39;./server&#39;, &#39;config.json&#39;),<br>
  &#39;migrations-path&#39;: path.resolve(&#39;./server&#39;, &#39;migrations&#39;),<br>
  &#39;models-path&#39;: path.resolve(&#39;./server&#39;, &#39;models&#39;),<br>
  &#39;seeders-path&#39;: path.resolve(&#39;./server&#39;, &#39;seeders&#39;)<br>
}<br>
```</p>

<p>Now, run the init command to create the files (<em>config.json</em>) and folders (&quot;migrations&quot;, &quot;models&quot;, and &quot;seeders&quot;):</p>

<p><code>sh<br>
$ node_modules/.bin/sequelize init<br>
</code></p>

<p>Take a look at the <em>index.js</em> file within the &quot;models&quot; directory:</p>

<p>```javascript<br>
&#39;use strict&#39;;</p>

<p>var fs        = require(&#39;fs&#39;);<br>
var path      = require(&#39;path&#39;);<br>
var Sequelize = require(&#39;sequelize&#39;);<br>
var basename  = path.basename(module.filename);<br>
var env       = process.env.NODE<em>ENV || &#39;development&#39;;<br>
var config    = require(</em>_dirname + &#39;/../config.json&#39;)[env];<br>
var db        = {};</p>

<p>if (config.use<em>env</em>variable) {<br>
  var sequelize = new Sequelize(process.env[config.use<em>env</em>variable]);<br>
} else {<br>
  var sequelize = new Sequelize(config.database, config.username, config.password, config);<br>
}</p>

<p>fs<br>
  .readdirSync(__dirname)<br>
  .filter(function(file) {<br>
    return (file.indexOf(&#39;.&#39;) !== 0) &amp;&amp; (file !== basename);<br>
  })<br>
  .forEach(function(file) {<br>
    if (file.slice(-3) !== &#39;.js&#39;) return;<br>
    var model = sequelize<a href="path.join(__dirname,%20file">&#39;import&#39;</a>);<br>
    db[model.name] = model;<br>
  });</p>

<p>Object.keys(db).forEach(function(modelName) {<br>
  if (db[modelName].associate) {<br>
    db[modelName].associate(db);<br>
  }<br>
});</p>

<p>db.sequelize = sequelize;<br>
db.Sequelize = Sequelize;</p>

<p>module.exports = db;<br>
```</p>

<p>Here, we establish a connection to the database, grab all the model files from the current directory, add them to the <code>db</code> object, and apply any relations between each model (if any).</p>

<h3>Config</h3>

<p>Be sure to also update the <em>config.js</em> file for your development, test, and production databases:</p>

<p><code>javascript<br>
{<br>
  &quot;development&quot;: {<br>
    &quot;username&quot;: &quot;update me&quot;,<br>
    &quot;password&quot;: &quot;update me&quot;,<br>
    &quot;database&quot;: &quot;todos&quot;,<br>
    &quot;host&quot;: &quot;127.0.0.1&quot;,<br>
    &quot;port&quot;: &quot;5432&quot;,<br>
    &quot;dialect&quot;: &quot;postgres&quot;<br>
  },<br>
  &quot;test&quot;: {<br>
    &quot;username&quot;: &quot;update me&quot;,<br>
    &quot;password&quot;: &quot;update me&quot;,<br>
    &quot;database&quot;: &quot;update_me&quot;,<br>
    &quot;host&quot;: &quot;update me&quot;,<br>
    &quot;dialect&quot;: &quot;update me&quot;<br>
  },<br>
  &quot;production&quot;: {<br>
    &quot;username&quot;: &quot;update me&quot;,<br>
    &quot;password&quot;: &quot;update me&quot;,<br>
    &quot;database&quot;: &quot;update me&quot;,<br>
    &quot;host&quot;: &quot;update me&quot;,<br>
    &quot;dialect&quot;: &quot;update me&quot;<br>
  }<br>
}<br>
</code></p>

<blockquote>
<p>If you are just running this locally, using the basic development server, then just update the <code>development</code> config.</p>
</blockquote>

<p>Go ahead and create a database named &quot;todos&quot;.</p>

<h3>Create Migration</h3>

<p>Now let&#39;s create a model along with a migration. Since we&#39;re working with todos, run the following command:</p>

<p><code>sh<br>
$ node_modules/.bin/sequelize model:create --name Todo --attributes &quot;title:string, complete:boolean,UserId:integer&quot;<br>
</code></p>

<p>Take a look a the newly created model file, <em>todo.js</em> in the models directory:</p>

<p><code>javascript<br>
&#39;use strict&#39;;<br>
module.exports = function(sequelize, DataTypes) {<br>
  var Todo = sequelize.define(&#39;Todo&#39;, {<br>
    title: DataTypes.STRING,<br>
    complete: DataTypes.BOOLEAN<br>
  }, {<br>
    classMethods: {<br>
      associate: function(models) {<br>
        // associations can be defined here<br>
      }<br>
    }<br>
  });<br>
  return Todo;<br>
};<br>
</code></p>

<p>The corresponding migration file can be found in the &quot;migrations&quot; folder. Take a look. Next, let&#39;s associate a user to a todo. First, we need to define a new migration:</p>

<p><code>sh<br>
$ node_modules/.bin/sequelize model:create --name User --attributes &quot;email:string&quot;<br>
</code></p>

<p>Now we need to set up the relationship between the two models...</p>

<h3>Associations</h3>

<p>To associate the models (one user can have many todos), make the following updates...</p>

<p><strong>todo.js</strong>:</p>

<p><code>javascript<br>
&#39;use strict&#39;;<br>
module.exports = function(sequelize, DataTypes) {<br>
  var Todo = sequelize.define(&#39;Todo&#39;, {<br>
    title: DataTypes.STRING,<br>
    complete: DataTypes.BOOLEAN<br>
  }, {<br>
    classMethods: {<br>
      associate: function(models) {<br>
        Todo.belongsTo(models.User);<br>
      }<br>
    }<br>
  });<br>
  return Todo;<br>
};<br>
</code></p>

<p><strong>user.js</strong>:</p>

<p><code>javascript<br>
&#39;use strict&#39;;<br>
module.exports = function(sequelize, DataTypes) {<br>
  var User = sequelize.define(&#39;User&#39;, {<br>
    email: DataTypes.STRING<br>
  }, {<br>
    classMethods: {<br>
      associate: function(models) {<br>
        User.hasMany(models.Todo);<br>
      }<br>
    }<br>
  });<br>
  return User;<br>
};<br>
</code></p>

<h3>Sync</h3>

<p>Finally, before we sync, let&#39;s add an additional attribute to the <code>complete</code> filed in the <em>todo.js</em> file:</p>

<p><code>javascript<br>
&#39;use strict&#39;;<br>
module.exports = function(sequelize, DataTypes) {<br>
  var Todo = sequelize.define(&#39;Todo&#39;, {<br>
    title: DataTypes.STRING,<br>
    complete: {<br>
      type: DataTypes.BOOLEAN,<br>
      defaultValue: false<br>
    }<br>
  }, {<br>
    classMethods: {<br>
      associate: function(models) {<br>
        Todo.belongsTo(models.User);<br>
      }<br>
    }<br>
  });<br>
  return Todo;<br>
};<br>
</code></p>

<p>Run the migration to create the tables:</p>

<p>```sh<br>
$ node_modules/.bin/sequelize db:migrate</p>

<p>Sequelize [Node: 4.1.1, CLI: 2.1.0, ORM: 3.12.2]</p>

<p>Loaded configuration file &quot;server/config.json&quot;.<br>
Using environment &quot;development&quot;.<br>
Using gulpfile ~/node_modules/sequelize-cli/lib/gulpfile.js<br>
Starting &#39;db:migrate&#39;...<br>
== 20151101052127-create-todo: migrating =======<br>
== 20151101052127-create-todo: migrated (0.049s)</p>

<p>== 20151101052148-create-user: migrating =======<br>
== 20151101052148-create-user: migrated (0.042s)</p>

<p>```</p>

<h2>CRUD</h2>

<p>With Sequelize set up and the models defined, we can now set up our RESTful routing structure for the todo resource. First, within <em>index.js</em> in the &quot;routes&quot; folder add the following requirement:</p>

<p><code>javascript<br>
var models = require(&#39;../models/index&#39;);<br>
</code></p>

<p>Then add a route for creating a new user:</p>

<p><code>javascript<br>
router.post(&#39;/users&#39;, function(req, res) {<br>
  models.User.create({<br>
    email: req.body.email<br>
  }).then(function(user) {<br>
    res.json(todo);<br>
  });<br>
});<br>
</code></p>

<p>To add a new user, run the server - <code>gulp</code> - and then run the following in a new terminal window:</p>

<p><code>sh<br>
$ curl --data &quot;email=michael@mherman.org&quot; http://127.0.0.1:3000/users<br>
</code></p>

<p>You should see:</p>

<p><code>json<br>
{<br>
  &quot;id&quot;:1,<br>
  &quot;email&quot;:&quot;michael@mherman.org&quot;,<br>
  &quot;updatedAt&quot;:&quot;2015-11-01T12:24:20.375Z&quot;,<br>
  &quot;createdAt&quot;:&quot;2015-11-01T12:24:20.375Z&quot;<br>
}<br>
</code></p>

<p>Now we can add the todo routes...</p>

<h3>GET all todos</h3>

<p><code>javascript<br>
// get all todos<br>
router.get(&#39;/todos&#39;, function(req, res) {<br>
  models.Todo.findAll({}).then(function(todos) {<br>
    res.json(todos);<br>
  });<br>
});<br>
</code></p>

<p>When you hit that route you should see an empty array since we have not added any todos. Let&#39;s do that now.</p>

<h3>POST</h3>

<p><code>javascript<br>
// add new todo<br>
router.post(&#39;/todos&#39;, function(req, res) {<br>
  models.Todo.create({<br>
    title: req.body.title,<br>
    UserId: req.body.user_id<br>
  }).then(function(todo) {<br>
    res.json(todo);<br>
  });<br>
});<br>
</code></p>

<p>Now let&#39;s test:</p>

<p><code>sh<br>
$ curl --data &quot;title=test&amp;user_id=1&quot; http://127.0.0.1:3000/todos<br>
$ curl --data &quot;title=test2&amp;user_id=1&quot; http://127.0.0.1:3000/todos<br>
</code></p>

<p>Then if you go back and hit <a href="http://127.0.0.1:3000/todos">http://127.0.0.1:3000/todos</a> in our browser, you should see:</p>

<p><code>json<br>
[<br>
  {<br>
    id: 1,<br>
    title: &quot;test&quot;,<br>
    complete: false,<br>
    createdAt: &quot;2015-11-01T12:31:56.451Z&quot;,<br>
    updatedAt: &quot;2015-11-01T12:31:56.451Z&quot;,<br>
    UserId: 1<br>
  },<br>
  {<br>
    id: 2,<br>
    title: &quot;test2&quot;,<br>
    complete: false,<br>
    createdAt: &quot;2015-11-01T12:32:09.000Z&quot;,<br>
    updatedAt: &quot;2015-11-01T12:32:09.000Z&quot;,<br>
    UserId: 1<br>
  }<br>
]<br>
</code></p>

<h3>GET single todo</h3>

<p>How about getting a single todo?</p>

<p><code>javascript<br>
// get single todo<br>
router.get(&#39;/todo/:id&#39;, function(req, res) {<br>
  models.Todo.find({<br>
    where: {<br>
      id: req.params.id<br>
    }<br>
  }).then(function(todo) {<br>
    res.json(todo);<br>
  });<br>
});<br>
</code></p>

<p>Navigate to <a href="http://localhost:3000/todo/1">http://localhost:3000/todo/1</a> in your browser. You should the single todo.</p>

<h3>PUT</h3>

<p>Need to update a todo?</p>

<p><code>javascript<br>
// update single todo<br>
router.put(&#39;/todo/:id&#39;, function(req, res) {<br>
  models.Todo.find({<br>
    where: {<br>
      id: req.params.id<br>
    }<br>
  }).then(function(todo) {<br>
    if(todo){<br>
      todo.updateAttributes({<br>
        title: req.body.title,<br>
        complete: req.body.complete<br>
      }).then(function(todo) {<br>
        res.send(todo);<br>
      });<br>
    }<br>
  });<br>
});<br>
</code></p>

<p>And now for a test, of course:</p>

<p><code>sh<br>
$ curl -X PUT --data &quot;complete=true&quot; http://127.0.0.1:3000/todo/2<br>
</code></p>

<h3>DELETE</h3>

<p>Want to delete a todo?</p>

<p><code>javascript<br>
// delete a single todo<br>
router.delete(&#39;/todo/:id&#39;, function(req, res) {<br>
  models.Todo.destroy({<br>
    where: {<br>
      id: req.params.id<br>
    }<br>
  }).then(function(todo) {<br>
    res.json(todo);<br>
  });<br>
});<br>
</code></p>

<p>Test:</p>

<p><code>sh<br>
$ curl -X DELETE http://127.0.0.1:3000/todo/1<br>
</code></p>

<p>Again, navigate to <a href="http://localhost:3000/todos">http://localhost:3000/todos</a> in your browser. You should now only see one todo.</p>

<h2>Conclusion</h2>

<p>That&#39;s it for the basic server-side code. You now have a database, models, and migrations set up. Whenever you want to update the state of your database, just add additional migrations and then run them as necessary.</p>

<p>Grab the code from the <a href="https://github.com/mjhea0/node-postgres-sequelize">Github repo</a>. Comment below with questions. Cheers!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Social Authentication in Node.js with Passport]]></title>
    <link href="http://mjhea0.github.com/blog/2015/09/26/social-authentication-in-node-dot-js-with-passport/"/>
    <updated>2015-09-26T13:37:00-06:00</updated>
    <id>http://mjhea0.github.com/blog/2015/09/26/social-authentication-in-node-dot-js-with-passport</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/jaredhanson/passport">Passport</a> is a library that provides a mechanism for easily setting up an authentication/registration system with support for <a href="https://github.com/jaredhanson/passport#strategies">several frameworks and auth providers</a>. <strong>In this tutorial, we’ll demonstrate in detail how to integrate this library into a Node.JS/Express 4 application to provide user authentication through LinkedIn, Github, and Twitter using OAuth 2.0.</strong></p>

<div style="text-align:center;">
  <img src="http://mjhea0.github.com/images/passport-social-auth.png" style="max-width: 100%; border:0;" alt="passport social auth">
</div>

<p>We will be using:</p>

<ul>
<li>NodeJS v<a href="https://nodejs.org/docs/v4.1.1/api/all.html">4.1.1</a></li>
<li>ExpressJS v<a href="http://expressjs.com/4x/api.html">4.13.1</a></li>
<li>Mongoose v<a href="http://mongoosejs.com/docs/guide.html">4.1.8</a></li>
<li>Passport Strategies:

<ul>
<li>passport: v<a href="https://github.com/jaredhanson/passport">0.3.0</a></li>
<li>passport-linkedin: v<a href="https://github.com/jaredhanson/passport-linkedin">1.0.0</a></li>
<li>passport-github2: v<a href="https://github.com/cfsghost/passport-github">0.1.9</a></li>
<li>passport-twitter: v<a href="https://github.com/jaredhanson/passport-twitter">1.0.3</a></li>
</ul></li>
</ul>

<blockquote>
<p>For all dependencies, please view the <em>package.json</em> file in the <a href="https://github.com/mjhea0/passport-social-auth">repo</a>.</p>
</blockquote>

<h2>OAuth 2.0?</h2>

<p><a href="http://oauth.net/2/">OAuth 2.0</a> is the successor of the OAuth protocol (<a href="https://en.wikipedia.org/wiki/OAuth">open standard for authorization</a>), which enables third-party applications, such as the one we&#39;ll be building, access to an HTTP service without having to share secure credentials.</p>

<h2>Project Setup</h2>

<p>Let&#39;s get started!</p>

<h3>Boilerplate</h3>

<p>Start by downloading the project structure from the <a href="https://github.com/mjhea0/passport-social-auth/releases/tag/v1">Github repo</a>.</p>

<p>You should have:</p>

<p><code>sh<br>
├── client<br>
│   └── public<br>
│       ├── css<br>
│       │   └── main.css<br>
│       └── js<br>
│           └── main.js<br>
├── package.json<br>
└── server<br>
    ├── app.js<br>
    ├── bin<br>
    │   └── www<br>
    ├── routes<br>
    │   └── index.js<br>
    └── views<br>
        ├── error.html<br>
        ├── index.html<br>
        └── layout.html<br>
</code></p>

<h2>Passport</h2>

<p>Install Passport as well as the specific <a href="https://github.com/jaredhanson/passport#search-all-strategies">Passport Strategies</a>:</p>

<p><code>sh<br>
$ npm install passport@0.3.0 --save<br>
$ npm install passport-github2@0.1.9 passport-linkedin@1.0.0 passport-twitter@1.0.3 --save<br>
</code></p>

<p>Create an &quot;auth&quot; directory in the &quot;server&quot; and add the following files:</p>

<p><code>sh<br>
└── auth<br>
  ├── github.js<br>
  ├── linkedin.js<br>
  └── twitter.js<br>
</code></p>

<p>Add the Passport dependency to <em>app.js</em>:</p>

<p><code>javascript<br>
var passport = require(&#39;passport&#39;);<br>
</code></p>

<p>Install the <a href="https://github.com/expressjs/session">express session</a> middleware:</p>

<p><code>sh<br>
$ npm install express-session@1.11.3 --save<br>
</code></p>

<p>And add it as a dependency:</p>

<p><code>javascript<br>
var session = require(&#39;express-session&#39;);<br>
</code></p>

<p>Then add the required middleware:</p>

<p><code>javascript<br>
app.use(session({<br>
  secret: &#39;keyboard cat&#39;,<br>
  resave: true,<br>
  saveUninitialized: true<br>
}));<br>
app.use(passport.initialize());<br>
app.use(passport.session());<br>
</code></p>

<h3>Configuration</h3>

<p>Add a <em>_config.js</em> file to the &quot;server&quot; and add the following:</p>

<p>```javascript<br>
var ids = {<br>
  github: {<br>
    clientID: &#39;get<em>your</em>own&#39;,<br>
    clientSecret: &#39;get<em>your</em>own&#39;,<br>
    callbackURL: &quot;http://127.0.0.1:3000/auth/github/callback&quot;<br>
  },<br>
  linkedin: {<br>
    clientID: &#39;get<em>your</em>own&#39;,<br>
    clientSecret: &#39;get<em>your</em>own&#39;,<br>
    callbackURL: &quot;http://127.0.0.1:3000/auth/linkedin/callback&quot;<br>
  },<br>
  twitter: {<br>
    consumerKey: &#39;get<em>your</em>own&#39;,<br>
    consumerSecret: &#39;get<em>your</em>own&#39;,<br>
    callbackURL: &quot;http://127.0.0.1:3000/auth/twitter/callback&quot;<br>
  }<br>
};</p>

<p>module.exports = ids;<br>
```</p>

<p>Make sure to add this file to your <em>.gitignore</em> since this will contain sensitive info.</p>

<h3>MongoDB and Mongoose</h3>

<p>Install <a href="http://mongoosejs.com/">Mongoose</a>:</p>

<p><code>sh<br>
$ npm install mongoose@4.1.8 --save<br>
</code></p>

<p>Require the dependency in <em>app.js</em>:</p>

<p><code>javascript<br>
var mongoose = require(&#39;mongoose&#39;);<br>
</code></p>

<p>Then establish the connection to MongoDB within <em>app.js</em>:</p>

<p><code>javascript<br>
// *** mongoose *** //<br>
mongoose.connect(&#39;mongodb://localhost/passport-social-auth&#39;);<br>
</code></p>

<p>Add a Mongoose Schema to a new file called <em>user.js</em> in a new folder, within &quot;server&quot;, called &quot;models&quot;:</p>

<p>```javascript<br>
var mongoose = require(&#39;mongoose&#39;);<br>
var Schema = mongoose.Schema;</p>

<p>// create User Schema<br>
var User = new Schema({<br>
  name: String,<br>
  someID: String<br>
});</p>

<p>module.exports = mongoose.model(&#39;users&#39;, User);<br>
```</p>

<h3>Serialize and Deserialize</h3>

<p>Passport needs to serialize and deserialize user instances from a session store to support login sessions. To add this funcionality, create an <em>init.js</em> file within the &quot;auth&quot; directory, and then add the following code:</p>

<p>```javascript<br>
var passport = require(&#39;passport&#39;);<br>
var User = require(&#39;../models/user&#39;);</p>

<p>module.exports = function() {</p>

<p>passport.serializeUser(function(user, done) {<br>
    done(null, user.id);<br>
  });</p>

<p>passport.deserializeUser(function(id, done) {<br>
    User.findById(id, function (err, user) {<br>
      done(err, user);<br>
    });<br>
  });</p>

<p>};<br>
```</p>

<h3>Routes and Views</h3>

<p>Before we test, add the following route-</p>

<p><code>javascript<br>
router.get(&#39;/login&#39;, function(req, res, next) {<br>
  res.send(&#39;Go back and register!&#39;);<br>
});<br>
</code></p>

<p>-and update the <em>index.html</em> file:</p>

<p><br>
```html<br>
{% extends &#39;layout.html&#39; %}</p>

<p>{% block title %}{% endblock %}</p>

<p>{% block content %}</p>

<p><div class="container"></p>
<div class="highlight"><pre><code class="text">&lt;h1&gt;{{ title }}&lt;/h1&gt;
&lt;p&gt;Welcome! Please Login.&lt;/p&gt;
&lt;hr&gt;&lt;br&gt;
&lt;a href=&quot;http://mjhea0.github.com/auth/linkedin&quot; class=&quot;btn btn-default&quot;&gt;LinkedIn&lt;/a&gt;
&lt;a href=&quot;http://mjhea0.github.com/auth/github&quot; class=&quot;btn btn-default&quot;&gt;Github&lt;/a&gt;
&lt;a href=&quot;http://mjhea0.github.com/auth/twitter&quot; class=&quot;btn btn-default&quot;&gt;Twitter&lt;/a&gt;
</code></pre>
</div>

<p></div></p>

<p>{% endblock %}<br>
```<br>
</p>

<h3>Sanity Check</h3>

<p>Test this code to make sure all is well:</p>

<p><code>sh<br>
$ npm start<br>
</code></p>

<p>Once done, kill the server, and then commit your code and push to Github.</p>

<blockquote>
<p>Need the updated code? Grab it <a href="https://github.com/mjhea0/passport-social-auth/releases/tag/v2">here</a>.</p>
</blockquote>

<h2>LinkedIn Auth</h2>

<blockquote>
<p><a href="https://github.com/jaredhanson/passport-linkedin">https://github.com/jaredhanson/passport-linkedin</a></p>
</blockquote>

<p>For almost all of the strategies, you will need to-</p>

<ol>
<li>Create an app through the auth provider</li>
<li>Update the config file with the required IDs and keys as well as a callback URL</li>
<li>Configure the Passport strategy</li>
<li>Add the required routes</li>
<li>Update the view</li>
</ol>

<h3>Create an App</h3>

<p>Navigate to <a href="https://www.linkedin.com/developer/apps/">LinkedIn Developers</a> to register a new application. Just enter dummy info, make sure to add the callback - <a href="http://127.0.0.1:3000/auth/linkedin/callback">http://127.0.0.1:3000/auth/linkedin/callback</a> - and update the config within the app:</p>

<p><code>javascript<br>
linkedin: {<br>
 clientID: &#39;ADD YOUR ID HERE&#39;,<br>
 clientSecret: &#39;ADD YOUR SECRET HERE&#39;,<br>
 callbackURL: &quot;http://127.0.0.1:3000/auth/linkedin/callback&quot;<br>
},<br>
</code></p>

<h3>Configure Strategy</h3>

<blockquote>
<p><a href="https://github.com/jaredhanson/passport-linkedin#usage">https://github.com/jaredhanson/passport-linkedin#usage</a></p>
</blockquote>

<p>Add the following code to <em>linkedin.js</em>:</p>

<p>```javascript<br>
var passport = require(&#39;passport&#39;);<br>
var LinkedInStrategy = require(&#39;passport-linkedin&#39;);</p>

<p>var User = require(&#39;../models/user&#39;);<br>
var config = require(&#39;../_config&#39;);<br>
var init = require(&#39;./init&#39;);</p>

<p>passport.use(new LinkedInStrategy({<br>
    consumerKey: config.linkedin.clientID,<br>
    consumerSecret: config.linkedin.clientSecret,<br>
    callbackURL: config.linkedin.callbackURL<br>
  },<br>
  // linkedin sends back the tokens and progile info<br>
  function(token, tokenSecret, profile, done) {</p>
<div class="highlight"><pre><code class="text">var searchQuery = {
  name: profile.displayName
};

var updates = {
  name: profile.displayName,
  someID: profile.id
};

var options = {
  upsert: true
};

// update the user if s/he exists or add a new user
User.findOneAndUpdate(searchQuery, updates, options, function(err, user) {
  if(err) {
    return done(err);
  } else {
    return done(null, user);
  }
});
</code></pre>
</div>

<p>}</p>

<p>));</p>

<p>// serialize user into the session<br>
init();</p>

<p>module.exports = passport;<br>
```</p>

<p>Aside for the Passport magic, you can see that we&#39;re either updating the user, if the user is found, or creating a new user, if a user is not found.</p>

<h3>Add Routes</h3>

<blockquote>
<p><a href="https://github.com/jaredhanson/passport-linkedin#authenticate-requests">https://github.com/jaredhanson/passport-linkedin#authenticate-requests</a></p>
</blockquote>

<p>Update the routes with:</p>

<p>```javascript<br>
router.get(&#39;/auth/linkedin&#39;, passportLinkedIn.authenticate(&#39;linkedin&#39;));</p>

<p>router.get(&#39;/auth/linkedin/callback&#39;,<br>
  passportLinkedIn.authenticate(&#39;linkedin&#39;, { failureRedirect: &#39;/login&#39; }),<br>
  function(req, res) {<br>
    // Successful authentication<br>
    res.json(req.user);<br>
  });<br>
```</p>

<p>Add in the dependency as well:</p>

<p><code>javascript<br>
var passportLinkedIn = require(&#39;../auth/linkedin&#39;);<br>
</code></p>

<h3>Sanity Check</h3>

<p>Test this out. <em>Be sure to use <a href="http://127.0.0.1:3000/">http://127.0.0.1:3000/</a> rather than <a href="http://localhost:3000/">http://localhost:3000/</a>.</em></p>

<p>Now, let&#39;s just duplicate that workflow for the remaining providers...</p>

<h2>Github Auth</h2>

<blockquote>
<p><a href="https://github.com/cfsghost/passport-github">https://github.com/cfsghost/passport-github</a></p>
</blockquote>

<h3>Create an App</h3>

<p>Again, create an app, adding in the correct callback URL, and add the given client ID and Secret Key to the <em>_config.js</em> file.</p>

<h3>Configure Strategy</h3>

<blockquote>
<p><a href="https://github.com/cfsghost/passport-github#configure-strategy">https://github.com/cfsghost/passport-github#configure-strategy</a></p>
</blockquote>

<p>```javascript<br>
var passport = require(&#39;passport&#39;);<br>
var GitHubStrategy = require(&#39;passport-github2&#39;).Strategy;</p>

<p>var User = require(&#39;../models/user&#39;);<br>
var config = require(&#39;../_config&#39;);<br>
var init = require(&#39;./init&#39;);</p>

<p>passport.use(new GitHubStrategy({<br>
  clientID: config.github.clientID,<br>
  clientSecret: config.github.clientSecret,<br>
  callbackURL: config.github.callbackURL<br>
  },<br>
  function(accessToken, refreshToken, profile, done) {</p>
<div class="highlight"><pre><code class="text">var searchQuery = {
  name: profile.displayName
};

var updates = {
  name: profile.displayName,
  someID: profile.id
};

var options = {
  upsert: true
};

// update the user if s/he exists or add a new user
User.findOneAndUpdate(searchQuery, updates, options, function(err, user) {
  if(err) {
    return done(err);
  } else {
    return done(null, user);
  }
});
</code></pre>
</div>

<p>}</p>

<p>));</p>

<p>// serialize user into the session<br>
init();</p>

<p>module.exports = passport;<br>
```</p>

<h3>Add Routes</h3>

<blockquote>
<p><a href="https://github.com/cfsghost/passport-github#authenticate-requests">https://github.com/cfsghost/passport-github#authenticate-requests</a></p>
</blockquote>

<p>```javascript<br>
var passportGithub = require(&#39;../auth/github&#39;);</p>

<p>router.get(&#39;/auth/github&#39;, passportGithub.authenticate(&#39;github&#39;, { scope: [ &#39;user:email&#39; ] }));</p>

<p>router.get(&#39;/auth/github/callback&#39;,<br>
  passportGithub.authenticate(&#39;github&#39;, { failureRedirect: &#39;/login&#39; }),<br>
  function(req, res) {<br>
    // Successful authentication<br>
    res.json(req.user);<br>
  });<br>
```</p>

<h2>Twitter Auth</h2>

<blockquote>
<p><a href="https://github.com/jaredhanson/passport-twitter">https://github.com/jaredhanson/passport-twitter</a></p>
</blockquote>

<h3>Create an App</h3>

<p>Create an app on the <a href="https://apps.twitter.com/">Twitter Developer page</a>, and grab the Consumer Key and Secret.</p>

<h3>Configure Strategy</h3>

<blockquote>
<p><a href="https://github.com/jaredhanson/passport-twitter#configure-strategy">https://github.com/jaredhanson/passport-twitter#configure-strategy</a></p>
</blockquote>

<p>```javascript<br>
var passport = require(&#39;passport&#39;);<br>
var TwitterStrategy = require(&#39;passport-twitter&#39;).Strategy;</p>

<p>var User = require(&#39;../models/user&#39;);<br>
var config = require(&#39;../_config&#39;);<br>
var init = require(&#39;./init&#39;);</p>

<p>passport.use(new TwitterStrategy({<br>
    consumerKey: config.twitter.consumerKey,<br>
    consumerSecret: config.twitter.consumerSecret,<br>
    callbackURL: config.twitter.callbackURL<br>
  },<br>
  function(accessToken, refreshToken, profile, done) {</p>
<div class="highlight"><pre><code class="text">var searchQuery = {
  name: profile.displayName
};

var updates = {
  name: profile.displayName,
  someID: profile.id
};

var options = {
  upsert: true
};

// update the user if s/he exists or add a new user
User.findOneAndUpdate(searchQuery, updates, options, function(err, user) {
  if(err) {
    return done(err);
  } else {
    return done(null, user);
  }
});
</code></pre>
</div>

<p>}</p>

<p>));</p>

<p>// serialize user into the session<br>
init();</p>

<p>module.exports = passport;<br>
```</p>

<h3>Add Routes</h3>

<blockquote>
<p><a href="https://github.com/jaredhanson/passport-twitter#authenticate-requests">https://github.com/jaredhanson/passport-twitter#authenticate-requests</a></p>
</blockquote>

<p>```javascript<br>
var passportTwitter = require(&#39;../auth/twitter&#39;);</p>

<p>router.get(&#39;/auth/twitter&#39;, passportTwitter.authenticate(&#39;twitter&#39;));</p>

<p>router.get(&#39;/auth/twitter/callback&#39;,<br>
  passportTwitter.authenticate(&#39;twitter&#39;, { failureRedirect: &#39;/login&#39; }),<br>
  function(req, res) {<br>
    // Successful authentication<br>
    res.json(req.user);<br>
  });<br>
```</p>

<h2>Conclusion</h2>

<p>Try adding some additional <a href="https://github.com/jaredhanson/passport#strategies">strategies</a>, comment below if you have questions, and grab the final code from the <a href="https://github.com/mjhea0/passport-social-auth">repo</a>.</p>

<p>Thanks for reading!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing Node.js with Mocha and Chai]]></title>
    <link href="http://mjhea0.github.com/blog/2015/09/10/testing-node-js-with-mocha-and-chai/"/>
    <updated>2015-09-10T10:52:00-06:00</updated>
    <id>http://mjhea0.github.com/blog/2015/09/10/testing-node-js-with-mocha-and-chai</id>
    <content type="html"><![CDATA[<p><strong>This post serves as an introduction to testing a Node.js RESTful API with <a href="http://mochajs.org/">Mocha</a> (v2.3.1). a JavaScript testing framework.</strong></p>

<div style="text-align:center;">
  <img src="http://mjhea0.github.com/images/mocha-chaijs.png" style="max-width: 100%; border:0;" alt="mocha and chai.js">
</div>

<h2>Why Test?</h2>

<p>Before diving in it&#39;s important that you understand <em>why</em> tests are necessary.</p>

<p>Grab the Node/Express sample CRUD application from the <a href="https://github.com/mjhea0/node-mocha-chai-tutorial">repository</a>:</p>

<p><code>sh<br>
$ git clone https://github.com/mjhea0/node-mocha-chai-tutorial.git<br>
$ git checkout tags/v1<br>
</code></p>

<p>Once you have <em>v1</em> of the app, manually go through it and test each of the CRUD functions via cURL (or <a href="http://httpie.org/">HTTPie</a> or <a href="https://www.getpostman.com/">Postman</a>):</p>

<ol>
<li>Add new blobs</li>
<li>View all blobs</li>
<li>View a single blob</li>
<li>Update a single blob</li>
<li>Delete a single blob</li>
</ol>

<p>This is a tedious process. What if you had to go through this same manual process <em>every</em> single time a new feature got added to the application? That would not only be a massive misuse of time - but unreliable as well. Hence the need for setting up a testing framework for automating the testing of the application, so you can run hundreds of tests in a matter of seconds.</p>

<p>With that, install Mocha:</p>

<p><code>sh<br>
$ npm install -g mocha@2.3.1<br>
</code></p>

<blockquote>
<p>We installed this globally so we&#39;ll be able to run <code>mocha</code> from the terminal.</p>
</blockquote>

<h2>Structure</h2>

<p>To set up the basic tests, create a new folder called &quot;test&quot; in the project root, then within that folder add a file called <em>test-server.js</em>. Your file/folder structure should now look like:</p>

<p><code>sh<br>
├── package.json<br>
├── server<br>
│   ├── app.js<br>
│   ├── models<br>
│   │   └── blob.js<br>
│   └── routes<br>
│       └── index.js<br>
└── test<br>
    └── test-server.js<br>
</code></p>

<p>Now add the following code to the new file:</p>

<p><code>javascript<br>
describe(&#39;Blobs&#39;, function() {<br>
  it(&#39;should list ALL blobs on /blobs GET&#39;);<br>
  it(&#39;should list a SINGLE blob on /blob/&lt;id&gt; GET&#39;);<br>
  it(&#39;should add a SINGLE blob on /blobs POST&#39;);<br>
  it(&#39;should update a SINGLE blob on /blob/&lt;id&gt; PUT&#39;);<br>
  it(&#39;should delete a SINGLE blob on /blob/&lt;id&gt; DELETE&#39;);<br>
});<br>
</code></p>

<p>Although this is just boilerplate, pay attention to the <code>describe()</code> block and <code>it()</code> statements. <code>describe()</code> is used for grouping tests in a logical manner. Meanwhile, the <code>it()</code> statements contain each individual test case, which generally (err, <em>should</em>) test a single feature or edge case.</p>

<h2>Logic</h2>

<p>To add the necessary logic, we&#39;ll utilize <a href="http://chaijs.com/">Chai</a> (v3.2.0), an assertion library, and <a href="http://chaijs.com/plugins/chai-http">chai-http</a> (v 1.0.0), for making the actual HTTP requests and then testing the responses.</p>

<p>Install them both now:</p>

<p><code>sh<br>
$ npm install chai@3.2.0 chai-http@1.0.0 --save-dev<br>
</code></p>

<p>Then update <em>test-server.js</em>, like so:</p>

<p>```javascript<br>
var chai = require(&#39;chai&#39;);<br>
var chaiHttp = require(&#39;chai-http&#39;);<br>
var server = require(&#39;../server/app&#39;);<br>
var should = chai.should();</p>

<p>chai.use(chaiHttp);</p>

<p>describe(&#39;Blobs&#39;, function() {<br>
  it(&#39;should list ALL blobs on /blobs GET&#39;);<br>
  it(&#39;should list a SINGLE blob on /blob/<id> GET&#39;);<br>
  it(&#39;should add a SINGLE blob on /blobs POST&#39;);<br>
  it(&#39;should update a SINGLE blob on /blob/<id> PUT&#39;);<br>
  it(&#39;should delete a SINGLE blob on /blob/<id> DELETE&#39;);<br>
});<br>
```</p>

<p>Here, we required the new packages, <code>chai</code> and <code>chai-http</code>, and our <em>app.js</em> file in order to make requests to the app. We also used the <code>should</code> assertion library so we can utilize <a href="http://chaijs.com/api/bdd/">BDD-style assertions</a>.</p>

<blockquote>
<p>One of the powerful aspects of Chai is that it allows you to choose the type of assertion style you&#39;d like to use. Check out the <a href="http://chaijs.com/guide/styles/">Assertion Style Guide</a> for more info. Also, aside for the assertion libraries included with Chai, there are a number of other libraries available via <a href="https://github.com/mochajs/mocha/wiki#assertion-libraries">NPM</a> and <a href="https://github.com/search?utf8=%E2%9C%93&amp;q=chai+assertion&amp;type=Repositories&amp;ref=searchresults">Github</a>.</p>
</blockquote>

<p>Now we can write our tests...</p>

<h2>Test - GET (all)</h2>

<p>Update the first <code>it()</code> statement:</p>

<p><code>javascript<br>
it(&#39;should list ALL blobs on /blobs GET&#39;, function(done) {<br>
  chai.request(server)<br>
    .get(&#39;/blobs&#39;)<br>
    .end(function(err, res){<br>
      res.should.have.status(200);<br>
      done();<br>
    });<br>
});<br>
</code></p>

<p>So, we passed an anonymous function with a single argument of <code>done</code> (a function) to the <code>it()</code> statement. This argument ends the test case when called - e.g., <code>done()</code>. The test itself is simple: We made a GET request to the <code>/blobs</code> endpoint and then asserted that the response contained a 200 HTTP status code.</p>

<p>Simple, right?</p>

<p>To test, simply run <code>mocha</code>; and if all went well, you should see:</p>

<p>```sh<br>
$ mocha</p>

<p>Blobs<br>
Connected to Database!<br>
GET /blobs 200 19.621 ms - 2<br>
    ✓ should list ALL blobs on /blobs GET (43ms)<br>
    - should list a SINGLE blob on /blob/<id> GET<br>
    - should add a SINGLE blob on /blobs POST<br>
    - should update a SINGLE blob on /blob/<id> PUT<br>
    - should delete a SINGLE blob on /blob/<id> DELETE</p>

<p>1 passing (72ms)<br>
  4 pending<br>
```</p>

<p>Since testing the status code alone isn&#39;t very significant, let&#39;s add some more assertions:</p>

<p><code>javascript<br>
it(&#39;should list ALL blobs on /blobs GET&#39;, function(done) {<br>
  chai.request(server)<br>
    .get(&#39;/blobs&#39;)<br>
    .end(function(err, res){<br>
      res.should.have.status(200);<br>
      res.should.be.json;<br>
      res.body.should.be.a(&#39;array&#39;);<br>
      done();<br>
    });<br>
});<br>
</code></p>

<p>This should be straightforward, since these assertions read like plain English. Run the test suite again. It passes, right? This test still isn&#39;t complete, since we&#39;re not testing any of the <em>actual</em> data being returned. We&#39;ll get to that shortly.</p>

<p>How about testing a POST request...</p>

<h2>Test - POST</h2>

<p>Based on the code within <em>index.js</em>, when a new &quot;blob&quot; is successfully added, we should see the following response:</p>

<p><code>sh<br>
{<br>
  &quot;SUCCESS&quot;: {<br>
    &quot;__v&quot;: 0,<br>
    &quot;name&quot;: &quot;name&quot;,<br>
    &quot;lastName&quot;: &quot;lastname&quot;,<br>
    &quot;_id&quot;: &quot;some-unique-id&quot;<br>
  }<br>
}<br>
</code></p>

<blockquote>
<p>Need proof? Test this out by logging <code>{&#39;SUCCESS&#39;: newBlob}</code> to the console, and then run a manual test to see what gets logged.</p>
</blockquote>

<p>With that, think about how you would write/structure your assertions to test this...</p>

<p><code>javascript<br>
it(&#39;should add a SINGLE blob on /blobs POST&#39;, function(done) {<br>
  chai.request(server)<br>
    .post(&#39;/blobs&#39;)<br>
    .send({&#39;name&#39;: &#39;Java&#39;, &#39;lastName&#39;: &#39;Script&#39;})<br>
    .end(function(err, res){<br>
      res.should.have.status(200);<br>
      res.should.be.json;<br>
      res.body.should.be.a(&#39;object&#39;);<br>
      res.body.should.have.property(&#39;SUCCESS&#39;);<br>
      res.body.SUCCESS.should.be.a(&#39;object&#39;);<br>
      res.body.SUCCESS.should.have.property(&#39;name&#39;);<br>
      res.body.SUCCESS.should.have.property(&#39;lastName&#39;);<br>
      res.body.SUCCESS.should.have.property(&#39;_id&#39;);<br>
      res.body.SUCCESS.name.should.equal(&#39;Java&#39;);<br>
      res.body.SUCCESS.lastName.should.equal(&#39;Script&#39;);<br>
      done();<br>
    });<br>
});<br>
</code></p>

<p>Need help understanding what&#39;s happening here? Add <code>console.log(res.body)</code> just before the first assert. Run the test to see the data contained within the response body. The test we wrote tests the actual structure and data from the response body, broken down by each individual key/value pair.</p>

<h2>Hooks</h2>

<p>Up to this point we have been using the main database for testing purposes, which is not ideal since we&#39;re polluting the database with test data. Instead, let&#39;s utilize a test database and add a dummy blob to it to assert against. To do this, we can use the <code>beforeEach()</code> and <code>afterEach()</code> <a href="http://mochajs.org/#hooks">hooks</a> - which, as the names suggest, add and remove a dummy document to the database before and after each test case is ran.</p>

<p>This sounds a bit difficult, but with Mocha it&#39;s super easy!</p>

<p>Start by adding a configuration file called <em>_config.js</em> to the &quot;server&quot; folder in order to specify a different database URI for testing purposes:</p>

<p>```javascript<br>
var config = {};</p>

<p>config.mongoURI = {<br>
  development: &#39;mongodb://localhost/node-testing&#39;,<br>
  test: &#39;mongodb://localhost/node-test&#39;<br>
};</p>

<p>module.exports = config;<br>
```</p>

<p>Next, update <em>app.js</em> to utilize the test database when the environment variable <code>app.settings.env</code> evaluates to <code>test</code>. (The default is <code>development</code>.)</p>

<p>```javascript<br>
// *** config file *** //<br>
var config = require(&#39;./_config&#39;);</p>

<p>// *** mongoose *** ///<br>
mongoose.connect(config.mongoURI[app.settings.env], function(err, res) {<br>
  if(err) {<br>
    console.log(&#39;Error connecting to the database. &#39; + err);<br>
  } else {<br>
    console.log(&#39;Connected to Database: &#39; + config.mongoURI[app.settings.env]);<br>
  }<br>
});<br>
```</p>

<p>Finally, update the requirements and add the hooks to the testing script:</p>

<p>```javascript<br>
process.env.NODE_ENV = &#39;test&#39;;</p>

<p>var chai = require(&#39;chai&#39;);<br>
var chaiHttp = require(&#39;chai-http&#39;);<br>
var mongoose = require(&quot;mongoose&quot;);</p>

<p>var server = require(&#39;../server/app&#39;);<br>
var Blob = require(&quot;../server/models/blob&quot;);</p>

<p>var should = chai.should();<br>
chai.use(chaiHttp);</p>

<p>describe(&#39;Blobs&#39;, function() {</p>

<p>Blob.collection.drop();</p>

<p>beforeEach(function(done){<br>
    var newBlob = new Blob({<br>
      name: &#39;Bat&#39;,<br>
      lastName: &#39;man&#39;<br>
    });<br>
    newBlob.save(function(err) {<br>
      done();<br>
    });<br>
  });<br>
  afterEach(function(done){<br>
    Blob.collection.drop();<br>
    done();<br>
  });</p>

<p>...snip...<br>
```</p>

<p>Now, before each test case, the database is cleared and a new blob is added; then, after each test, the database is cleared before the next test case is ran.</p>

<p>Run the tests again to ensure they still pass.</p>

<h2>Test - GET (all)</h2>

<p>With the hooks set up, let&#39;s refactor the first test to assert that the blob from the <code>beforeEach()</code> is part of the collection:</p>

<p><code>javascript<br>
it(&#39;should list ALL blobs on /blobs GET&#39;, function(done) {<br>
  chai.request(server)<br>
    .get(&#39;/blobs&#39;)<br>
    .end(function(err, res){<br>
      res.should.have.status(200);<br>
      res.should.be.json;<br>
      res.body.should.be.a(&#39;array&#39;);<br>
      res.body[0].should.have.property(&#39;_id&#39;);<br>
      res.body[0].should.have.property(&#39;name&#39;);<br>
      res.body[0].should.have.property(&#39;lastName&#39;);<br>
      res.body[0].name.should.equal(&#39;Bat&#39;);<br>
      res.body[0].lastName.should.equal(&#39;man&#39;);<br>
      done();<br>
    });<br>
});<br>
</code></p>

<p>Let&#39;s look at the final three tests...</p>

<h2>Test - GET (single)</h2>

<p><code>javascript<br>
it(&#39;should list a SINGLE blob on /blob/&lt;id&gt; GET&#39;, function(done) {<br>
    var newBlob = new Blob({<br>
      name: &#39;Super&#39;,<br>
      lastName: &#39;man&#39;<br>
    });<br>
    newBlob.save(function(err, data) {<br>
      chai.request(server)<br>
        .get(&#39;/blob/&#39;+data.id)<br>
        .end(function(err, res){<br>
          res.should.have.status(200);<br>
          res.should.be.json;<br>
          res.body.should.be.a(&#39;object&#39;);<br>
          res.body.should.have.property(&#39;_id&#39;);<br>
          res.body.should.have.property(&#39;name&#39;);<br>
          res.body.should.have.property(&#39;lastName&#39;);<br>
          res.body.name.should.equal(&#39;Super&#39;);<br>
          res.body.lastName.should.equal(&#39;man&#39;);<br>
          res.body._id.should.equal(data.id);<br>
          done();<br>
        });<br>
    });<br>
});<br>
</code></p>

<p>In this test case, we first added a new blob, and then used the newly created <code>_id</code> to make the request and then test the subsequent response.</p>

<h2>Test - PUT</h2>

<p><code>javascript<br>
it(&#39;should update a SINGLE blob on /blob/&lt;id&gt; PUT&#39;, function(done) {<br>
  chai.request(server)<br>
    .get(&#39;/blobs&#39;)<br>
    .end(function(err, res){<br>
      chai.request(server)<br>
        .put(&#39;/blob/&#39;+res.body[0]._id)<br>
        .send({&#39;name&#39;: &#39;Spider&#39;})<br>
        .end(function(error, response){<br>
          response.should.have.status(200);<br>
          response.should.be.json;<br>
          response.body.should.be.a(&#39;object&#39;);<br>
          response.body.should.have.property(&#39;UPDATED&#39;);<br>
          response.body.UPDATED.should.be.a(&#39;object&#39;);<br>
          response.body.UPDATED.should.have.property(&#39;name&#39;);<br>
          response.body.UPDATED.should.have.property(&#39;_id&#39;);<br>
          response.body.UPDATED.name.should.equal(&#39;Spider&#39;);<br>
          done();<br>
      });<br>
    });<br>
});<br>
</code></p>

<p>Here, we hit the <code>/blobs</code> endpoint with a GET request to grab the blob added from the <code>beforeEach()</code> hook, then we simply added the <code>_id</code> to the URL for the PUT request and updated the name to <code>Spider</code>.</p>

<h2>Test - DELETE</h2>

<p>Finally...</p>

<p><code>javascript<br>
it(&#39;should delete a SINGLE blob on /blob/&lt;id&gt; DELETE&#39;, function(done) {<br>
  chai.request(server)<br>
    .get(&#39;/blobs&#39;)<br>
    .end(function(err, res){<br>
      chai.request(server)<br>
        .delete(&#39;/blob/&#39;+res.body[0]._id)<br>
        .end(function(error, response){<br>
          response.should.have.status(200);<br>
          response.should.be.json;<br>
          response.body.should.be.a(&#39;object&#39;);<br>
          response.body.should.have.property(&#39;REMOVED&#39;);<br>
          response.body.REMOVED.should.be.a(&#39;object&#39;);<br>
          response.body.REMOVED.should.have.property(&#39;name&#39;);<br>
          response.body.REMOVED.should.have.property(&#39;_id&#39;);<br>
          response.body.REMOVED.name.should.equal(&#39;Bat&#39;);<br>
          done();<br>
      });<br>
    });<br>
});<br>
</code></p>

<h2>Conclusion</h2>

<p>Hopefully you can now see just how easy it is to test your code with Mocha and Chai. Keep practicing on your own, incorporating a true <a href="https://mochajs.org/#bdd">BDD</a> approach into your workflow. Grab the final code for this tutorial from the <a href="https://github.com/mjhea0/node-mocha-chai-tutorial">repository</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Node, Express, Swig, and MongoDB - getting started with CRUD]]></title>
    <link href="http://mjhea0.github.com/blog/2015/08/24/node-express-swig-mongo-primer/"/>
    <updated>2015-08-24T08:11:00-06:00</updated>
    <id>http://mjhea0.github.com/blog/2015/08/24/node-express-swig-mongo-primer</id>
    <content type="html"><![CDATA[<p><strong>Let&#39;s create a basic CRUD app using Node, Express, Swig, and MongoDB.</strong></p>

<div style="text-align:center;">
  <img src="http://mjhea0.github.com/images/node-express.png" style="max-width: 100%; border:0;" alt="mean stack authentication">
</div>

<p><br></p>

<blockquote>
<p>This tutorial utilizes <a href="http://nodejs.org/">Node</a> v0.12.5, <a href="http://expressjs.com/">Express</a> v4.13.1, <a href="http://paularmstrong.github.io/swig/">Swig</a> and <a href="http://mongoosejs.com/">Mongoose</a> v4.1.3.</p>
</blockquote>

<h2>Getting started</h2>

<p>Start by downloading the <a href="http://expressjs.com/starter/generator.html">Express application generator</a> (if you don&#39;t already have it) to create a basic Express project:</p>

<p><code>sh<br>
$ npm install express-generator -g<br>
</code></p>

<blockquote>
<p>The <code>-g</code> flag indicates that you want to install the package globally, on your entire system.</p>
</blockquote>

<p>Navigate to a convenient directory, like your &quot;Desktop&quot; or &quot;Documents&quot;, then create the boilerplate:</p>

<p><code>sh<br>
$ express node-express-swig-mongo<br>
$ cd node-express-swig-mongo<br>
</code></p>

<p>Check out the project structure:</p>

<p><code>sh<br>
├── app.js<br>
├── bin<br>
│   └── www<br>
├── package.json<br>
├── public<br>
│   ├── images<br>
│   ├── javascripts<br>
│   └── stylesheets<br>
│       └── style.css<br>
├── routes<br>
│   ├── index.js<br>
│   └── users.js<br>
└── views<br>
    ├── error.jade<br>
    ├── index.jade<br>
    └── layout.jade<br>
</code></p>

<p>Don&#39;t worry about the files and folders for now. Just know that we have created a boilerplate that can be used for a number of Node/Express applications. This took care of the heavy lifting, adding common files, folders, and scripts generally associated with all apps.</p>

<p>Notice the <em>package.json</em> file. This stores your project&#39;s dependencies, which we still need to install:</p>

<p><code>sh<br>
$ npm install<br>
</code></p>

<p>Now let&#39;s install Mongoose and Swig:</p>

<p><code>sh<br>
$ npm install mongoose swig --save<br>
</code></p>

<blockquote>
<p>The <code>--save</code> flag adds the dependencies and their versions to the <em>package.json</em> file. Take a look.</p>
</blockquote>

<h2>Sanity check</h2>

<p>Let&#39;s test our setup by running the app:</p>

<p><code>sh<br>
$ npm start<br>
</code></p>

<p>Navigate to <a href="http://localhost:3000/">http://localhost:3000/</a> in your browser and you should see the &quot;Welcome to Express&quot; text. Once done, kill the server by pressing CTRL-C.</p>

<h2>Nodemon</h2>

<p>Before moving on, let&#39;s setup <a href="http://nodemon.io/">Nodemon</a> so that you can run your app and watch for code changes without having to manually restart the server. Check out the link above to learn more.</p>

<p><code>sh<br>
$ npm install supervisor -g<br>
</code></p>

<p>Let&#39;s test again:</p>

<p><code>sh<br>
$ nodemon<br>
</code></p>

<p>In your terminal you should see:</p>

<p><code>sh<br>
23 Aug 16:31:02 - [nodemon] v1.4.1<br>
23 Aug 16:31:02 - [nodemon] to restart at any time, enter `rs`<br>
23 Aug 16:31:02 - [nodemon] watching: *.*<br>
23 Aug 16:31:02 - [nodemon] starting `node ./bin/www`<br>
</code></p>

<p>Essentially, Nodemon is watching for code changes, and if they do occur, then it will refresh the local server for you so you don&#39;t have to constantly kill the server then start it back up. It saves a lot of time and keystrokes.</p>

<p>Awesome. With the setup done, let&#39;s build something!</p>

<h2>Routes</h2>

<p>Grab your favorite text editor (such as <a href="http://www.sublimetext.com/">Sublime</a> or <a href="https://atom.io/">Atom</a>), and then open the main file, <em>app.js</em>, which houses much of the business logic. Take a look at the routes:</p>

<p><code>javascript<br>
app.use(&#39;/&#39;, routes);<br>
app.use(&#39;/users&#39;, users);<br>
</code></p>

<p>Understanding how routes work as well as how to trace all the files associated with an individual route is an important skill to learn. You&#39;ll be able to approach most applications and understand how they work just by starting with the routes.</p>

<p>Let&#39;s look at this route:</p>

<p><code>javascript<br>
app.use(&#39;/users&#39;, users)<br>
</code></p>

<p>Here, we know that this route is associated with the <code>/users</code> endpoint. What&#39;s an endpoint? Simply navigate to <a href="http://localhost:3000/users">http://localhost:3000/users</a>.</p>

<p>The end user navigates to that endpoint and expects <em>something</em> to happen. That could mean some HTML is rendered or perhaps JSON is returned. That&#39;s not important at this point. For now, let&#39;s look at how Node handles the logic for &quot;handling routes&quot;.</p>

<p>Also, within that route, you can see the variable <code>users</code>. Where is in this file? It&#39;s at the top, and it loads in another file within our app:</p>

<p><code>javascript<br>
var users = require(&#39;./routes/users&#39;);<br>
</code></p>

<p>Open that file:</p>

<p>```javascript<br>
var express = require(&#39;express&#39;);<br>
var router = express.Router();</p>

<p>/* GET users listing. */<br>
router.get(&#39;/&#39;, function(req, res) {<br>
  res.send(&#39;respond with a resource&#39;);<br>
});</p>

<p>module.exports = router;<br>
```</p>

<p><strong>What&#39;s happening here?</strong> Essentially when that endpoint is hit, it responds by sending text in the form of a response to the end user - &quot;respond with a resource&quot;. Now, of course you don&#39;t always have to send text. You could respond with a template or view like a Jade or Swig template file that gets rendered into HTML. We&#39;ll look at how this works in just a minute when we add our own routes.</p>

<p><strong>Make sure you understand everything in this section before moving on.</strong></p>

<h3>Add a new route</h3>

<p>Let&#39;s now add a new route that renders a HTML form to the end user.</p>

<p>Start by adding the route handler in the <em>app.js</em> file:</p>

<p><code>javascript<br>
app.use(&#39;/api&#39;, api);<br>
</code></p>

<blockquote>
<p>Remember this simply means <code>app.use(&#39;/ENDPOINT&#39;, VARIABLE_NAME);</code>,</p>
</blockquote>

<p>Use the <code>api</code> variable to require a JS file within our routes folder.</p>

<p><code>javascript<br>
var api = require(&#39;./routes/api&#39;);<br>
</code></p>

<p>Take a look in the terminal. You should see an error, indicating Node can&#39;t find the <code>./routes/api</code> module. We need to create it!</p>

<p>Create a new file called <em>api.js</em> in the &quot;routes&quot; directory. Add the following code:</p>

<p>```javascript<br>
var express = require(&#39;express&#39;);<br>
var router = express.Router();</p>

<p>router.get(&#39;/superheros&#39;, function(req, res) {<br>
  res.send(&#39;Just a test&#39;);<br>
});</p>

<p>module.exports = router;<br>
```</p>

<blockquote>
<p>Do you remember what this code <code>res.send(&#39;Just a test&#39;);</code> will do? If not, review the previous section.</p>
</blockquote>

<p>Navigate to <a href="http://localhost:3000/api/superheros">http://localhost:3000/api/superheros</a>. You should see the text &quot;Just a test&quot; on the page.</p>

<h2>Swig</h2>

<p>Swig is a templating language, which compiles down to HTML, making it easy to separate logic from markup. For more on Swig, check out the <a href="http://mherman.org/blog/2015/08/23/primer-on-swig-templating/#.VdpL_VNViko">Primer on Swig Templating</a>.</p>

<p>Take a quick look at the <em>layout.jade</em>, <em>index.jade</em>, and <em>error.jade</em> files within the &quot;views&quot; folder. Right now these files are using <a href="http://jade-lang.com/">Jade</a> templating. Let&#39;s update these files to remove Jade and add Swig. First, remove the <em>.jade</em> extension from each file and add a <em>.html</em> extension. Now we can update the actual syntax...</p>

<p><strong><em>layout.html</em></strong></p>

<p><br>
<code>html<br>
&lt;!DOCTYPE html&gt;<br>
&lt;html&gt;<br>
  &lt;head&gt;<br>
    &lt;meta charset=&quot;utf-8&quot;&gt;<br>
    &lt;title&gt;{{ title }}&lt;/title&gt;<br>
    &lt;link rel=&quot;stylesheet&quot; href=&quot;http://mjhea0.github.com//netdna.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css&quot;&gt;<br>
    &lt;link rel=&quot;stylesheet&quot; href=&quot;http://mjhea0.github.com/css/main.css&quot;&gt;<br>
  &lt;/head&gt;<br>
  &lt;body&gt;<br>
    {% block content %}<br>
    {% endblock %}<br>
    &lt;script type=&quot;text/javascript&quot; src=&quot;http://mjhea0.github.com//code.jquery.com/jquery-2.1.4.min.js&quot;&gt;&lt;/script&gt;<br>
    &lt;script src=&quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;<br>
    &lt;script type=&quot;text/javascript&quot; src=&quot;http://mjhea0.github.com/js/main.js&quot;&gt;&lt;/script&gt;<br>
  &lt;/body&gt;<br>
&lt;/html&gt;<br>
</code><br>
</p>

<p><strong><em>index.html</em></strong></p>

<p><br>
```html<br>
{% extends &#39;layout.html&#39; %}</p>

<p>{% block title %}{% endblock %}</p>

<p>{% block content %}</p>

<p><div class="container"></p>
<div class="highlight"><pre><code class="text">&lt;h1&gt;{{ title }}&lt;/h1&gt;
&lt;p&gt;Welcome to {{ title }}&lt;/p&gt;
</code></pre>
</div>

<p></div></p>

<p>{% endblock %}<br>
```<br>
</p>

<p><strong><em>error.html</em></strong></p>

<p><br>
```html<br>
{% extends &#39;layout.html&#39; %}</p>

<p>{% block title %}{% endblock %}</p>

<p>{% block content %}</p>

<p><div class="container"></p>
<div class="highlight"><pre><code class="text">&lt;h1&gt;{{ message }}&lt;/h1&gt;
&lt;h2&gt;{{ error.status }}&lt;/h2&gt;
&lt;pre&gt;{{ error.stack }}&lt;/pre&gt;
</code></pre>
</div>

<p></div></p>

<p>{% endblock %}<br>
```<br>
</p>

<p>Finally, update <em>app.js</em> by requiring the following dependency at the top of the file:</p>

<p><code>javascript<br>
var swig = require(&#39;swig&#39;);<br>
</code></p>

<p>Then set Swig as the template engine by replacing <code>app.set(&#39;view engine&#39;, &#39;jade&#39;);</code> with-</p>

<p><code>javascript<br>
var swig = new swig.Swig();<br>
app.engine(&#39;html&#39;, swig.renderFile);<br>
app.set(&#39;view engine&#39;, &#39;html&#39;);<br>
</code></p>

<p>Jump back to the &quot;views&quot;, and take a look at <em>layout.html</em> and <em>index.html</em>. There&#39;s a relationship between those two files. We define the base structure in the <em>layout</em> file, which contains common structure that can be reused in multiple places.</p>

<p>Do you see the <code>block</code> keyword?</p>

<p>What really happens when the <em>index</em> file is rendered is that it first renders the base template because of the <code>extends</code> keyword. So, the <em>layout</em> template then gets rendered, which eventually pulls in the child template, overwriting the <code>block</code> keyword with:</p>

<p><br>
```html<br>
<div class="container"></p>

<p><h1>{{ title }}</h1><br>
  <p>Welcome to {{ title }}</p></p>

<p></div><br>
```<br>
</p>

<p>Hope that makes sense. If not, check out <a href="http://mherman.org/blog/2015/08/23/primer-on-swig-templating/#template-inheritence">this</a> resource for more info on template inheritance.</p>

<h3>Setup <em>api.html</em></h3>

<p>Create a new file called <em>api.html</em> in the &quot;views&quot; directory, and then add the following code:</p>

<p><br>
```html<br>
{% extends &#39;layout.html&#39; %}</p>

<p>{% block title %}{% endblock %}</p>

<p>{% block content %}</p>

<p><div class="container"></p>
<div class="highlight"><pre><code class="text">&lt;h1&gt;{{ title }}&lt;/h1&gt;
&lt;p&gt;Welcome to {{ title }}&lt;/p&gt;
</code></pre>
</div>

<p></div></p>

<p>{% endblock %}<br>
```<br>
</p>

<p>The same thing is happening here with inheritance. If you&#39;re unfamiliar with Swig syntax, <code>{{ title }}</code> is essentially a variable, which we can pass in from <code>./routes/api.js</code>.</p>

<p>Update <code>./routes/api.js</code> by changing-</p>

<p><code>javascript<br>
res.send(&#39;Just a test&#39;);<br>
</code></p>

<p>-to-</p>

<p><code>javascript<br>
res.render(&#39;api&#39;, { title: &#39;Superhero API&#39; });<br>
</code></p>

<p>This just says, &quot;When a user hits the <code>/api/superheros</code> endpoint, render the <em>api.html</em> file and pass in <code>Superhero API</code> as the title.&quot;</p>

<blockquote>
<p>Keep in mind that all Swig files are converted to HTML since browsers can&#39;t read the Swig templating syntax.</p>
</blockquote>

<p>Ready to test? Simple refresh <a href="http://localhost:3000/api/superheros">http://localhost:3000/api/superheros</a>.</p>

<p>Did it work? If yes, move on. If not, go back through this section and review.</p>

<h3>Update <em>api.html</em></h3>

<p>So, let&#39;s update the template to display a form:</p>

<p><br>
```html<br>
{% extends &#39;layout.html&#39; %}</p>

<p>{% block title %}{% endblock %}</p>

<p>{% block content %}</p>

<p><div class="container"></p>
<div class="highlight"><pre><code class="text">&lt;h1&gt;{{ title }}&lt;/h1&gt;

&lt;br&gt;

&lt;form method=&quot;post&quot; action=&quot;/api/superheros&quot; class=&quot;form-inline&quot;&gt;
  &lt;div class=&quot;form-group&quot;&gt;
    &lt;label&gt;Superhero name&lt;/label&gt;
    &lt;input type=&quot;text&quot; name=&quot;name&quot; class=&quot;form-control&quot; required&gt;
  &lt;/div&gt;
  &lt;button type=&quot;submit&quot; class=&quot;btn btn-default&quot;&gt;Save&lt;/button&gt;
&lt;/form&gt;
</code></pre>
</div>

<p></div></p>

<p>{% endblock %}<br>
```<br>
</p>

<p>Refresh your browser. Do you see the form? Try clicking save. What happens? Well, you just tried to send a POST request to the <code>/api/superheros</code> endpoint, which does not exist - so you should see a 404 error. Let&#39;s set up the route handler.</p>

<h2>POST requests (part 1)</h2>

<p>Open <em>api.js</em> to add the logic for this new route:</p>

<p>```javascript<br>
var express = require(&#39;express&#39;);<br>
var router = express.Router();</p>

<p>router.get(&#39;/superheros&#39;, function(req, res) {<br>
  res.render(&#39;api&#39;, { title: &#39;Superhero API&#39; });<br>
});</p>

<p>router.post(&#39;/superheros&#39;, function(req, res) {<br>
  console.log(req.body.name);<br>
  res.redirect(&#39;/api/superheros&#39;);<br>
});</p>

<p>module.exports = router;<br>
```</p>

<p>Test this out again. Now, when you submit the form, we have the <code>/api/superheros</code> endpoint setup, which then grabs the text from the input box via <code>req.body.name</code>. Make sure the text is consoled in your terminal.</p>

<p>Okay. So, we are handling the routes and rendering the right template, but we still need to setup Mongoose to save the data from our form before we can finish with the POST request.</p>

<h2>Mongoose</h2>

<p><a href="http://mongoosejs.com/">Mongoose</a> is used for interacting with MongoDB. Start with defining the Schema, which then maps to a collection in Mongo.</p>

<p>Create a file called <em>database.js</em> in your app&#39;s root directory, then add the following code:</p>

<p>```javascript<br>
var mongoose = require(&#39;mongoose&#39;);<br>
var Schema   = mongoose.Schema;</p>

<p>var Superhero = new Schema(<br>
  {name : String}<br>
);</p>

<p>mongoose.model(&#39;superheros&#39;, Superhero);</p>

<p>mongoose.connect(&#39;mongodb://localhost/node-superhero&#39;);<br>
```</p>

<p>Here, we required/included the Mongoose library along with a reference to the <code>Schema()</code> method. As said, you always start with defining the schema, then we linked it to collection called &quot;superheros&quot;. Finally, we opened a connection to an instance of our local MongoDB.</p>

<blockquote>
<p>If you don&#39;t have the MongoDB server running. Do so now. Open a new terminal window, and run the command <code>sudo mongod</code>. If you need to set up MongoDB, follow the Installation steps <a href="http://docs.mongodb.org/manual/tutorial/install-mongodb-on-os-x/">here</a>.</p>
</blockquote>

<p>Next, open <em>app.js</em> and require the Mongoose config at the very top of the file:</p>

<p><code>javascript<br>
// mongoose config<br>
require(&#39;./database&#39;);<br>
</code></p>

<p>With Mongoose setup, we need to update <em>api.js</em> to create (via POST) and read (via GET) data from the Mongo collection.</p>

<h2>GET requests (all resources)</h2>

<p>Open <em>api.js</em>. Require Mongoose as well as the <code>superheros</code> model, which we already created:</p>

<p><code>javascript<br>
var mongoose = require(&#39;mongoose&#39;);<br>
var Superhero = mongoose.model(&#39;superheros&#39;);<br>
</code></p>

<p>Now, update the function handling GET requests:</p>

<p><code>javascript<br>
router.get(&#39;/superheros&#39;, function(req, res) {<br>
  Superhero.find(function(err, superheros){<br>
    console.log(superheros)<br>
    res.render(<br>
      &#39;api&#39;,<br>
      {title : &#39;Superhero API&#39;, superheros : superheros}<br>
    );<br>
  });<br>
});<br>
</code></p>

<p><code>Superhero.find()</code> grabs all superheros from the Mongo collection, which we assign to the variable <code>superheros</code>. We can now use that variable in the Swig template.</p>

<h3>Update <em>api.html</em> to display superheros</h3>

<p>Let&#39;s add a loop to iterate through the superheros and then display the <code>name</code> key from the collection.</p>

<p><br>
```html<br>
{% extends &#39;layout.html&#39; %}</p>

<p>{% block title %}{% endblock %}</p>

<p>{% block content %}</p>

<p><div class="container"></p>
<div class="highlight"><pre><code class="text">&lt;h1&gt;{{ title }}&lt;/h1&gt;

&lt;br&gt;

&lt;form method=&quot;post&quot; action=&quot;/api/superheros&quot; class=&quot;form-inline&quot;&gt;
  &lt;div class=&quot;form-group&quot;&gt;
    &lt;label&gt;Superhero name&lt;/label&gt;
    &lt;input type=&quot;text&quot; name=&quot;name&quot; class=&quot;form-control&quot; required&gt;
  &lt;/div&gt;
  &lt;button type=&quot;submit&quot; class=&quot;btn btn-default&quot;&gt;Save&lt;/button&gt;
&lt;/form&gt;

&lt;hr&gt;&lt;br&gt;

&lt;h2&gt;All Superheros&lt;/h2&gt;

&lt;ul&gt;
{% for superhero in superheros %}
  &lt;li&gt;{{superhero.name}}&lt;/li&gt;
{% endfor %}
&lt;/ul&gt;
</code></pre>
</div>

<p></div></p>

<p>{% endblock %}<br>
```<br>
</p>

<blockquote>
<p>Do you remember where we set the <code>name</code> key? Check out the database schema in <em>database.js</em>.</p>
</blockquote>

<p>Before this will actually work - e.g., display superheros - we first need to add the logic to insert data into the Mongo collection.</p>

<h2>POST requests (part 2)</h2>

<p>Back in <em>api.js</em>, update the function for handling POST requests:</p>

<p><code>javascript<br>
router.post(&#39;/superheros&#39;, function(req, res) {<br>
  new Superhero({name : req.body.name})<br>
  .save(function(err, superhero) {<br>
    console.log(superhero)<br>
    res.redirect(&#39;/api/superheros&#39;);<br>
  });<br>
});<br>
</code></p>

<p>This simply saves a new superhero, which again is grabbed from the form via <code>req.body.name</code>.</p>

<h2>Sanity Check</h2>

<p>Refresh you app. Add some superheros. If you&#39;ve done everything correctly, the superheros should be displayed beneath the form.</p>

<p>What about updates? And deletions? First, let&#39;s display a single superhero.</p>

<h2>GET requests (single resource)</h2>

<p>Update the list item in the HTML file like so to give each item a unique URL.</p>

<p><br>
<code>html<br>
&lt;li&gt;&lt;a href=&quot;superhero/{{superhero.id}}&quot;&lt;/a&gt;{{superhero.name}}&lt;/li&gt;<br>
</code><br>
</p>

<p>Now, let&#39;s add a new route handler to <em>api.js</em> to display a single superhero:</p>

<p><code>javascript<br>
router.get(&#39;/superhero/:id&#39;, function(req, res) {<br>
  var query = {&quot;_id&quot;: req.params.id};<br>
  Superhero.findOne(query, function(err, superhero){<br>
    console.log(superhero)<br>
    res.render(<br>
      &#39;superhero&#39;,<br>
      {title : &#39;Superhero API - &#39; + superhero.name, superhero : superhero}<br>
    );<br>
  });<br>
});<br>
</code></p>

<p>What&#39;s next? A new template. <em>superhero.html</em>:</p>

<p><br>
```html<br>
{% extends &#39;layout.html&#39; %}</p>

<p>{% block title %}{% endblock %}</p>

<p>{% block content %}</p>

<p><div class="container"></p>
<div class="highlight"><pre><code class="text">&lt;h1&gt;{{ title }}&lt;/h1&gt;

&lt;br&gt;

&lt;form method=&quot;post&quot; action=&quot;/api/superhero/{{superhero.id}}?_method=PUT&quot;&gt;
  &lt;div class=&quot;form-group&quot;&gt;
    &lt;label&gt;Superhero name&lt;/label&gt;
    &lt;input type=&quot;text&quot; name=&quot;name&quot; class=&quot;form-control&quot; value=&quot;{{superhero.name}}&quot; required&gt;
  &lt;/div&gt;
  &lt;button type=&quot;submit&quot; class=&quot;btn btn-default&quot;&gt;Update&lt;/button&gt;
&lt;/form&gt;

&lt;br&gt;

&lt;form method=&quot;post&quot; action=&quot;/api/superhero/{{superhero.id}}?_method=DELETE&quot; class=&quot;form-inline&quot;&gt;
  &lt;button type=&quot;submit&quot; class=&quot;btn btn-default&quot;&gt;Delete&lt;/button&gt;
&lt;/form&gt;
</code></pre>
</div>

<p></div></p>

<p>{% endblock %}<br>
```<br>
</p>

<p>Test this out.</p>

<h2>PUT requests</h2>

<p>Since most browsers do not handle PUT or DELETE requests, we need to use the <a href="https://github.com/expressjs/method-override">method-override</a> middleware to handle such requests.</p>

<p>Install via NPM:</p>

<p><code>sh<br>
$ npm install method-override --save<br>
</code></p>

<p>Add the requirement to <em>app.js</em>:</p>

<p><code>javascript<br>
var methodOverride = require(&#39;method-override&#39;);<br>
</code></p>

<p>Then define the middleware just below the view engine setup in <em>app.js</em>:</p>

<p><code>javascript<br>
app.use(methodOverride(&#39;_method&#39;))<br>
</code></p>

<p>Finally, add the route handler to <em>api.js</em>:</p>

<p><code>javascript<br>
router.put(&#39;/superhero/:id&#39;, function(req, res) {<br>
  var query = {&quot;_id&quot;: req.params.id};<br>
  var update = {name : req.body.name};<br>
  var options = {new: true};<br>
  Superhero.findOneAndUpdate(query, update, options, function(err, superhero){<br>
    console.log(superhero)<br>
    res.render(<br>
      &#39;superhero&#39;,<br>
      {title : &#39;Superhero API - &#39; + superhero.name, superhero : superhero}<br>
    );<br>
  });<br>
});<br>
</code></p>

<p>Here, we are simply searching Mongo for the correct superhero via the Mongo ID and then updating the superhero name, which comes from the form, <code>req.body.name</code>. By setting <code>new</code> to <code>true</code>, we&#39;re able to grab the updated superhero information after the changes are made in Mongo. Try removing this option. What happens?</p>

<h2>DELETE requests</h2>

<p>With the button already set up in the template, we just need to add the route handler to <em>api.js</em>:</p>

<p><code>javascript<br>
router.delete(&#39;/superhero/:id&#39;, function(req, res) {<br>
  var query = {&quot;_id&quot;: req.params.id};<br>
  Superhero.findOneAndRemove(query, function(err, superhero){<br>
    console.log(superhero)<br>
    res.redirect(&#39;/api/superheros&#39;);<br>
  });<br>
});<br>
</code></p>

<p>Again, we&#39;re querying the database by the Mongo ID and then removing it. Simple, right?</p>

<h2>Conclusion</h2>

<p>That&#39;s it. Post your questions below. Grab the code from the <a href="https://github.com/mjhea0/node-express-swig-mongo">repository</a>. Cheers!</p>
]]></content>
  </entry>
  
</feed>
