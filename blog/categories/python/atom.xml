<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | Michael Herman]]></title>
  <link href="http://mherman.org/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://mherman.org/"/>
  <updated>2016-05-26T08:13:32-06:00</updated>
  <id>http://mherman.org/</id>
  <author>
    <name><![CDATA[Michael Herman]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Custom Apache Config for PHP and Web2Py]]></title>
    <link href="http://mherman.org/blog/2013/08/25/custom-apache-config-for-php-and-web2py/"/>
    <updated>2013-08-25T15:34:00-06:00</updated>
    <id>http://mherman.org/blog/2013/08/25/custom-apache-config-for-php-and-web2py</id>
    <content type="html"><![CDATA[<h2>Problem</h2>

<p>As you probably know, the web2py admin must be hosted on a secured domain. We set a client up with a basic CRM system under the domain <a href="http://crm.maindomain.com,">http://crm.maindomain.com,</a> which worked perfectly until a GeoTrust SSL Certificate was installed.</p>

<p>Since the purchased GeoTrust certificate was just for a single domain, there was no way to access the web2py admin unless another dedicated IP address was purchased - which the site owner did not want to pay for.</p>

<p>Fortunately, there is a work around.</p>

<h2>Solution</h2>

<p>After hours of research/tests, the identified solution was to configure the web2py application, as well as the admin, under the main domain:</p>

<ul>
<li>App: <a href="https://maindomain.com/crm">https://maindomain.com/crm</a></li>
<li>Admin: <a href="https://maindomain.com/crm/admin">https://maindomain.com/crm/admin</a></li>
</ul>


<p>Essentially, any URL pattern that fell under /crm/ would be served by web2py, while all other URLS would be served by an existing Joomla application.</p>

<h2>Steps</h2>

<ol>
<li>Transfer the apache SSL configuration from the current crm domain (crm.mainpage.com) to the main domain (mainpage.com):</li>
</ol>


<pre><code class="sh"># mv /usr/local/apache/conf/userdata/ssl/2/main/crm.maindomain.com /usr/local/apache/conf/userdata/ssl/2/main/maindomain.com
</code></pre>

<ol>
<li>Update the apache config <code>/usr/local/apache/conf/userdata/ssl/2/main/maindomain.com/wsgi.conf</code>:</li>
</ol>


<pre><code class="sh">ServerName maindomain.com
ServerAlias crm.maindomain.com www.maindomain.com

WSGIScriptAlias /crm /home/main/python/maindomain.com/app/app.wsgi
</code></pre>

<blockquote><p>Note: Make sure to also comment out &lsquo;UserDir disabled&rsquo; and all apache Rewrite lines</p></blockquote>

<ol>
<li>Update web2py routing configuration, <code>/home/main/python/maindomain.com/app/web2py/routes.py</code>:</li>
</ol>


<pre><code class="python">routers = dict(
    BASE = dict(
    default_application='CRM',
    path_prefix='crm',
    )
)
</code></pre>

<ol>
<li>Rebuild apache config:</li>
</ol>


<pre><code class="sh"># /scripts/rebuildhttpdconf
</code></pre>

<ol>
<li>Restart apache:</li>
</ol>


<pre><code class="sh"># /scripts/restartsrv_httpd
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Removing a Django App]]></title>
    <link href="http://mherman.org/blog/2013/07/04/removing-a-django-app/"/>
    <updated>2013-07-04T09:43:00-06:00</updated>
    <id>http://mherman.org/blog/2013/07/04/removing-a-django-app</id>
    <content type="html"><![CDATA[<p>In order to completely uninstall a Django application you have to not only delete the database tables - but you also need to remove the related <a href="https://docs.djangoproject.com/en/1.5/ref/contrib/contenttypes/">contenttypes</a>.</p>

<p>Let&rsquo;s look at two ways to handle this: Manually and with <a href="http://south.aeracode.org/">South</a>.</p>

<p>In this case, the application name is called <code>customers</code>, and it contains the following tables within <em>models.py</em>:</p>

<pre><code class="python">class Student(models.Model):
    name = models.CharField(max_length=30)
    courses = models.ManyToManyField('Course')

    def __unicode__(self):
        return self.name

class Course(models.Model):
    name = models.CharField(max_length=30)

    def __unicode__(self):
        return self.name
</code></pre>

<p>Also, I am using a sqlite3 database called <em>test.db</em>, which contains <a href="https://gist.github.com/mjhea0/5959729">this</a> data.</p>

<p>Let&rsquo;s say we want to drop the Course table (for reasons unknown).</p>

<h2>Manually</h2>

<ol>
<li>Navigate to your project working directory and drop the table:</li>
</ol>


<pre><code class="python">$ python manage.py sqlclear customers &gt; drop_customers_customerprofile
</code></pre>

<ol>
<li><p>Remove the app from the INSTALLED_APPS section in <em>settings.py</em> and delete any associated URL patterns from <em>urls.py</em>.</p></li>
<li><p>Drop the database tables:</p></li>
</ol>


<pre><code class="python">$ sqlite3 test.db
sqlite&gt; DROP TABLE customers_customerprofile;
</code></pre>

<blockquote><p>equivalent MySQL command - <code>$ mysql -u root -p &lt;database_name&gt; &lt; drop_&lt;app_name&gt;_&lt;table_name&gt;.sql</code></p></blockquote>

<ol>
<li>Clean up the related contenttypes from the Shell:</li>
</ol>


<pre><code class="python">$ python manage.py shell
&gt;&gt;&gt; from django.contrib.contenttypes.models import ContentType
&gt;&gt;&gt; ContentType.objects.filter(app_label='customers').delete()
</code></pre>

<ol>
<li>You can now delete the app folder as well as any associated media files and/or templates. Finally, make sure to uninstall any associated packages or dependencies using <code>pip uninstall &lt;package_name&gt;</code>. <em>Make sure to use virtualenv</em>.</li>
</ol>


<h2>South</h2>

<p>I use South with all my Django projects, so I tend to prefer this method. Let&rsquo;s take a look.</p>

<ol>
<li>Setup the initial migration and push it through:</li>
</ol>


<pre><code class="python">$ python manage.py schemamigration customers --initial
$ python manage.py migrate customers
</code></pre>

<ol>
<li><p>Remove the <code>CustomerProfile</code> class from <em>models.py</em>.</p></li>
<li><p>Setup the migration to delete the table:</p></li>
</ol>


<pre><code class="sh">$ python manage.py schemamigration customers --auto
</code></pre>

<ol>
<li>Update the migration file <em>0002_auto__del_customerprofile.py</em>, to clean up the related contenttypes as well as delete the table from the database, by updating the <code>forwards</code> function:</li>
</ol>


<pre><code class="python">def forwards(self, orm):
   # Deleting model 'CustomerProfile'
   db.delete_table(u'customers_customerprofile')
   from django.contrib.contenttypes.models import ContentType
   ContentType.objects.filter(app_label='customers').delete()
</code></pre>

<ol>
<li>Push the migration through:</li>
</ol>


<pre><code class="sh">$ python manage.py migrate customers
</code></pre>

<ol>
<li>Fake a zero migration to remove the migration history and clear up the South tables:</li>
</ol>


<pre><code class="sh">$ python manage.py migrate customers zero --fake
</code></pre>

<ol>
<li>Remove the app from the INSTALLED_APPS section in <em>settings.py</em> and delete any associated URL patterns from <em>urls.py</em>. Then delete the app folder and any related media files and/or templates. Finally, make sure to uninstall any packages or dependencies using <code>pip unistall &lt;package_name&gt;</code>. <em>Make sure to use virtualenv</em>.</li>
</ol>


<p><strong>Comment if you have questions. Cheers!</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django Basics - Installing Django and Setting Up a Project and App]]></title>
    <link href="http://mherman.org/blog/2012/12/30/django-basics/"/>
    <updated>2012-12-30T09:48:00-07:00</updated>
    <id>http://mherman.org/blog/2012/12/30/django-basics</id>
    <content type="html"><![CDATA[<p>This brief tutorial shows the basics of installing and setting up a simple app in Django that is used to submit and retrieve information about books you&rsquo;ve read:</p>

<ul>
<li>Part 1 - Installing and Setting up Django</li>
<li>Part 2 - Creating the Database Model</li>
<li>Part 3 - Django API vs Admin site</li>
<li>Part 4 - Django Templates and Views</li>
</ul>


<p>Each part includes an accompanying video. You can download the source via Github - which includes all four parts. I will be delivering this tutorial from a Windows-perspective, but the Mac OS X perspective is pretty much the same.</p>

<p>This tutorial follows the first few sections of the official Django tutorial.</p>

<p>Videos - <a href="http://www.youtube.com/watch?v=ZgfGdRYVXjw">Part 1</a>, <a href="http://www.youtube.com/watch?v=aHLQpo3UHek">Part 2</a>, <a href="http://www.youtube.com/watch?v=SEV9Adp-AFQ">Part 3</a>, <a href="http://www.youtube.com/watch?v=_cPM7CgG-Fc">Part 4</a></p>

<p>GitHub - <a href="https://github.com/mjhea0/django-tutorial">https://github.com/mjhea0/django-tutorial</a></p>

<p><strong>Django?</strong></p>

<p>Developed in 1995 Django is one of, if not the most, popular Python web frameworks. It promotes rapid development via the model-view-controller architecture. You can learn more about it <a href="https://www.djangoproject.com/">here</a>.</p>

<p><strong>Prerequisites:</strong></p>

<ul>
<li>You have Python 2.7 installed.</li>
<li>You have PIP installed. To install, you need to first install setup tools. Click <a href="http://www.youtube.com/watch?v=ssQAFIQ4oBU">here</a> for a brief tutorial on how to do that. Then you can just run the command <code>easy_install pip</code> from the command prompt to install PIP.</li>
</ul>


<hr />

<p><em>Alright let&rsquo;s get started &hellip;</em></p>

<h2><strong>Part 1 - Installing Django</strong></h2>

<h3>Open the command prompt with admin privileges and run the command-</h3>

<pre><code class="python">pip install Django
</code></pre>

<p>   -to install Django into your site-packages directory.</p>

<h3>To setup, you need to create a new project. Within command prompt, navigate to the directory you wish to create the new project, then run the command -</h3>

<pre><code class="sh">python C:\Python27\Lib\site-packages\django\bin\django-admin.py startproject testproject
</code></pre>

<p>   Your path to <em>django-admin.py</em> may be different, so make sure to tailor it if necessary. Also, <em>testproject</em> is the name of the created project. Feel free to name this whatever you like.</p>

<h3>Next you need to make sure everything was setup correctly. To do that, you can launch the Django server. First, navigate to your newly created directory (<em>testproject</em>, in my case), and then run the command-</h3>

<pre><code class="sh">python manage.py runserver
</code></pre>

<p>   Open up a new browser window and navigate to <a href="http://localhost:8000/.">http://localhost:8000/.</a> If setup correctly, you will see the Welcome to Django screen.</p>

<h3>Let&rsquo;s setup the database. Open up <em>settings.py</em> in the <em>testproject</em> directory with a text editor. (I use Notepad++.) Append <em>sqlite3</em> to the end of the Engine key and then add the path to the name key. You can name the database whatever you’d like because if the database doesn’t exist, Django will create it for you in the next step. The results should look like something similar to this (depending upon your path)-</h3>

<pre><code class="python">'ENGINE': 'django.db.backends.sqlite3',
'NAME': 'C:/Python27/django/testproject/test.db',
</code></pre>

<p>   (Yes, use forward slashes.)</p>

<h3>Finally, you need to create and then sync the database by navigating to the directory where <em>manage.py</em> is located (should be the project&rsquo;s main directory) and then running the following command-</h3>

<pre><code class="sh">python manage.py syncdb
</code></pre>

<p>   Create a superuser. I used <em>admin</em> for both my username and password.</p>

<p>Alright, the setup is complete. You&rsquo;re now ready to start creating an app.</p>

<h2><strong>Part 2 - Creating the Database Model</strong></h2>

<h3>Start by creating an app. Within command prompt, navigate to the <em>testproject</em> directory and then type the command-</h3>

<pre><code class="sh">python manage.py startapp books
</code></pre>

<p>   CD into the directory. You should see a <em>models.py</em> file. This file is used to setup the entities and attributes for your database.</p>

<h3>Go ahead and open <em>models.py</em> in Notepad++ and add in the following code:</h3>

<pre><code class="python">class Books(models.Model):
    title = models.CharField(max_length=150)
    author = models.CharField(max_length=100)
    read = models.CharField(max_length=3)
</code></pre>

<p>   This code should be relatively clear. This class defines the database fields- title, author, and read. The data in the read field will either be &ldquo;yes&rdquo; or &ldquo;no&rdquo; depending on whether you&rsquo;ve read the book or not.</p>

<p>   Since there is only one table, we don&rsquo;t need to establish a foreign key. The primary key, a unique id, will be automatically generated for us by Django&rsquo;s magic.</p>

<p>   Save the file.</p>

<h3>Now open up the <em>settings.py</em> file, scroll down to <em>Installed Apps</em> and add the app name, <em>books</em>, to the installed apps so that Django knows to include it. Your installed apps section should look like this-</h3>

<pre><code class="python">INSTALLED_APPS = (
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.sites',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'books',
    # Uncomment the next line to enable the admin:
    # 'django.contrib.admin',
    # Uncomment the next line to enable admin documentation:
    # 'django.contrib.admindocs',
)
</code></pre>

<p>   Save the file.</p>

<h3>CD back to the main project directory and run the command-</h3>

<pre><code class="sh">python manage.py sql books
</code></pre>

<p>   -to display the actual SQL statements for creating the table. Did you notice the primary key?</p>

<p>   Your output should look like this-</p>

<pre><code class="python">BEGIN;
CREATE TABLE "books_books" (
    "id" integer NOT NULL PRIMARY KEY,
    "title" varchar(150) NOT NULL,
    "author" varchar(100) NOT NULL,
    "read" varchar(3) NOT NULL
)
;
COMMIT;
</code></pre>

<p>   You can also use the following command to check to see if there are any errors in your models-</p>

<pre><code class="sh">python manage.py validate
</code></pre>

<h3>Finally, you need to run the following command to execute the SQL statements:</h3>

<pre><code class="sh">python manage.py syncdb
</code></pre>

<p>Next, I&rsquo;ll show you how to access the Django API to add data to the database.</p>

<h2><strong>Part 3 - Django API vs Admin site</strong></h2>

<h3>First open up command prompt, navigate to your project directory, and then run the command-</h3>

<pre><code class="sh">python manage.py shell
</code></pre>

<p>   This opens an interactive environment for us to use.</p>

<h3>Next go ahead and import your app with the following command-</h3>

<pre><code class="python">from books.models import Books
</code></pre>

<h3>There&rsquo;s a number of different things you can do within this environment, but let&rsquo;s stick with adding data to our database. To add a row, run this command-</h3>

<pre><code class="python">b = Books(title="To Kill a Mockingbird", author="Harper Lee", read="yes")
b.save()
b = Books(title="Brave New World", author="Aldous Huxley", read="yes")
b.save()
b = Books(title="War and Peace", author="Leo Tolstoy", read="no")
b.save()
</code></pre>

<p>Go ahead and add as many books as you&rsquo;d like for practice.</p>

<p>Once complete, you can view the data in your database in a number of ways. I like to just use SQLite, which can be downloaded <a href="http://sourceforge.net/projects/sqlitebrowser/">here</a>. So, go ahead and open the text.db file which is located within your project&rsquo;s main directory, switch to the <em>Browse Data</em> tab, and then under the Table dropdown choose <em>books_books</em>. You should see all the books you added.</p>

<p>You can exit the Django interactive environment using the <code>exit()</code> command.</p>

<p>Okay, let&rsquo;s look at an even easier means of adding data using <strong>Django&rsquo;s admin site</strong>.</p>

<h3>Open the <em>settings.py</em> file, scroll down to <em>Installed Apps</em> and uncomment the line <em>&lsquo;django.contrib.admin&rsquo;,</em>. Then save the file.</h3>

<h3>Update the database by running the command-</h3>

<pre><code class="sh">python manage.py syncdb
</code></pre>

<h3>Next open the <em>urls.py</em> file within the <em>books</em> directory. You need to uncomment these three lines-</h3>

<pre><code class="python">from django.contrib import admin
admin.autodiscover()
url(r'^admin/', include(admin.site.urls)),
</code></pre>

<p>   Save the file and exit.</p>

<h3>Now create a new file in your <em>books</em> directory called <em>admin.py</em> and add the following code to the file-</h3>

<pre><code class="python">from books.models import Books
from django.contrib import admin
admin.site.register(Books)
</code></pre>

<h3>Next, open up your <em>models.py</em> file and add these two lines of code-</h3>

<pre><code class="python">def __unicode__(self):
    return self.title + " / " + self.author + " / " + self.read
</code></pre>

<p>   Essentially, <em>self</em> refers to the current object.</p>

<h3>Now start the development server - <code>python manage.py runserver</code>, point your browser to <a href="http://localhost:8000/admin,">http://localhost:8000/admin,</a> and enter your login credentials. You should see the <em>Books</em> app. And if you click the app, you should now see the data we added earlier.</h3>

<p>   Go ahead and add a few more books in. Try deleting a row as well. See how much easier that is in the Admin console?</p>

<p>So we&rsquo;re done with the Admin console. Hit CTRL+BREAK to exit. I&rsquo;m also done showing you how to create and modify your app&rsquo;s model(s). Next, we&rsquo;ll look at how to modify what the user sees (views and templates).</p>

<h2><strong>Part 4 - Django Templates and Views</strong></h2>

<p>Again, in this final tutorial I&rsquo;ll go over how to create the public interface.</p>

<h3>The first thing we need to do is setup the URL structure. Open up <em>urls.py</em> and then add this code to the <em>urlpatterns</em>-</h3>

<pre><code class="python">url(r'^books/$', 'books.views.index'),
</code></pre>

<p>   This is essentially a tuple that points a user to a Django page based on the URL that user visits. In this case the regular expression dictates that when the user visits any page with the ending /books they will be see the books.views.index page. This is a bit complicated, so be sure to visit the Django <a href="https://docs.djangoproject.com/en/1.4/intro/tutorial03/">tutorial</a> for more into.</p>

<h3>Now to ensure that this is setup correctly run the server and then point your browser to <a href="http://localhost:8000/books.">http://localhost:8000/books.</a></h3>

<p>   As long as you get the error, <em>ViewDoesNotExist at /books</em>, then the url is setup correctly.</p>

<p>   We need to actually write the view now.</p>

<h3>Stop the server (CRTL+BREAK) and then within the <em>books</em> directory open <em>views.py</em> in Notepad++ and write the following code to test out your views-</h3>

<pre><code class="python">from django.http import HttpResponse
def index(request):
    return HttpResponse("Hello. This is a test.")
</code></pre>

<p>   Save the file. Run the server. And refresh the page. You should no longer see an error. Instead, you should just see a page with the words <em>Hello. This is a test.</em> in the top corner.</p>

<h3>Okay, now let&rsquo;s display something a bit more meaningful - like a listing of all the books in the database. To do that, you need your <em>views.py</em> file to look like this-</h3>

<pre><code class="python">from django.http import HttpResponse
from books.models import Books
def index(request):
    books_list = Books.objects.all()
    return HttpResponse(books_list)
</code></pre>

<p>-and then just hit refresh on your browser. (Remember: we didn&rsquo;t stop the server).</p>

<p>   You should see all of the books in one long line. It looks bad, but it works.</p>

<p>Next, we&rsquo;re going to work with <strong>templates</strong>, which will allow us to easily create a much more readable output.</p>

<h3>Start by making a new directory in the django directory, outside of the project, called <em>templates</em>. Within that directory, make a directory called <em>books</em>.</h3>

<h3>Next open up <em>settings.py</em>, scroll down to <em>TEMPLATE_DIRS</em> and add the template directory-</h3>

<pre><code class="python">"C:/Python27/django/templates"
</code></pre>

<p>   Yes, those are forward slashes.</p>

<h3>Now create a new file in your <em>temples\books</em> directory. Save it as index.html and add the following code-</h3>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;h1&gt;</span>My Fab Book Collection<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>{% if books_list %}<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;ul&gt;</span>
</span><span class='line'>{% for b in books_list %}
</span><span class='line'>    <span class="nt">&lt;li&gt;</span>{{b.title}} | {{b.author}} | {{b.read}}<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>{% endfor %}
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>{% endif %}
</span></code></pre></td></tr></table></div></figure></p>

<h3>Open <em>views.py</em> again and make it looks like this-</h3>

<pre><code class="python">from django.http import HttpResponse
from books.models import Books
from django.template import Context, loader
def index(request):
    books_list = Books.objects.all()
    t = loader.get_template('books/index.html')
    c = Context({'books_list': books_list,})
    return HttpResponse(t.render(c))
</code></pre>

<p>Basically, the loader is the path to the template we created, which then gets assigned to the Python object via the Context dictionary.</p>

<h3>Save the file. Run the server. Refresh the <a href="http://localhost:8000/books">http://localhost:8000/books</a> page. There&rsquo;s the books. Looks a little better, too.</h3>

<p>I know I said that I&rsquo;d show to make it so a non-administrator can add data to the database - but I just realized that this would be another lesson in itself. So, I&rsquo;m going to stop here. Feel free to view the Django Tutorial to learn how to add that functionality to your application.</p>

<p>In fact, the whole point to these tutorials is for you to get started with the Django tutorial. I bounced around a bit but I hope that you can now go through the tutorial a bit easier now that you have a starting off point.</p>

<p>Thanks for watching. See you next time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Crash Course in Web2py (Part 5 - Modifying the Appearance and Deploying the Web Form)]]></title>
    <link href="http://mherman.org/blog/2012/12/10/crash-course-in-web2py-part-5-modifying-the-appearance-and-deploying-the-web-form/"/>
    <updated>2012-12-10T07:39:00-07:00</updated>
    <id>http://mherman.org/blog/2012/12/10/crash-course-in-web2py-part-5-modifying-the-appearance-and-deploying-the-web-form</id>
    <content type="html"><![CDATA[<p>You made it. In this final tutorial I&rsquo;ll show you how to easily modify the form&rsquo;s appearance, and we&rsquo;ll deploy the app to PythonAnywhere.</p>

<p><em>Assumptions:</em></p>

<ol>
<li>You have web2py already installed => <a href="http://mherman.org/blog/2012/11/27/crash-course-in-web2py-part-1/">part 1</a></li>
<li>You created the skeleton web form => <a href="http://mherman.org/blog/2012/12/01/crash-course-in-web2py-part-2-web-forms/">part 2</a></li>
<li>You added data validation (with the help of Han Solo) => <a href="http://mherman.org/blog/2012/12/06/crash-course-in-web2py-part-3-form-validation/">part 3</a></li>
<li>You learned how to easily add CRUD functions to manage records => <a href="http://mherman.org/blog/2012/12/09/crash-course-in-web2py-part-4-managing-form-records/">part 4</a></li>
</ol>


<p>Let&rsquo;s get going &hellip;</p>

<p>Launch the server. -> Go to the admin interface. -> Edit the &ldquo;form&rdquo; application.</p>

<p>So, by default web2py utilizes the <a href="http://twitter.github.com/bootstrap/">Twitter Bootstrap</a> front-end framework, which makes updating the layout and appearance easy.</p>

<h2>Download New Layout Plugin</h2>

<p>First, go to the web2py layout plugin <a href="http://web2py.com/layouts">page</a> to find a layout that you like. In this example, I used <a href="http://web2py.com/layouts/static/plugin_layouts/layouts/KeepitSimple/index.html">KeepitSimple</a>. Once you find one, go ahead and download the .w2p file.</p>

<p>Back on the admin page for the form, scroll to the bottom of the page, and upload the .w2p file beneath the Plugins section. Now, click the link for plugin_layouts and copy the name of the new file including the full path- <em>plugin_layouts/layouts/KeepitSimple.html</em>. Now, edit the display_your_form.html file and paste the new .html file in the very first line of the code, replacing layout.html-</p>

<p><img src="http://www.backwardsteps.com/uploads/2012-12-09_2303.png" alt="" /></p>

<p>Next, I&rsquo;m going to remove the <em>Web Form</em> title between the h1 tags, remove the line breaks, and clean up the instructions. I&rsquo;m also going to remove the <em>Submitted</em>, <em>Accepted</em>, and, <em>Errors</em>  sections, as the user does not need to see all that information. So the final code looks like this:</p>

<p>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{{extend <span class="ni">&amp;lsquo;</span>plugin_layouts/layouts/KeepitSimple.html<span class="ni">&amp;rsquo;</span>}}<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>Please enter your first name, last name, and email address - thanks!<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;h2&gt;</span>Inputs:<span class="nt">&lt;/h2&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>{{=form}}
</span></code></pre></td></tr></table></div></figure>
</p>

<p>Okay, now let&rsquo;s edit the <em>KeepitSimple html</em> file:</p>

<p>First change the header div found in the middle of the page - &ldquo;Welcome. Please register to access your services.&rdquo; (I also surrounded it in <code>&lt;center&gt;</code> tags)</p>

<p>Add the following code to the header, just below the style.css -</p>

<p>
<code>html
{{response.files.append(URL(request.application,'static','css/bootstrap.min.css'))}}
</code>
</p>

<p>Then remove these lines of code-</p>

<p>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{{try:}}{ {=auth.navbar(action=URL(<span class="ni">&amp;lsquo;</span>default<span class="ni">&amp;rsquo;</span>,<span class="ni">&amp;lsquo;</span>user<span class="ni">&amp;rsquo;</span>))}}{{ except:pass}}
</span><span class='line'>{{=MENU(response.menu,_class=<span class="ni">&amp;lsquo;</span>web2py-menu<span class="ni">&amp;rsquo;</span>)}}<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;footer&quot;</span><span class="nt">&gt;</span><span class="ni">&amp;copy;</span>2007 Keep it Simple <span class="ni">&amp;nbsp;</span>
</span><span class='line'><span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;separator&quot;</span>
</span><span class='line'><span class="err">|</span>
</span><span class='line'><span class="err">&lt;/</span><span class="na">span</span><span class="nt">&gt;</span>
</span><span class='line'><span class="ni">&amp;nbsp;</span> Design by
</span><span class='line'><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://www.realitysoftware.ca&quot;</span> <span class="na">title=</span><span class="s">&quot;Website Design&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>Reality Software
</span><span class='line'><span class="nt">&lt;/a&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span>
</span><span class='line'>
</span><span class='line'>## Update CSS
</span><span class='line'>
</span><span class='line'>Your form should look much cleaner now. It&#39;s a bit bare, but you can liven it up with your own HTML. Now, let&#39;s add some changes to the CSS.
</span><span class='line'>
</span><span class='line'>Again, since web2py uses the Twitter Bootstrap, you can make CSS changes quickly. Navigate to [Bootswatch](http://bootswatch.com/). Here, you can find various CSS themes to play with. In this example, I&#39;m going to use Spacelab.
</span><span class='line'>
</span><span class='line'>Now, what you need to do is view the *bootstrap.min.css* file by clicking download and then selecting the file. It should open in your browser. Copy all the text. Return to your web2py admin. Scroll down to the static files, click the CSS folder, edit the boootstrap.min.css file-
</span><span class='line'>
</span><span class='line'>![](http://www.backwardsteps.com/uploads/2012-12-10_0824.png)
</span><span class='line'>
</span><span class='line'>-and then delete all the current CSS and paste in the CSS that you copied before from the Spacelab theme. Refresh your form @ [http://127.0.0.1:8000/form/default/display_your_form.html](http://127.0.0.1:8000/form/default/display_your_form.html) and test it again to make sure nothing broke.
</span><span class='line'>
</span><span class='line'>Oh - and if you want, you can edit the layout/appearance of the all_records page as well. I trust that you can figure out how to do that by now. If not - Try anyway, and if you fail, Google to find the answer. You&#39;ll learn better that way.
</span><span class='line'>
</span><span class='line'>If all looks well, it&#39;s time to deploy!
</span><span class='line'>
</span><span class='line'>## Deploy
</span><span class='line'>
</span><span class='line'>I&#39;ll go over this quick since I covered this in [detail](http://mherman.org/blog/2012/11/27/crash-course-in-web2py-part-1/) in the first tutorial.
</span><span class='line'>
</span><span class='line'>1. Go back to the admin page ([http://127.0.0.1:8000/admin/default/site](http://127.0.0.1:8000/admin/default/site)) and click Pack All. Save the w2p-package to your computer.
</span><span class='line'>1. Fire up [PythonAnywhere](https://www.pythonanywhere.com/).
</span><span class='line'>1. Once logged in, click *Web*, *Replace with a new web app*, then click the button for web2py.
</span><span class='line'>1. Enter an admin password. Click Next.
</span><span class='line'>1. Next, head on over to the admin interface - https://mjhea9.pythonanywhere.com/admin/default/index (don&#39;t forget to use your own user name and add the https:) - which should look familiar (it better!). Enter your password.
</span><span class='line'>1. On the right side of the page, under the *Upload and install packed application section*, upload the w2p file you saved. Enter a name for your app (&quot;form&quot;). Click Install.
</span><span class='line'>1. Check out your form. You can view mine at - [https://mjhea9.pythonanywhere.com/form/default/display_your_form.html](https://mjhea9.pythonanywhere.com/form/default/display_your_form.html)
</span><span class='line'>
</span><span class='line'>![](http://www.backwardsteps.com/uploads/2012-12-10_0917.png)
</span><span class='line'>
</span><span class='line'>Now just test it out to make sure it all works. Make sure all the errors/validators are working and then add a new record. One thing you do need to change is the default for generic view. You can read more about it [here](http://web2py.com/books/default/chapter/29/10#Generic-views). Open up db.py and scroll down to line 28. You need to remove the if statement, so the line will look just like this:
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>response.generic_patterns = [<span class="ni">&amp;lsquo;</span>*<span class="ni">&amp;rsquo;</span>]
</span></code></pre></td></tr></table></div></figure></p>

<p>Now, make sure you can access the <em>grid</em> page - <a href="https://mjhea9.pythonanywhere.com/form/default/all_records">https://mjhea9.pythonanywhere.com/form/default/all_records</a> - and edit, update, and delete some records.</p>

<p>One change that does need to be made is to add the requirement <em>IS_EMAIL()</em> to the email validation field to the db.py file; otherwise, you can submit email addresses that do not follow the conventional format. The final code looks like this:</p>

<pre><code class="python">db = DAL('sqlite://webform.sqlite')
db.define_table('register',
    Field('first_name', requires=[IS_NOT_EMPTY(), IS_ALPHANUMERIC()]),
    Field('last_name', requires=[IS_NOT_EMPTY(), IS_ALPHANUMERIC()]),
    Field('email', unique=True, requires=[IS_NOT_EMPTY(), IS_EMAIL()]),
    Field('email_validate',requires=[IS_EMAIL(), IS_EQUAL_TO(request.vars.email)]))
db.register.email.requires=IS_NOT_IN_DB(db,'register.email')
</code></pre>

<h2><strong>Recap</strong></h2>

<p>And you&rsquo;re done. So - what all did we do?</p>

<ul>
<li><a href="http://mherman.org/blog/2012/11/27/crash-course-in-web2py-part-1/">Part 1</a>: You learned how to install web2py on your local computer and deploy a basic app on a cloud platform</li>
<li><a href="http://mherman.org/blog/2012/12/01/crash-course-in-web2py-part-2-web-forms/">Part 2</a>: You learned about Model View Control (MVC) architecture and created a skeleton web form</li>
<li><a href="http://mherman.org/blog/2012/12/06/crash-course-in-web2py-part-3-form-validation/">Part 3</a>: You added data validation to the form</li>
<li><a href="http://mherman.org/blog/2012/12/09/crash-course-in-web2py-part-4-managing-form-records/">Part 4</a>: You learned how to manage records in the database</li>
<li><a href="http://mherman.org/blog/2012/12/10/crash-course-in-web2py-part-5-modifying-the-appearance-and-deploying-the-web-form/">Part 5</a>: You learned how to modify the appearance and layout of the form</li>
</ul>


<p>Congrats!</p>

<p>What&rsquo;s next? Think about what you can do with this info.</p>

<ul>
<li>Keep practicing.</li>
<li>Build something else.</li>
<li>Make some money</li>
<li>And have fun!</li>
</ul>


<p>Thanks for reading. Cheers.</p>

<p>You can find the new code for db.py, display_your_form.html, and default.py, as well as all the files and the final packed app (.w2p) <a href="https://github.com/mjhea0/web2py/tree/master/form%20-%20part%204">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Crash Course in Web2py (Part 4 - Managing Form Records)]]></title>
    <link href="http://mherman.org/blog/2012/12/09/crash-course-in-web2py-part-4-managing-form-records/"/>
    <updated>2012-12-09T22:32:00-07:00</updated>
    <id>http://mherman.org/blog/2012/12/09/crash-course-in-web2py-part-4-managing-form-records</id>
    <content type="html"><![CDATA[<p>Alright. In this tutorial I&rsquo;ll show you how to modify the controller so that the end user can update and delete records. At this point, I assume:</p>

<ol>
<li>You have web2py already installed => <a href="http://mherman.org/blog/2012/11/27/crash-course-in-web2py-part-1/">part 1</a></li>
<li>You created the skeleton web form => <a href="http://mherman.org/blog/2012/12/01/crash-course-in-web2py-part-2-web-forms/">part 2</a></li>
<li>You added data validation (with the help of Han Solo) => <a href="http://mherman.org/blog/2012/12/06/crash-course-in-web2py-part-3-form-validation/">part 3</a></li>
</ol>


<p>Let&rsquo;s begin &hellip;</p>

<p>(1) Launch the server. (2) Go to the admin interface. (3) Edit the &ldquo;form&rdquo; application.</p>

<h2><strong>Controller</strong></h2>

<p>Add the following code to <em>default.py</em> just before the SQLFORM function, then add the variable to the function itself:</p>

<pre><code class="python">update = db.register(request.args(0))
form = SQLFORM(db.register, update)
</code></pre>

<p>Essentially, <em>request.args()</em> pulls up a user record associated with a specific unique ID.</p>

<h2>Test</h2>

<p>Test this out by adding a new record to the database @ <a href="http://127.0.0.1:8000/form/default/display_your_form.html">http://127.0.0.1:8000/form/default/display_your_form.html</a>. Make note of the unique id in the <em>Accepted Fields</em> section.</p>

<p><img src="http://www.backwardsteps.com/uploads/2012-12-08_2055.png" alt="" /></p>

<p>Now append that unique id to the end of the base URL - e.g., <a href="http://127.0.0.1:8000/form/default/display_your_form/21">http://127.0.0.1:8000/form/default/display_your_form/21</a> - and the record should appear on a new page, which the user can update.</p>

<hr />

<p>Please note: you can add <em>writable=False</em> or <em>readable=False</em> to the fields in the database to prevent a user from either editing or viewing a particular field. In the example below, I added <em>writable=False</em> to the <em>first_name</em> field.</p>

<p><img src="http://www.backwardsteps.com/uploads/2012-12-08_2111.png" alt="" /></p>

<p>So, now the user can only edit the last name and email fields.</p>

<hr />

<p>Moving on, for this process to work right, the user making the edits must know the unique id beforehand, which is unrealistic. web2py has a solution for that - <em>grid</em>.</p>

<h2>Controller</h2>

<p>The <em>grid</em> method is just wonderful. You have to see it to believe it. Quickly now, add the following function to <em>default.py</em>:</p>

<pre><code class="python">def all_records():
    grid = SQLFORM.grid(db.register,user_signature=False)
    return locals()
</code></pre>

<p>Navigate to the following URL - <a href="http://127.0.0.1:8000/form/default/all_records">http://127.0.0.1:8000/form/default/all_records</a></p>

<p>Wow.</p>

<p>The end user can now perform the CRUD functions as well as search and sort all the records in the database - and it literally took twenty seconds to add this functionality. You can, of course, also require user authentication so only certain users can edit, while other users have read-only access.</p>

<h2>Model</h2>

<p>Finally, let&rsquo;s add two more validators to the form. Go to your database.</p>

<p>I want the user to validate his/her email address and I want it to be unique, so update db.py with the following code:</p>

<pre><code class="python">db = DAL('sqlite://webform.sqlite')
db.define_table('register',
    Field('first_name', requires=[IS_NOT_EMPTY(), IS_ALPHANUMERIC()]),
    Field('last_name', requires=[IS_NOT_EMPTY(), IS_ALPHANUMERIC()]),
    Field('email', unique=True, requires=[IS_NOT_EMPTY(), IS_EMAIL()]),
    Field('email_validate',requires=IS_EQUAL_TO(request.vars.email)))
db.register.email.requires=IS_NOT_IN_DB(db,'register.email')
</code></pre>

<p>Take note of lines 5, 6, and 7.</p>

<h2>Test</h2>

<p>Test this by first trying two different email addresses:</p>

<p><img src="http://www.backwardsteps.com/uploads/2012-12-08_2238.png" alt="" /></p>

<p>Then test it again with an email you know is already in the database.</p>

<p><img src="http://www.backwardsteps.com/uploads/2012-12-08_2240.png" alt="" /></p>

<p>Perfect.</p>

<p>Well, we could edit the actual errors that populate, but that&rsquo;s a bit more complicated. They&rsquo;ll suffice for now.</p>

<h2>Recap</h2>

<p>Again, by adding just a few statements we added much functionality to our form, highlighting the power of such web frameworks like web2py. Well. that&rsquo;s it for now. In the <a href="http://mherman.org/blog/2012/12/10/crash-course-in-web2py-part-5-modifying-the-appearance-and-deploying-the-web-form/#.U5bvQJRdUZ0">next</a> tutorial, I&rsquo;ll show you in brief how to modify the form&rsquo;s appearance via the CSS files. Oh - and we&rsquo;ll finally deploy the finished app!</p>

<p>You can find the new code for db.py, display_your_form.html, and default.py <a href="https://github.com/mjhea0/web2py/tree/master/form%20-%20part%203">here</a>.</p>
]]></content>
  </entry>
  
</feed>
