<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: excel | Michael Herman]]></title>
  <link href="http://mjhea0.github.com/blog/categories/excel/atom.xml" rel="self"/>
  <link href="http://mjhea0.github.com/"/>
  <updated>2015-10-26T20:20:39-06:00</updated>
  <id>http://mjhea0.github.com/</id>
  <author>
    <name><![CDATA[Michael Herman]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Excel Tips: How to Cut Down on Calculations Using SUMIF and SUMIFS]]></title>
    <link href="http://mjhea0.github.com/blog/2012/12/12/excel-tips-how-to-cut-down-on-calculations-using-sumif-and-sumifs/"/>
    <updated>2012-12-12T20:23:00-07:00</updated>
    <id>http://mjhea0.github.com/blog/2012/12/12/excel-tips-how-to-cut-down-on-calculations-using-sumif-and-sumifs</id>
    <content type="html"><![CDATA[<p>The SUMIF and SUMIFS function in Microsoft Excel is a simple, yet powerful calculation tool. This tutorial will show you how this function works, as well as provide examples of how to use it. Most of you are aware that the SUM function calculates the total of a cell range. SUMIF takes this calculation step a bit further. It says, &quot;Only <strong>SUM</strong> the numbers <em>in this range</em> <strong>IF</strong> a cell <em>in this range</em> contains a specific value.&quot;</p>

<h2><strong>SUMIF Arguments: Range, Criteria, and Sum Range</strong></h2>

<p><em>Proper syntax:</em> =SUMIF(range, criteria, sum_range) Range and criteria are essential parts of any SUMIF equation; while the sum range is optional. What does each part do, in English?</p>

<ul>
<li>  <em>Range</em> - The range of cells you want Excel to search. This could be a block of cells, in which case you would use the top left corner and bottom right corner of your range (A1:C3, for example, gives a three by three area of cells).</li>
<li>  <em>Criteria</em> - Defines the flag Excel is to use to determine which cells to add. Using our spreadsheet example below, the criteria could be &quot;Non Edible&quot;, &quot;October&quot; or &quot;Car&quot;, to name a few. In many cases, it&#39;s just a number. It could be greater than, less than, or equal to, as well.</li>
<li>  <em>Sum Range</em> - Optional. Defines the cells to sum. This range holds the actual numbers. If it&#39;s left out of the equation, the function sums the range. As with range, this could be a block of cells, column or rows.</li>
</ul>

<h2><strong>Using the SUMIF Function</strong></h2>

<p>For this tutorial, we&#39;re going to use a simple table to track household expenditures for two months. To set up your table and criteria, you first have to define the overall goals. In this example, our goals are:</p>

<ul>
<li>  determine monthly household costs</li>
<li>  provide a breakdown of overall costs</li>
<li>  automaticly update of calculations Let&#39;s get started!</li>
</ul>

<p><strong>(1) Spreadsheet Setup</strong></p>

<p>Create a table called COST TABLE with the following headings: Month, Type, Sub-type, and Cost. Fill them in, as shown in the screenshot below:</p>

<p><img src="http://www.backwardsteps.com/uploads/2012-12-12_0935.png" alt="2012-12-12_0935"></p>

<p>Create a table called CALCULATIONS, and add the following headings in the first column: October, Food, Non Edible, November, Food, Non Edible, and Total  - following the format below:</p>

<p><img src="http://www.backwardsteps.com/uploads/2012-12-12_0949.png" alt="2012-12-12_0949"></p>

<p><strong>(2) Write the SUMIF Function in the CALCULATIONS table</strong></p>

<p>The SUMIF function in C4 (column C is the Totals column) totals the Cost column depending on the Type of the entry. Cell C4 says: SUMIF(the Month column, equals October, add the Cost column) - <em>=SUMIF(F4:F13,&quot;October&quot;,I4:I13)</em></p>

<p>Meanwhile, the formula for cell C5 - <em>=SUMIF(G4:G8,&quot;food&quot;,I4:I8)</em></p>

<p>Notice how the range only goes from G4:G8, as I only want to total food for October. If wanted to total food for November as well, I&#39;d use the range G4:G13. Now, if the Month column was not sorted, then I&#39;d need to use the SUMIFS function and specify to criteria - e.g., <em>=SUMIFS(I4:I13,F4:F13,&quot;October&quot;,G4:G13,&quot;Food&quot;)</em></p>

<p>This produces the exact same results - $4.24. The syntax is slightly different in that you specify the sum<em>range first, and it is mandatory. _ Proper syntax:</em> =SUMIFS(sum<em>range, criteria</em>range1, criteria1, criteria<em>range2, criteria2, criteria</em>range3, criteria3 ...)<br>
 <img src="http://www.backwardsteps.com/uploads/2012-12-12_1013.png" alt="2012-12-12_1013"></p>

<p><strong>(3) ** **Automatic Updates</strong></p>

<p>In order for the calculation table to update when a number is changed or when a new row is added, you need to change the COST TABLE from a range to an actual table. To do that in Excel, click anywhere in the table and press Crtil+T on your keyboard. Make sure you do not include the COST TABLE label in your range selection:</p>

<p><img src="http://www.backwardsteps.com/uploads/2012-12-12_1022.png" alt="2012-12-12_1022"></p>

<p>Now, you&#39;ll need to rewrite your functions. For example, cell C4 will now be - <em>=SUMIF(Table1[Month],&quot;October&quot;,Table1[Cost])</em></p>

<p>See the difference? Instead of the range, there is the table name and header. Update all of the functions to match this syntax:</p>

<p><img src="http://www.backwardsteps.com/uploads/2012-12-12_1035.png" alt="2012-12-12_1035"></p>

<p>Now when you make any changes the CALCULATIONS table will update automatically (compare the two Totals columns to see the changes). Click <a href="http://www.backwardsteps.com/uploads/sumif-sumifs.mp4">here</a> to watch the video.</p>

<p><strong>(4) More Examples</strong></p>

<p>SUMIF can use criteria such as <em>greater than</em> or <em>less than</em>. For example, if you only want to total costs larger than $4, you can write:</p>

<p><strong>Example 1:</strong> =SUMIF(I3:I12,&quot;&gt;4&quot;,I3:I12)</p>

<p>SUMIF functions can be written without the sum range if it&#39;s the same as the range. In the example below, we&#39;re telling Excel, &quot;Sum any values greater than 4 in the Cost column.&quot;</p>

<p><strong>Example 2:</strong> =SUMIF(I3:I12,&quot;&gt;4&quot;)</p>

<p>If the criteria is a number or cell reference, the function can be written without quotes. If the criteria is an expression or text, frame it in quotes.</p>

<p><strong>Example 3:</strong> without quotes, if the range equals the value in cell I3: =SUMIF(I3:I12, I3)</p>

<p>Combine SUMIF with other functions for higher calculations, such as summing and then dividing, by placing the entire function in parenthesis:</p>

<p><strong>Example 4:</strong> =SUM ( (SUMIF (I3:I12,&quot;&gt;4&quot;) ) /3 )</p>

<p><em>Tip: Remember that Excel calculates using the standard order of operations.</em></p>

<h2><strong>The Benefits of SUMIF</strong></h2>

<p>SUMIF has many benefits, but a big bonus is the ability to limit the number of spreadsheets. By adding defining columns rather than using spreadsheets (a Month column instead of splitting October costs and November costs into separate sheets, for example), you keep all the data on a single sheet. In turn, it becomes easier to sort, compare, and modify groupings. Now, when you add to your Cost Table, your calculations will automatically update. All you have to do is type your entries. Try it yourself!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[51 New Excel 2013 Functions]]></title>
    <link href="http://mjhea0.github.com/blog/2012/11/09/51-new-excel-2013-functions/"/>
    <updated>2012-11-09T15:50:00-07:00</updated>
    <id>http://mjhea0.github.com/blog/2012/11/09/51-new-excel-2013-functions</id>
    <content type="html"><![CDATA[<p><em>Excel 2013 promises greater functionality and the ability to more quickly input and analyze data. Although this version of Excel uses some of the same functions as older versions, you should learn the 51 new functions to make sure you don&#39;t miss out on something that could become a favorite resource. In addition, some older functions may become obsolete as Microsoft continues to create updated versions of Excel. Check out the latest Office has to offer with the following new functions.</em></p>

<p><em>You can also download an XLSX version <a href="http://backwardsteps.com/tutorials/excel%202013%20functions.xlsx">here</a>, comparing the Excel descriptions of each function to my descriptions and examples.</em></p>

<h2><strong>Date and Time Functions</strong></h2>

<p><strong>DAYS</strong> returns the number of days between two dates. For example, if you input that you received a payment on 1/01/2013 and another payment on 1/13/2013, the DAYS function tells you that the payments were spaced 12 days apart.</p>

<p><strong>ISOWEEKNUM</strong> returns the week number according to ISO standards. Followed by most European countries, the International Organization for Standardization (ISO 8601) states that all weeks begin on a Monday. Further, the first week of the year starts with the week that the first Thursday and January 4th fall within in. For example, 1/01/2012 is part of week 52 of 2011. Week 1 of 2012 begins on 1/02/2012 (Monday) and ends on 1/08/2012 (Sunday). Compare this function to the WEEKDAY function to gain a better understanding.</p>

<h2><strong>Engineering Functions</strong></h2>

<p><strong>BITAND</strong> runs the bitwise operation AND on two numbers. It converts them into binary code and returns 1 if and only if both numbers convert to 1 in binary; otherwise, it returns 0.</p>

<p><strong>BITOR</strong> runs the bitwise operation OR, which sets a bit to 1 if it finds any 1&#39;s in the two bits and sets the bit to 0 if not. For example, BITOR will set the two bits 1 &amp; 0 to 1 and 0 &amp; 0 to 0.</p>

<p><strong>BITXOR</strong>, which is short for EXCLUSIVE OR, compares two bits and sets them to 1 if they are different and 0 if they are the same. For example, the bits 1 &amp; 0 become 1 while 1 &amp; 1 become 0.</p>

<p><strong>BITRSHIFT</strong> shifts bits to the right by a specified amount. For example, shifting by 1 moves all the bits in a sequence over to the right by 1, so that 000110 becomes 000011.</p>

<p><strong>BITLSHIFT</strong> shifts bits to the left by a specified amount. For example, shifting by 1 moves all the bits in a sequence over to the left by 1 so that 000110 becomes 001100.</p>

<p><strong>IMCOSH</strong> returns the hyperbolic cosine of a complex number. For example, if you want to get the hyperbolic cosine of 5 + 3i, running this function returns a result including both real and imaginary numbers. You must run this function in the format =IMCOSH(&quot;5+3i&quot;).</p>

<p><strong>IMCOT</strong> returns the hyperbolic cotangent of a complex number. You could change IMCOSH to IMCOT to calculate the hyperbolic cotangent of 5 + 3i.</p>

<p><strong>IMCSC</strong> provides the cosecant of a complex number. Note: this is not the hyperbolic cosecant; it is the trigonometric cosecant.</p>

<p><strong>IMCSCH</strong> provides the hyperbolic cosecant of a complex number. If you need this function, make sure you add the H on the end of the function so that you get the hyperbolic cosecant rather than the trigonometric cosecant.</p>

<p><strong>IMSEC</strong> provides the trigonometric secant of a complex number. As with cosecants, make sure you are using the correct function in order to get the type of secant you want.</p>

<p><strong>IMSECH</strong> provides the hyperbolic secant of a complex number. You can run this function by adding an H onto the end of the trigonometric function and rerunning. For example, if you had calculated the trigonometric secant of 5 + 3i by typing =IMSEC(&quot;5+3i&quot;) you could then run the hyperbolic secant by changing IMSEC to IMSECH.</p>

<p><strong>IMSINH</strong> calculates the hyperbolic sine of a complex number. As with all the other hyperbolic functions, simply place the expression in quotes that you want to run. For example, you could type =IMSINH(&quot;5+3i&quot;).</p>

<p><strong>IMTAN</strong> calculates the tangent of a complex number, such as the tangent of 5+3i.</p>

<h2><strong>Financial Functions</strong></h2>

<p><strong>PDURATION</strong> calculates how many periods are needed for an investment to reach a specific value. For example, if you want to know how long it&#39;ll take for your investment (present value) to be worth $10,000 (future value), PDURATION can calculate how many periods you can expect to have to wait (depending on the interest rate).</p>

<p><strong>RRI</strong> is the complementary value to PDURATION. Instead of calculating how my periods are needed for the investment to reach a specific value, it calculates the interest rate on the investment if you know how long it will take to reach the value. For example, if PDURATION calculates that it will take 10 years for your investment to grow from $5,000 to $10,000, RRI can calculate an interest rate of 7.2 percent.</p>

<h2><strong>Information Functions</strong></h2>

<p><strong>ISFORMULA</strong>  checks whether a specific cell contains a formula. If yes, the result is &quot;TRUE&quot;; and if no, the result is &quot;FALSE.&quot;</p>

<p><strong>SHEET</strong> tells you which number sheet you are working with. For example, if you have 10 worksheets in a workbook and are working with the second worksheet created, SHEET will return a value of 2.</p>

<p><strong>SHEETS</strong> tells you how many sheets are in the workbook you are working with. For example, if there are 10 worksheets in the workbook, the SHEETS function will return a value of 10.</p>

<h2><strong>Logical Functions</strong></h2>

<p><strong>IFNA</strong> returns a specific value that you set if an expression resolves to N/A. Otherwise, it returns the expression&#39;s value. For example, if you have a spreadsheet that has listings for different cities, you can use an IFNA function to return the expression, &quot;Sorry, not found&quot; if you search for a city that is not in the database using VLOOKUP.</p>

<p><strong>XOR</strong> returns TRUE if one of the conditions in is true, otherwise it will return FALSE. For example, if you use XOR to test whether your sales are greater than $500, your profit is more than 20 percent of your sales and you have at least 20 new customers this month, you will get a response of TRUE if only 1 of those criteria is met.</p>

<h2><strong>Lookup and Reference Functions</strong></h2>

<p><strong>FORMULATEXT</strong> shows you the formula that is listed in a particular cell so that you can see it and check for any errors. For example, if you run =FORMULATEXT(R1) in cell R4, it puts the formula found at R1 into R4.</p>

<h2><strong>Math and Trigonometry Functions</strong></h2>

<p><strong>ACOT</strong> calculates the arccotangent of a particular number. You need to use real numbers to use this function. For example, if the cotangent is 2, you can run ACOT(2) to find out the arccotangent. ACOT calculates arccotangents in radians.</p>

<p><strong>ACOTH</strong> calculates the hyperbolic arccotangent rather than the standard arccotangent. For example, you can use ACOTH(2) to find the hyperbolic arccotangent of 2.</p>

<p><strong>ARABIC</strong> converts numerals from Roman to Arabic. For example, you can run ARABIC(XIII) to get the result of &quot;13.&quot; You can also tell ARABIC to convert the contents of a cell into Arabic numerals For example, if cell A2 contains the number CXLIII, you can run ARABIC(A2) to get the result &quot;143.&quot;</p>

<p><strong>BASE</strong> converts hexadecimal numbers into numbers of whatever base you want with a specified minimum length. For example, you can convert hexidecimal numbers into base 2 with a minimum length of 10 using this function.</p>

<p><strong>CEILING.MATH</strong> rounds numbers up according you your specifications. You can either round numbers up to the nearest integer or the nearest multiple. For example, you can round 8.76 up to 9 (the nearest integer) or up to the nearest multiple of 5, which would be 10. You can also specify whether you want to round negative numbers towards zero or away from zero.</p>

<p><strong>COMBINA</strong> returns the number of combinations for a given number, including repetitions. For example, if you want to know how many three-letter combinations of a five-letter set are possible, you would run COMBINA (5,3) to get an answer of 35.</p>

<p><strong>COT</strong> gives you the cotangent of an angle in radians. You need to know the measurement of the angle in radians to run this function. For example, you can run COT(5) to find out the cotangent in radians of a 5-radian angle.</p>

<p><strong>COTH</strong> gives you the hyperbolic cotangent of a hyperbolic angle. For example, if your hyperbolic angle is 5, run COTH(5). Be careful not to mix COTH and COT up as they are different types of cotangents.</p>

<p><strong>CSC</strong> calculates the cosecant in radians of an angle. Make sure that you convert the angle to radians if you measure it in degrees. For example, if you have a 142 degree angle, convert it to 2.478 radians before running CSC(2.478) to find the cosecant.</p>

<p><strong>CSCH</strong> calculates the hyperbolic cosecant of an angle in radians. Run CSCH(angle) to get this result; make sure you only run CSCH if you want the hyperbolic cosecant, not the standard cosecant.</p>

<p><strong>DECIMAL</strong> converts a number into hexadecimal format. You need to know the base the number is written in so that you can convert it appropriately. For example, you can convert FF from base 16 to the hexadecimal equivalent, which is 255, using this function.</p>

<p><strong>FLOOR.MATH</strong> is the opposite of CEILING.MATH; it rounds numbers <em>down</em> to the nearest integer or multiple. For example, you could round 8.142 down to 8 or down to 6 (the nearest multiple of 3) using FLOOR.MATH.</p>

<p><strong>ISO.CEILING</strong> is similar to CEILING.MATH but does not take sign into account. For example, with CEILING.MATH you can ask it to round -3.41  further away from zero (-4) because of the sign. ISO.CEILING will round this number to -3 unless you specify a multiple such as nearest multiple of 2, in which case it will round up to -2.</p>

<p><strong>MUNIT</strong> displays a matrix of a dimension you specify, which needs to be entered as an array. For example, MUNIT(3) returns a 3x3 matrix.</p>

<p><strong>SEC</strong> calculates the secant of an angle in radians. For example, you can run SEC(2.478) to find the secant of an angle that measures 2.478 radians.</p>

<p><strong>SECH</strong> calculates the hyperbolic secant of an angle in radians. Use this function only for hyperbolic, not standard, secants of angles.</p>

<h2><strong>Statistical Functions</strong></h2>

<p><strong>BINOM.DIST.RANGE</strong> calculates the statistical probability of an outcome based on the results of a trial, using a binomial distribution curve. To perform this calculation, you need to know how many trials were performed and how many were successful. You also need to know the probability of success. For example, if your trial was flipping a coin 50 times to try to get heads and you got 10 heads, you would run BINOM.DIST.RANGE(50,.5,10).</p>

<p><strong>GAMMA</strong> returns the gamma value of a number. For example, GAMMA(132) calculates the gamma function of 132.</p>

<p><strong>GAUSS</strong> calculates the probability that a member of a standard normal population will fall somewhere between the mean and a specific number of standard deviations from the mean. For example, if you want to calculate the probability that somebody&#39;s test results will be less than three standard deviations from the mean, you would run GAUSS(3).</p>

<p><strong>PERMUTATIONA</strong> calculates the number of permutations including repetitions that are possible for a particular set. To use this function, you need to know the number of objects in the set and the number that will be chosen.</p>

<p><strong>PHI</strong> determines the phi value, or the value of the density function for a standard normal distribution. For example, PHI (1.43) calculates the density function for a standard normal distribution with a value of 1.43.</p>

<p><strong>SKEW.P</strong> tells you how much a distribution is skewed based on its population. Usually, you input the data from the population then run SKEW.P on the entire data set.</p>

<h2><strong>Text Functions</strong></h2>

<p><strong>NUMBERVALUE</strong> changes text to numbers based on locale-independent method. For example, 3.5% will be converted into .035.</p>

<p><strong>UNICHAR</strong> converts a number into the unicode character associated with that number. For example, UNICHAR(66) returns a value of B.</p>

<p><strong>UNICODE</strong> is the complement of UNICHAR; it returns the number associated with a particular character. For example, UNICODE(B) returns a value of 66.</p>

<h2><strong>Web Functions</strong></h2>

<p><strong>ENCODEURL</strong> converts a string of text into URL code so that you can filter results of a database. For example, ENCODEURL(&quot;michael herman&quot;) returns michael%20herman.</p>

<p><strong>FILTERXML</strong> returns XML data from a specified XML path. You must provide the XML.</p>

<p><strong>WEBSERVICE</strong> returns data from an online service. You must provide the URL for WEBSERVICE to draw from.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Import data from Excel into MySQL using Python]]></title>
    <link href="http://mjhea0.github.com/blog/2012/09/30/import-data-from-excel-into-mysql-using-python/"/>
    <updated>2012-09-30T13:13:00-06:00</updated>
    <id>http://mjhea0.github.com/blog/2012/09/30/import-data-from-excel-into-mysql-using-python</id>
    <content type="html"><![CDATA[<p>I just finished a basic Python script for a client that I&#39;d like to share with you. He needed an easy means of moving data back and forth between MySQL and Excel, and sometimes he needed to do a bit of manipulation between along the way. In the past I may have relied solely on VBA for this, but I have found it to be much easier with Python. In this post and the accompanying video, I show just part of the project - importing data from Excel into MySQL via Python. Let&#39;s get started.</p>

<blockquote>
<p>Be sure to check out the accompanying <a href="http://www.youtube.com/watch?v=YLXFEQLCogM">video</a>!</p>
</blockquote>

<h2>Download the dependencies</h2>

<p>Assuming you have Python installed (I&#39;m using version 2.7), download and install the xlrd library and MySQLdb module-</p>

<ul>
<li><a href="http://pypi.python.org/pypi/xlrd">http://pypi.python.org/pypi/xlrd</a></li>
<li><a href="http://sourceforge.net/projects/mysql-python/">http://sourceforge.net/projects/mysql-python/</a></li>
</ul>

<h2>Develop the script</h2>

<p>Then tailor the following script to fit your needs:</p>

<p>```python<br>
import xlrd<br>
import MySQLdb</p>

<h1>Open the workbook and define the worksheet</h1>

<p>book = xlrd.open<em>workbook(&quot;pytest.xls&quot;)<br>
sheet = book.sheet</em>by_name(&quot;source&quot;)</p>

<h1>Establish a MySQL connection</h1>

<p>database = MySQLdb.connect (host=&quot;localhost&quot;, user = &quot;root&quot;, passwd = &quot;&quot;, db = &quot;mysqlPython&quot;)</p>

<h1>Get the cursor, which is used to traverse the database, line by line</h1>

<p>cursor = database.cursor()</p>

<h1>Create the INSERT INTO sql query</h1>

<p>query = &quot;&quot;&quot;INSERT INTO orders (product, customer<em>type, rep, date, actual, expected, open</em>opportunities, closed_opportunities, city, state, zip, population, region) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)&quot;&quot;&quot;</p>

<h1>Create a For loop to iterate through each row in the XLS file, starting at row 2 to skip the headers</h1>

<p>for r in range(1, sheet.nrows):<br>
        product     = sheet.cell(r,).value<br>
        customer    = sheet.cell(r,1).value<br>
        rep         = sheet.cell(r,2).value<br>
        date        = sheet.cell(r,3).value<br>
        actual      = sheet.cell(r,4).value<br>
        expected    = sheet.cell(r,5).value<br>
        open        = sheet.cell(r,6).value<br>
        closed      = sheet.cell(r,7).value<br>
        city        = sheet.cell(r,8).value<br>
        state       = sheet.cell(r,9).value<br>
        zip         = sheet.cell(r,10).value<br>
        pop         = sheet.cell(r,11).value<br>
        region  = sheet.cell(r,12).value</p>
<div class="highlight"><pre><code class="text">    # Assign values from each row
    values = (product, customer, rep, date, actual, expected, open, closed, city, state, zip, pop, region)

    # Execute sql Query
    cursor.execute(query, values)
</code></pre>
</div>

<h1>Close the cursor</h1>

<p>cursor.close()</p>

<h1>Commit the transaction</h1>

<p>database.commit()</p>

<h1>Close the database connection</h1>

<p>database.close()</p>

<h1>Print results</h1>

<p>print &quot;&quot;<br>
print &quot;All Done! Bye, for now.&quot;<br>
print &quot;&quot;<br>
columns = str(sheet.ncols)<br>
rows = str(sheet.nrows)<br>
print &quot;I just imported &quot; %2B columns %2B &quot; columns and &quot; %2B rows %2B &quot; rows to MySQL!&quot;<br>
```</p>

<p>Hope this is useful. More to come!</p>
]]></content>
  </entry>
  
</feed>
